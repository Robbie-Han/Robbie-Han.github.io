{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/IMG_4601.JPG","path":"img/IMG_4601.JPG","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/IMG_4175.JPG","path":"img/IMG_4175.JPG","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"7fa586def7ff65d5c41d106ca1ca6c76a30964c6","modified":1572937337844},{"_id":"themes/yilia/README.md","hash":"99fefad758dcd5e1711b73b6fae718a30a298316","modified":1555760662890},{"_id":"themes/yilia/_config.yml","hash":"8bea62d71f6254c78e4fe8cad21bc2c56412383f","modified":1569760627223},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1555680070000},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1555680070000},{"_id":"source/about/index.md","hash":"42d99a41c067db1af1e7bb8008eb04739b97d08d","modified":1576770776162},{"_id":"source/_posts/.DS_Store","hash":"7f36140639ca5ab260c6f0cc5db6ad48c413843b","modified":1566476718264},{"_id":"source/_posts/Array-flat.md","hash":"ad78922146aba3eb2b5d7d4f297a7f67a4bd5c43","modified":1576770776131},{"_id":"source/_posts/Bable的loose模式.md","hash":"d249adf6abff26249a1e9944911d954a51eba53c","modified":1576770776131},{"_id":"source/_posts/CSS-width.md","hash":"427e965bd7106ed6948ee2f60d0423e12126b696","modified":1576770776132},{"_id":"source/_posts/Closures.md","hash":"b2c4a739ee92d2fa43fdac494202bcd2b48d10bc","modified":1576770776132},{"_id":"source/_posts/DOMContentLoaded.md","hash":"23ec70a3d84362d09ed1a0369f3fbfdf2c1ca01e","modified":1576770776133},{"_id":"source/_posts/GitCommitEmoji.md","hash":"8554b204116178b8340516dc41f018860d29ed58","modified":1576770776133},{"_id":"source/_posts/IsEqual(a,b).md","hash":"56a722b6316e0894ffc26c8d5c6c0b6339ecdfe6","modified":1576770776134},{"_id":"source/_posts/JS中的深浅拷贝.md","hash":"eca01a1d15de1d9d7b354c4d9c905d98883cb500","modified":1576770776134},{"_id":"source/_posts/JS互换两个变量.md","hash":"1c641f91543c80755eeed7099f5689d42727ce14","modified":1576770776134},{"_id":"source/_posts/Math.md","hash":"f9746545272268d0927a2eefb3185a55df82fc45","modified":1576770776135},{"_id":"source/_posts/Object.create()和new Object().md","hash":"ecd14650fa10e1b77c0d3fe1da4e3c4b347a9ed1","modified":1576770776135},{"_id":"source/_posts/Picgo.md","hash":"058db8e9f46ee793711ca260f6b52ef2c412b040","modified":1576770776135},{"_id":"source/_posts/Promise整理.md","hash":"e8be2474548b742ee6bd27309959d438936d6edb","modified":1576770776136},{"_id":"source/_posts/WebSocket和WebWorker.md","hash":"163719762901ad88624e849b3a32cb5c029a7b10","modified":1576770776137},{"_id":"source/_posts/VSCode 快捷键.md","hash":"250d8d9c240d506048bc063ea63b39e0029df2ed","modified":1576770776137},{"_id":"source/_posts/align-items和align-content区别.md","hash":"6d1a57f26a169544369e9397fc640dce8580fae0","modified":1576770776138},{"_id":"source/_posts/async函数整理.md","hash":"8199b4dac9e07c2d20ca8eb0f294eabb17bb23ca","modified":1576770776138},{"_id":"source/_posts/combineReducer.md","hash":"baa9453fec02e08ab79170b4458604ad2b6d9079","modified":1576770776139},{"_id":"source/_posts/background.md","hash":"6dfa8cb1527cd1c826f481b7a3379fd227dc2116","modified":1576770776139},{"_id":"source/_posts/dangerouslySetInnerHTML.md","hash":"dbf189dff651c9069bea8376824aba53c929f3a4","modified":1576770776140},{"_id":"source/_posts/emoji.md","hash":"f30c3d69db15df11810b99dbe02c6386fae77a8f","modified":1576770776140},{"_id":"source/_posts/for..in和for...of.md","hash":"79a9c40529a22f8d5157c4266d6b705dd7f41fba","modified":1576770776141},{"_id":"source/_posts/git merge.md","hash":"248a98603adf5a2fd3e510f0c4335a7e17e6005e","modified":1576770776142},{"_id":"source/_posts/git在zash中的缩写.md","hash":"ad732a0c2abd3b5862f349f7e1c0d17b1e32b8ff","modified":1576770776142},{"_id":"source/_posts/git常用命令.md","hash":"d6dc98c6a6379a727aeca88c24e41c478ff89660","modified":1576770776142},{"_id":"source/_posts/http缓存.md","hash":"af3b5c5051dd53df2159aad4d87888236c521457","modified":1576770776143},{"_id":"source/_posts/immutable优化react.md","hash":"f31a929c9b37af4a52b330b2ac0532bdf5054281","modified":1576770776143},{"_id":"source/_posts/js可迭代对象.md","hash":"a265d01ee23e2aa9a40499fdbe3cb56bc6006003","modified":1576770776143},{"_id":"source/_posts/max-height，min-height，height一起使用时，优先级问题.md","hash":"56507bc591f62d5c03a6ee5ee6d7a2d4d532ead4","modified":1576770776144},{"_id":"source/_posts/location.md","hash":"65dbbc1c585527777ad0fdf42af26bc6c633c9a9","modified":1576770776144},{"_id":"source/_posts/mouseenter and mouseover.md","hash":"0d7b9ebb9c513affa526f25da54330677748549e","modified":1576770776145},{"_id":"source/_posts/node-update.md","hash":"1f0c316bb333bc6e05fb89782db729b4569ec4d7","modified":1576770776145},{"_id":"source/_posts/node中require的路径解析.md","hash":"bf39e4216aa99bd4c8abd945e70e01edb4bd2948","modified":1576770776145},{"_id":"source/_posts/node版本号.md","hash":"ca05096b1ced9516bf5c566d4749deaa42881568","modified":1576770776146},{"_id":"source/_posts/npm包和npm link.md","hash":"dd2c0d110f44f207be12b5213565c45ab20594c7","modified":1576770776146},{"_id":"source/_posts/npm安装包.md","hash":"c76652659a117440f9104d509b9fc2abc64e257f","modified":1576770776146},{"_id":"source/_posts/number.md","hash":"f4ecd332d897a882b0e05b9f99b0a53f8ef78490","modified":1576770776147},{"_id":"source/_posts/page-rendering.md","hash":"210fce20e51e2bf1d6d1d6a3278e8dc72233ad26","modified":1576770776147},{"_id":"source/_posts/pairs.md","hash":"aecc9f4aec7a3d4bba0b85bf5e586d9901ace070","modified":1576770776147},{"_id":"source/_posts/parseInt函数.md","hash":"89557cbcd35afd4413ac0d830f92dd15f85bba42","modified":1576770776148},{"_id":"source/_posts/promise.all()代码实现.md","hash":"2d676cab4e62aa316beab44b320d59394d434344","modified":1576770776148},{"_id":"source/_posts/query-string源码仿写.md","hash":"58fa0ba17d93d844caf2f00135bb2f4c65227a1e","modified":1576770776149},{"_id":"source/_posts/queryString模块.md","hash":"f8fce30d76c381f2b04bcb60a22d10706e230444","modified":1576770776149},{"_id":"source/_posts/react事件.md","hash":"a618bb3fb9ad9340a08b7fc79861a0179253d971","modified":1576770776150},{"_id":"source/_posts/react-rooter.md","hash":"666653d974994a593f76b475a6155894fd85e2ed","modified":1576770776149},{"_id":"source/_posts/redux基础.md","hash":"fade7e41895f37054137f0231fef3961b2fef7d4","modified":1576770776150},{"_id":"source/_posts/replace.md","hash":"afa0523ba5bf743c84c12707936ed1d0c4f67899","modified":1576770776150},{"_id":"source/_posts/spectacle.md","hash":"ad75063059c7300add41d77f813354c888d0827a","modified":1576770776151},{"_id":"source/_posts/url从输入到页面显示.md","hash":"99c3136f09820ac85d34786aac484ad5459a9722","modified":1576770776151},{"_id":"source/_posts/中间件教程.md","hash":"0ef4c3436de5fdb18d0db11117aa6ee99031e536","modified":1576770776152},{"_id":"source/_posts/二叉树遍历.md","hash":"6272179c200a1f4a3beff5dbb1bac45b5bf397df","modified":1576770776152},{"_id":"source/_posts/从源码看redux中间件.md","hash":"b34be20857c36b5e0f94db5593634af0e9a7f6d2","modified":1576770776153},{"_id":"source/_posts/传递函数给组件.md","hash":"c253a3469bff910c14f0eadcf59a000074e60e87","modified":1576770776153},{"_id":"source/_posts/函数链式调用.md","hash":"540a64c93e3b256a5aeb3a134606c1152a9521d4","modified":1576770776154},{"_id":"source/_posts/同步fork来的仓库.md","hash":"3fa33565f4d0307c0a2f30b90de4055853a670cc","modified":1576770776154},{"_id":"source/_posts/垂直盒子边距合并.md","hash":"67277f10e1c1cf66fe2599dbec3b584367fa6663","modified":1576770776155},{"_id":"source/_posts/字母Ascall码.md","hash":"56749940e123a121db187363192031ecaea64efa","modified":1576770776155},{"_id":"source/_posts/安装nvm总结(MAC).md","hash":"ffb28b5e614df9ca8499a9a3af93bf52cb5fc74d","modified":1576770776155},{"_id":"source/_posts/宏任务和微任务.md","hash":"4cb1528e0f8d8ab84ddaf0ec09c5b692e3ea9527","modified":1576770776156},{"_id":"source/_posts/居中.md","hash":"479de91031ad30e8641ccf468157792684b05ccf","modified":1576770776156},{"_id":"source/_posts/开发中遇到的问题.md","hash":"960abc97cf0414830d535df71d41255df2f8ffff","modified":1576770776157},{"_id":"source/_posts/推一个空的commit.md","hash":"23f4585d1efa47876129ad61ace1a083bb806fd3","modified":1576770776157},{"_id":"source/_posts/数组交集并集.md","hash":"eef37d0891029dcdd7a04f196e860daf137c1849","modified":1576770776157},{"_id":"source/_posts/柯理化.md","hash":"95f0532f8afd2b2858b829f1db077453e0c784bf","modified":1576770776158},{"_id":"source/_posts/浏览器内核.md","hash":"dae66b44ce5d641b0b7714c532ebdcee2e396d88","modified":1576770776158},{"_id":"source/_posts/类数组对象.md","hash":"a3ad74505bff0d8213a699f69739f235520ef850","modified":1556544741315},{"_id":"source/_posts/线程和进程.md","hash":"7cbac859ca482ac4fc861f8b153666bc5d8e5a66","modified":1576770776159},{"_id":"source/_posts/继承之ES5和ES6对比.md","hash":"91d9b40291823d98e7ceffebe794118996897c97","modified":1576770776160},{"_id":"source/_posts/耗时线程案例.md","hash":"5b4ac4fb684e4f08a806733867eaee20330fea9b","modified":1576765644036},{"_id":"source/_posts/节流-滚动加载.md","hash":"aa3ad0230ab2f1a32d6db1edf325aaff76b6056a","modified":1576770776160},{"_id":"source/_posts/重新思考setTimeout--1.md","hash":"544edc007d72169c89564759d69bda6619ecfe07","modified":1576770776161},{"_id":"source/_posts/重新思考setTimeout--2.md","hash":"af662da1e2e787ee8e15c42e73cedcade59d306b","modified":1576770776162},{"_id":"source/_posts/防抖和节流.md","hash":"a3ff7e6e9940c1bdaa4f656b3ffad41d2fea8682","modified":1576770776162},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1555680070000},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1555680070000},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1555680070000},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1555680070000},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1555680070000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1555680070000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1555680070000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1555680070000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1555680070000},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1555680070000},{"_id":"themes/yilia/layout/layout.ejs","hash":"4e0521dd8a1b3abef368b89a116f6eef4e9bebb2","modified":1555907835343},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1555680070000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1555680070000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1555680070000},{"_id":"themes/yilia/source/.DS_Store","hash":"34a3b6f64a7ad6fa22b63f06f243dee0a0cbacc5","modified":1569761671099},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ff26c88a5c63922e8d83d22297404f60ccbe8a61","modified":1567405777242},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1555680070000},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1555680070000},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555680070000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1555680070000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"9ac4c2d7049250f15ba8725608233fe515a7b947","modified":1555814954491},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"6f66e5964aa7022495c896754938e236b18c3894","modified":1555848871284},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"790472db6aa9eef70b742de644f3ee1570be108d","modified":1567405029469},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"a288b9c73d56e17f13b8a23768dc7c97ccbb9ff8","modified":1555853188882},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1555680070000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1555680070000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1555680070000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1555680070000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1555680070000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1555680070000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1555680070000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1555680070000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1555680070000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1555680070000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1555680070000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1555680070000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1555680070000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1555680070000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1555680070000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1555680070000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1555680070000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1555680070000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1555680070000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1555680070000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1555680070000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1555680070000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1555909485448},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"304087dd38fa8d3e48e2632994e4a41e20311643","modified":1566702616177},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1555680070000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1555680070000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1555680070000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1555680070000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1555680070000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1555680070000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1555680070000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1555680070000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1555680070000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1555680070000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1555680070000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1555680070000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1555680070000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1555680070000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1555680070000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1555680070000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1555680070000},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1555680070000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1555680070000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1555680070000},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1555680070000},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1555680070000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1555680070000},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1555680070000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1567405783472},{"_id":"themes/yilia/source/img/IMG_4601.JPG","hash":"7431474227c20d91590c20eb75d511ce089945ad","modified":1555817225271},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1555680070000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1555814344332},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1555680070000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1555680070000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1555680070000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1555680070000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1555680070000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1555680070000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1555680070000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1555680070000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1555680070000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1555680070000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1555680070000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1555680070000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1555680070000},{"_id":"themes/yilia/source/img/IMG_4175.JPG","hash":"a1315d66ec17a939c40ff509a30b898725c73ba1","modified":1555817213917},{"_id":"public/content.json","hash":"e032d62ebeb72b40242f43025f2763218a94626c","modified":1577757918813},{"_id":"public/about/index.html","hash":"0b3a4a8942c83f9cb12214da77657f6ddfe11563","modified":1577757920959},{"_id":"public/2019/12/19/耗时线程案例/index.html","hash":"35174b5d3bfeceb8dbbb8b71c272bd1b225e2f5e","modified":1576770539459},{"_id":"public/2019/12/19/字母Ascall码/index.html","hash":"2bfab38be249f06b1b5ff5446a6481d86c06050e","modified":1577757920960},{"_id":"public/2019/12/19/垂直盒子边距合并/index.html","hash":"626f12ca69f52d5a51708941727ed7f5ac3903a5","modified":1577757920961},{"_id":"public/2019/12/19/node-update/index.html","hash":"e561326cb9bc039d0af3d009fad2b7c4fd0841b9","modified":1577757920963},{"_id":"public/2019/12/19/mouseenter and mouseover/index.html","hash":"2e5503882402e433923d3a76e0cf3ebd9a80f43c","modified":1577757920964},{"_id":"public/2019/12/19/js可迭代对象/index.html","hash":"743c45fcf0afe1daf89b71474b002cafebfcd296","modified":1577757920964},{"_id":"public/2019/10/18/Closures/index.html","hash":"f9b82213d9732eeea33fb3c243a221f719a40135","modified":1576770539460},{"_id":"public/2019/10/12/重新思考setTimeout--2/index.html","hash":"530c7e0e5fb2a2c3fe41585f1729fb3248332957","modified":1576770539460},{"_id":"public/2019/10/09/重新思考setTimeout--1/index.html","hash":"0ac210b9ceb6c628bdcd436224ffa01613e40a0d","modified":1576770539460},{"_id":"public/2019/09/29/DOMContentLoaded/index.html","hash":"669bc47fbc7ec03277bcf6cbb38e424198774345","modified":1576770539460},{"_id":"public/2019/09/29/page-rendering/index.html","hash":"932509619401e383dc2de3e680ef26ce2dddbbaf","modified":1576770539460},{"_id":"public/2019/09/05/节流-滚动加载/index.html","hash":"9165498196a49d65e3a1c203743945170b4c1ac4","modified":1576770539461},{"_id":"public/2019/09/02/npm包和npm link/index.html","hash":"691b2aa2bf6f92f4c091ee30dd82f40c1f163adf","modified":1576770539461},{"_id":"public/2019/08/25/二叉树遍历/index.html","hash":"95a03c79441d8375cbca21cb84a442ac31123321","modified":1576770539461},{"_id":"public/2019/08/25/align-items和align-content区别/index.html","hash":"253b989c4e142357f4d12f39a6aa12c3bf185b5d","modified":1576770539461},{"_id":"public/2019/08/25/JS互换两个变量/index.html","hash":"d941930604db4004386f0f137fa80e301f2ac9de","modified":1576770539461},{"_id":"public/2019/08/24/query-string源码仿写/index.html","hash":"3204cbffe2792a727e47de0787329c0bd9457657","modified":1576770539461},{"_id":"public/2019/08/12/location/index.html","hash":"0ffd745dddb2109e18bb2524a21229cd277671d9","modified":1576770539461},{"_id":"public/2019/08/11/react-rooter/index.html","hash":"e4afead3acd376ccbbd2a4eb55a48b63bd8c59a5","modified":1576770539462},{"_id":"public/2019/08/10/浏览器内核/index.html","hash":"b6924d7580b6352d401ab215631d8115a995956d","modified":1576770539462},{"_id":"public/2019/08/02/combineReducer/index.html","hash":"1054a0252b4b89dc4a7aaa756ea3aa79584ebd85","modified":1576770539462},{"_id":"public/2019/07/31/柯理化/index.html","hash":"1800253f92c53889fb45740712e932a47fd31ecd","modified":1576770539462},{"_id":"public/2019/07/29/Array-flat/index.html","hash":"72e42578f4e12603812b9138be62809486f0f5c6","modified":1576770539462},{"_id":"public/2019/07/14/parseInt函数/index.html","hash":"68c3aa137cad139ac2fb8da5e95e177acd45c65c","modified":1576770539462},{"_id":"public/2019/07/11/防抖和节流/index.html","hash":"df08c33bb03053f054b4ff9e6c2dd4dccdcdf086","modified":1576770539462},{"_id":"public/2019/07/07/线程和进程/index.html","hash":"a3995f5e1af74266e66d95c62ea61474851ef786","modified":1576770539463},{"_id":"public/2019/06/26/http缓存/index.html","hash":"bd84401b69f9876cf3c806d81e1fcbe884f150e4","modified":1576770539463},{"_id":"public/2019/06/23/开发中遇到的问题/index.html","hash":"aab41a57d827a038c130ba3d8ddb238bd47f6d30","modified":1576770539463},{"_id":"public/2019/06/17/react事件/index.html","hash":"bd35740aaa65c543dc9d434d183146e470e68ae2","modified":1576770539463},{"_id":"public/2019/06/12/url从输入到页面显示/index.html","hash":"9478345d3be1a42a02c07c86f016b25ed62526f7","modified":1576770539463},{"_id":"public/2019/06/11/Picgo/index.html","hash":"1827b488a294719c5f72fd238312fc710105d10f","modified":1576770539463},{"_id":"public/2019/06/11/WebSocket和WebWorker/index.html","hash":"ff06455a11dca7a9469bae5c9478ab29504b80b4","modified":1576770539464},{"_id":"public/2019/06/04/居中/index.html","hash":"48ff6e970bbbc5c1cbcc57f8f07ea5014b2d37c4","modified":1576770539464},{"_id":"public/2019/05/30/数组交集并集/index.html","hash":"6959f79f356eccb444e3847a87b6161ebcb6ecc1","modified":1576770539464},{"_id":"public/2019/05/23/background/index.html","hash":"4418fa0e7c95fa23bd11658146357acee98ac445","modified":1576770539464},{"_id":"public/2019/05/14/pairs/index.html","hash":"29da4e5eb7a8ba398637de838c29e698f1cbd7f5","modified":1576770539464},{"_id":"public/2019/05/13/函数链式调用/index.html","hash":"47d89be0dcc4db682b2c977f7567849e0c7ee43c","modified":1576770539464},{"_id":"public/2019/05/08/Bable的loose模式/index.html","hash":"31d9c78518e8e4ceecd9a5dde3731fb930565ad5","modified":1576770539465},{"_id":"public/2019/05/07/number/index.html","hash":"17c232972c05bda1e55da6fd8ad66e84d0ec7cb7","modified":1576770539465},{"_id":"public/2019/05/07/replace/index.html","hash":"61d09b645dffe34645ce2d4672d6816ed8446388","modified":1576770539465},{"_id":"public/2019/05/06/Math/index.html","hash":"e4f72dd72afad60d0946a42441fd831be0e69922","modified":1576770539465},{"_id":"public/2019/05/06/async函数整理/index.html","hash":"8963e39c4a904b3a76cbe66f64f9a2aa5ddd1d8a","modified":1576770539465},{"_id":"public/2019/05/06/spectacle/index.html","hash":"4f4ffec885945ebdbc60eb7a2f985376214ed243","modified":1576770539465},{"_id":"public/2019/05/05/Object.create()和new Object()/index.html","hash":"a35a9df0744fa3acc1cdef459effe1e956b318df","modified":1576770539465},{"_id":"public/2019/04/29/IsEqual(a,b)/index.html","hash":"ae8724acc88fa567065187730a217316fbd0cc4c","modified":1576770539465},{"_id":"public/2019/04/22/promise.all()代码实现/index.html","hash":"bb5e90203ce51894cc32a9f9d0a8e0da04cf6e5b","modified":1576770539466},{"_id":"public/2019/04/22/for..in和for...of/index.html","hash":"796c909e0a215c91d80ebcd6772f6adc6b61bc88","modified":1576770539466},{"_id":"public/2019/04/20/git在zash中的缩写/index.html","hash":"9d11ba341bfe749b2c955f2062ef32faf4561ef4","modified":1576770539466},{"_id":"public/2019/04/20/推一个空的commit/index.html","hash":"f877bf18f2dc9a457a2180369dfa0e0181ae2224","modified":1576770539466},{"_id":"public/2019/04/18/宏任务和微任务/index.html","hash":"1c604475c8f701567b09d3f23c9a12894e07b9b8","modified":1576770539466},{"_id":"public/2019/04/18/同步fork来的仓库/index.html","hash":"b1125134d7cb808375236d0632d269fba9be958f","modified":1576770539466},{"_id":"public/2019/04/17/传递函数给组件/index.html","hash":"dc1d667a802732014c05b52c6eb2019d397555e4","modified":1576770539467},{"_id":"public/2019/04/17/emoji/index.html","hash":"4f345854ad1e4527a0a9b5e74da8f27518f0f87a","modified":1576770539467},{"_id":"public/2019/04/14/Promise整理/index.html","hash":"9cb70503d712cc00bade73842cec12b77e8f1b3e","modified":1576770539467},{"_id":"public/2019/04/01/安装nvm总结(MAC)/index.html","hash":"33aaa1742de8bc7970dcb00f526f987fdd7eb8f3","modified":1576770539467},{"_id":"public/2019/03/31/JS中的深浅拷贝/index.html","hash":"9f2521cd2dad1c0abb041dccfe01758ebdda99f7","modified":1576770539467},{"_id":"public/2019/02/21/node版本号/index.html","hash":"847a48674e27531f15061ff8ec261ac327ca34af","modified":1576770539467},{"_id":"public/2019/02/19/immutable优化react/index.html","hash":"9ddf0413ad0bcbd67236ebdf8ed6f7b64b93cd58","modified":1576770539468},{"_id":"public/2019/01/22/git常用命令/index.html","hash":"ebfb97f30a6e1141169cb53ad34dbe7603ce4fa5","modified":1576770539468},{"_id":"public/2019/01/22/git merge/index.html","hash":"d76f4e9bc4d1b2f139f40dcd34f7cdde968f86dc","modified":1576770539468},{"_id":"public/2019/01/22/VSCode 快捷键/index.html","hash":"28b33ddcf7bb59d116b8db70297d5725a597a8ee","modified":1576770539468},{"_id":"public/2019/01/22/npm安装包/index.html","hash":"f0ba2c5706d2e3ea87ac4d63865e81bafa5a0ee8","modified":1576770539468},{"_id":"public/2019/01/22/node中require的路径解析/index.html","hash":"e0414a8f4a2f081f232c0c6dfef877a457e317ef","modified":1576770539468},{"_id":"public/2018/12/26/CSS-width/index.html","hash":"8e571105bc5ca2afd3b9e92777f2904d2270d37d","modified":1576770539468},{"_id":"public/2018/12/26/max-height，min-height，height一起使用时，优先级问题/index.html","hash":"a561ae64567a53a876de61c357bb540936f68182","modified":1576770539469},{"_id":"public/2018/12/20/queryString模块/index.html","hash":"442a69e4e8e9099c74eee84a2ce27858a62e937c","modified":1576770539469},{"_id":"public/2018/12/16/从源码看redux中间件/index.html","hash":"7aca80d2e29f19cb86df4114eeee068bbb1d17c1","modified":1576770539469},{"_id":"public/2018/12/16/redux基础/index.html","hash":"ea8f54ea812515d7234042f81107b990151a816f","modified":1576770539469},{"_id":"public/2018/12/16/中间件教程/index.html","hash":"b4865cebfc844189e53290663153855a0c6411e1","modified":1576770539469},{"_id":"public/2018/12/16/dangerouslySetInnerHTML/index.html","hash":"a10ec183dbf493b1632d287c3010cdf77841f27e","modified":1576770539469},{"_id":"public/2018/11/28/GitCommitEmoji/index.html","hash":"abc80e5e61dc5039b76b2921f125bb99217a4f15","modified":1576770539469},{"_id":"public/2018/09/10/类数组对象/index.html","hash":"0188e9866159c0ecd14dcaa7be60f28e80a80fa8","modified":1577757920967},{"_id":"public/2018/09/03/继承之ES5和ES6对比/index.html","hash":"87d5acd17644fbb6f8da3eb1598c8544b4598b37","modified":1576770539470},{"_id":"public/archives/index.html","hash":"0bc333b1bec6c48493bb6a495b751d28e02f9a54","modified":1577757920967},{"_id":"public/archives/page/2/index.html","hash":"d4772d8a8e309bdd9d04aae3db1aa14460c90e15","modified":1577757920967},{"_id":"public/archives/page/3/index.html","hash":"87a0f68bd08a71f39a4d68dc835e6bb823d04cf2","modified":1577757920967},{"_id":"public/archives/page/4/index.html","hash":"b5a27b42e3d2ecb4bd5794c8843284bc84ca23f7","modified":1577757920968},{"_id":"public/archives/page/5/index.html","hash":"5197cfba09a78e9d30fa9b90529292f80e257f14","modified":1577757920968},{"_id":"public/archives/page/6/index.html","hash":"88cc2c7ac090210a37c956a4e144c07c54b3a14f","modified":1577757920968},{"_id":"public/archives/page/7/index.html","hash":"bd010db5c5db30013c0c81de40dcce9a6bf5afda","modified":1577757920968},{"_id":"public/archives/page/8/index.html","hash":"352d144000af419f32566185f1ca0c2bddb5079f","modified":1577757920968},{"_id":"public/archives/2018/index.html","hash":"5da2812607c37bac48f4ed9cda0d7bf7ffc4b1ae","modified":1577757920968},{"_id":"public/archives/2018/09/index.html","hash":"373b13a469f5ec3efd1b533bd78c3c969bdf2421","modified":1577757920968},{"_id":"public/archives/2018/11/index.html","hash":"247390cb5253c79902693319ea1c9ada29f725a8","modified":1576770539471},{"_id":"public/archives/2018/12/index.html","hash":"25fc03ef1a945c04456b673845d2b8c7d40a7947","modified":1576770539471},{"_id":"public/archives/2019/index.html","hash":"35bd29689d66085e62dad339fbbfd617e777d261","modified":1577757920968},{"_id":"public/archives/2019/page/2/index.html","hash":"cc2f1856cfce0b20d01220b4cc482dcb05280a9c","modified":1577757920969},{"_id":"public/archives/2019/page/3/index.html","hash":"d2ad4d05efa968419a2b0d9c694c30ed06396e21","modified":1577757920969},{"_id":"public/archives/2019/page/4/index.html","hash":"cc4c7121447b49059e90e8e1fecc74333ec24fdc","modified":1577757920969},{"_id":"public/archives/2019/page/5/index.html","hash":"38f666e41e36d6131460497764de657308577add","modified":1577757920969},{"_id":"public/archives/2019/page/6/index.html","hash":"4f2f3536a75b09d920385b44d1c9a11dbcd0e0d9","modified":1577757920969},{"_id":"public/archives/2019/page/7/index.html","hash":"91b05b50959a2865142f8bae02235f0b500e20bf","modified":1577757920969},{"_id":"public/archives/2019/01/index.html","hash":"e19a06dd60890b8f9b30b542bc0c283697315f77","modified":1576770539473},{"_id":"public/archives/2019/02/index.html","hash":"0ffe18acc7a23393d879580ea1061dbb72889d87","modified":1576770539473},{"_id":"public/archives/2019/03/index.html","hash":"850341be9fa2bc715ac2f917faf823fc2d9126bb","modified":1576770539473},{"_id":"public/archives/2019/04/index.html","hash":"ab5914711d611175a68a0fc0f87785c14b192dd9","modified":1576770539473},{"_id":"public/archives/2019/04/page/2/index.html","hash":"599f80daea6645c1da4b08444c2baae6d42c1117","modified":1576770539473},{"_id":"public/archives/2019/05/index.html","hash":"3a8e28f7e9bfb210fb8ee97865d572b0bb336520","modified":1576770539473},{"_id":"public/archives/2019/05/page/2/index.html","hash":"b94ef96197455a14b21f5fab01c788e8e89a8ab1","modified":1576770539474},{"_id":"public/archives/2019/06/index.html","hash":"08f338aea783882538387d8d97cbe4c34c39fe5c","modified":1576770539474},{"_id":"public/archives/2019/07/index.html","hash":"0eccdcef294603b89e15c5910e8f1a0aef118f21","modified":1576770539474},{"_id":"public/archives/2019/08/index.html","hash":"782e81c2244a08f443bf484e61bfd9bfa9a18667","modified":1576770539474},{"_id":"public/archives/2019/09/index.html","hash":"c76d68d5b371e05efbff2b2157be125fd1f04db9","modified":1576770539474},{"_id":"public/archives/2019/10/index.html","hash":"13b9e4cd7dfa7cdeda8a0f2d95e4aee47a6a279c","modified":1576770539474},{"_id":"public/archives/2019/12/index.html","hash":"0da0e44b593e06bc8e2c7f759df697102b09e6ff","modified":1577757920969},{"_id":"public/index.html","hash":"8f129c7b618c338b11b9e1bc08fd014e394cff16","modified":1577757920970},{"_id":"public/page/2/index.html","hash":"6f766da2bf481b1aea7facd12a461c66a84a1ed0","modified":1577757920970},{"_id":"public/page/3/index.html","hash":"43d372e8bc1e8318ebb37ecf589e5e4520a4abc7","modified":1577757920971},{"_id":"public/page/4/index.html","hash":"0911c32c6e39b7a64dcfd912c6de16e0af91bde0","modified":1577757920971},{"_id":"public/page/5/index.html","hash":"19a69d5e4c53a83e4cd76cd2f98669c3e7714a3a","modified":1577757920971},{"_id":"public/page/6/index.html","hash":"ad47d1435c14fb3d67bc97d4d0e8a630e965eb50","modified":1577757920971},{"_id":"public/page/7/index.html","hash":"f625784bf26eb8fa105e3ee857458782f31b2bca","modified":1577757920971},{"_id":"public/page/8/index.html","hash":"12e7567f3d7c8c080fe479bf4382b6cb57444d03","modified":1577757920971},{"_id":"public/tags/JS/index.html","hash":"6dc592d5c7e98a50856b2915eec8a7016c5299bd","modified":1577757920971},{"_id":"public/tags/JS/page/2/index.html","hash":"9d027d7a2e608692ee104295916ec284535cc0d6","modified":1577757920972},{"_id":"public/tags/JS/page/3/index.html","hash":"475178d43ebbd238aabb5f1b315a81d2ebc5b03a","modified":1577757920972},{"_id":"public/tags/JS/page/4/index.html","hash":"e2fcc246f578fe7263e344e595ce4d8c44b31833","modified":1577757920972},{"_id":"public/tags/babel/index.html","hash":"8b93e1d5be23fc17c594bfa39ceadc7bcd8e9a86","modified":1577757920972},{"_id":"public/tags/Array/index.html","hash":"b31df159850b3ce76b8106161a76fefb0a99d1e5","modified":1577757920972},{"_id":"public/tags/flat/index.html","hash":"9676feb6fadb58edd7fe53e59386dfe25605dc0b","modified":1577757920972},{"_id":"public/tags/闭包/index.html","hash":"a3b0c80f5c62e7dc22a4fc29cb17859775b45e48","modified":1577757920972},{"_id":"public/tags/内存泄漏/index.html","hash":"6f4fd9d027c34a54c926f5e7046e4b01b86a473b","modified":1577757920972},{"_id":"public/tags/CSS/index.html","hash":"52cc3439f89100d88175c6407451e91ca6672b64","modified":1577757920972},{"_id":"public/tags/width-auto/index.html","hash":"592f8cc3448a6503e55322921783a01d3b3c9cfd","modified":1577757920973},{"_id":"public/tags/width-100/index.html","hash":"8d64cee50bd13f791d90faa061f1c78f11504070","modified":1577757920973},{"_id":"public/tags/深比较/index.html","hash":"08383a2d00eb633662dc654b5c6ad694c8ea2119","modified":1577757920973},{"_id":"public/tags/isEqual/index.html","hash":"5552d9e5272089f997f66a9cbf5a758f9df9ec73","modified":1577757920973},{"_id":"public/tags/Git/index.html","hash":"4d98d7bcb8e54317b62cfb3bf384555d041e661a","modified":1577757920973},{"_id":"public/tags/深拷贝/index.html","hash":"fa34454b743c2f744bd2c9fd0341f19b82b3f4dd","modified":1577757920973},{"_id":"public/tags/变量互换/index.html","hash":"322c92943323c4a0c30c223f106afac2304505b6","modified":1577757920973},{"_id":"public/tags/Math/index.html","hash":"9b066372f9f74d51c5e39d7165a978555cff3c60","modified":1577757920973},{"_id":"public/tags/Web/index.html","hash":"74c267c74dcac99f2292e3daac97c973e4a04e71","modified":1577757920973},{"_id":"public/tags/页面渲染/index.html","hash":"f1b44d8d16e16f26d9b5020fbec184e290b25c0f","modified":1577757920974},{"_id":"public/tags/DOMContentLoaded/index.html","hash":"832c2e1573300827694c922de99f2c139642ee17","modified":1577757920974},{"_id":"public/tags/load/index.html","hash":"d89b885102fd2548a164d88f99b9f0877f75bce1","modified":1577757920974},{"_id":"public/tags/Object-create/index.html","hash":"00d29ab414476d7b34a6482418cbc7dfb025c52c","modified":1577757920974},{"_id":"public/tags/new-Object/index.html","hash":"afbd0a87317347cb0cbb9ab97ac4463a6a1d987f","modified":1577757920974},{"_id":"public/tags/Promise/index.html","hash":"4f2be621ffdf94018ddfa4fe31a65d8d45e43d83","modified":1577757920974},{"_id":"public/tags/开发工具/index.html","hash":"077a00535a251eea88945e8da0e7829f7dfae1db","modified":1577757920974},{"_id":"public/tags/PicGo/index.html","hash":"5535107a82e8ec154c3ea26838d63b58afcd7c91","modified":1577757920974},{"_id":"public/tags/Markdown/index.html","hash":"e01a3a0f365ffcce53f4deead8b19cc96ac86b93","modified":1577757920974},{"_id":"public/tags/H5/index.html","hash":"03be82a335aa46070a6ff92eacf092a260eded18","modified":1577757920974},{"_id":"public/tags/webSocket/index.html","hash":"8b00f25193b2d27fd4ca93f4ba85028a39e93e64","modified":1577757920975},{"_id":"public/tags/web-Worker/index.html","hash":"3d7416541f3934dd62e62a1cfe48f9b0d57fb597","modified":1577757920975},{"_id":"public/tags/flex/index.html","hash":"f29e1569416669878b36847c6423563ddc2a05dd","modified":1577757920975},{"_id":"public/tags/align-items/index.html","hash":"16f1ce3d8407c2997fce0285b82197d176295daf","modified":1577757920975},{"_id":"public/tags/align-content/index.html","hash":"115877d279908b963ee60f3d9fa6a82b698f3068","modified":1577757920975},{"_id":"public/tags/Async/index.html","hash":"618142a4914b2ce25592bd33ad3361ff1866dfc9","modified":1577757920975},{"_id":"public/tags/React/index.html","hash":"315924da674aec1dad4ab88e607c73fc7200be83","modified":1577757920975},{"_id":"public/tags/Redux/index.html","hash":"f44333259be8157da227b34c60c9e5fde5e71420","modified":1577757920975},{"_id":"public/tags/object-Object/index.html","hash":"4b269e3551ae24aa9b23615ca95423438c1e119b","modified":1577757920976},{"_id":"public/tags/http-缓存/index.html","hash":"edb04cc1b76e5799e4d35677f0c34aa505f2a8b5","modified":1577757920976},{"_id":"public/tags/immutable/index.html","hash":"e60bc123a19b40a2125a905e348d022b6f9d5b0d","modified":1577757920976},{"_id":"public/tags/for-in/index.html","hash":"2bf4190e5fc2eea88e362c59c42f6f69b3730df7","modified":1577757920976},{"_id":"public/tags/for-of/index.html","hash":"af9a4caeb7cd51849b07dc0a5bba9b27cff0f669","modified":1577757920976},{"_id":"public/tags/Iterable/index.html","hash":"c8b3c2314dd2609e0d9ef10d6bd0c65847dcec04","modified":1577757920976},{"_id":"public/tags/max-hight/index.html","hash":"0669cf6fb48513ee4b90a371ef0184b559ffa9b0","modified":1577757920976},{"_id":"public/tags/min-hight/index.html","hash":"ba6c8ea695a2512bcb037c9590964a33af705ead","modified":1577757920976},{"_id":"public/tags/location/index.html","hash":"6ba060677ffb6a7dfe1f0b822a6f0099b660ccc1","modified":1577757920976},{"_id":"public/tags/Node/index.html","hash":"ba29bb35d078dc8d9ee2975f693d799c8f429c5a","modified":1577757920976},{"_id":"public/tags/npm-link/index.html","hash":"1965048ca6a38f0bb9dd0c710d1d8affe5b27a02","modified":1577757920977},{"_id":"public/tags/create-react-app/index.html","hash":"56f87369ac0bfe46bbbaeab91a196042f78b7191","modified":1577757920977},{"_id":"public/tags/number/index.html","hash":"90fc5684b67b82d11803a1239b52f275b598a25a","modified":1577757920977},{"_id":"public/tags/parseInt/index.html","hash":"bb34c2531515467c3f64a700b59b4ffcf2b51e10","modified":1577757920977},{"_id":"public/tags/Promis-all/index.html","hash":"382d52511056bbb7981aa0c265d3177fea87d5c9","modified":1577757920977},{"_id":"public/tags/rooter/index.html","hash":"5c21a74d42dd043d16e37a9559ca572e3bb58262","modified":1577757920977},{"_id":"public/tags/路由/index.html","hash":"c8e1a6892f83bf6143556cd82ca4f9947a3f6939","modified":1577757920977},{"_id":"public/tags/replace/index.html","hash":"a2a45a0c1dcb6fdd6ae3b41c3227a0dccdbd5032","modified":1577757920977},{"_id":"public/tags/String/index.html","hash":"d414e2ebf93448028b58dd77add3b8b5ce3cf2dd","modified":1577757920977},{"_id":"public/tags/DNS/index.html","hash":"b4f08a0308ba08ecb7e3976e0759e74b22b05962","modified":1577757920978},{"_id":"public/tags/三次握手/index.html","hash":"37c7675efa9ee12752662081843b74a91dfbcacf","modified":1577757920978},{"_id":"public/tags/四次挥手/index.html","hash":"8036f2d7a35075ff64e95a90af76505a895c76af","modified":1577757920978},{"_id":"public/tags/前序遍历/index.html","hash":"65432a7b21e3c4c64be5c8fadfb89250b00cf4b0","modified":1577757920978},{"_id":"public/tags/中序遍历/index.html","hash":"bda473ac0246a8645a7c18c4586aa6e6d7129ce6","modified":1577757920978},{"_id":"public/tags/后序遍历/index.html","hash":"c04092b1af28c5a95204a9c32279310e3b0bd575","modified":1577757920978},{"_id":"public/tags/层次遍历/index.html","hash":"c537f07b23db8b150dfb33ab9f8c5c0606e527c7","modified":1577757920978},{"_id":"public/tags/链式调用/index.html","hash":"f55a6d80bca74cefed3ad7f1a412648928428884","modified":1577757920978},{"_id":"public/tags/margin合并/index.html","hash":"e6f4bd97feaba255748271b8f05189bf1bdd865e","modified":1577757920978},{"_id":"public/tags/BFC/index.html","hash":"ed247a35218a0a4ac8989d0b112d04474cfeb813","modified":1577757920979},{"_id":"public/tags/ASCALL/index.html","hash":"139c5c2779f67825a8a04c4b9472948ad4c8c8c7","modified":1577757920979},{"_id":"public/tags/宏任务/index.html","hash":"da285107ccc62215c0f964f5372b733c40bcb62c","modified":1577757920985},{"_id":"public/tags/微任务/index.html","hash":"05044c5eb2faa7e4e14ed4fb229d603b3c986ad1","modified":1577757920985},{"_id":"public/tags/工具/index.html","hash":"c9f9b815d13703a49dfc1dad77af47efa4b5ef12","modified":1577757920985},{"_id":"public/tags/水平居中/index.html","hash":"6efbdfed06934e858628a50a7e9d768c1569318d","modified":1577757920986},{"_id":"public/tags/垂直居中/index.html","hash":"a2f15ac8b872121f7cdad9dd4f74a5a5c6920b16","modified":1577757920986},{"_id":"public/tags/水平垂直居中/index.html","hash":"a556586449198a0e26cedeccea054142b97688df","modified":1577757920986},{"_id":"public/tags/数组/index.html","hash":"89adad3f45a7245aaa595c774241a6b614a2311d","modified":1577757920986},{"_id":"public/tags/交集/index.html","hash":"becbb5cf4e341606077f9b58d3c1d62fb3852735","modified":1577757920986},{"_id":"public/tags/并集/index.html","hash":"f3976614e978b0f789ab051f9d4a9e1b2a566550","modified":1577757920986},{"_id":"public/tags/柯理化/index.html","hash":"f4a134543410bbe7034cb65f784a85a456df3f13","modified":1577757920986},{"_id":"public/tags/进程/index.html","hash":"3f54871d4f9713ea983e95d8de1b53f54bada820","modified":1577757920986},{"_id":"public/tags/线程/index.html","hash":"132bc9ec2b618a064d66ca46c63310b9cf8131f5","modified":1577757920986},{"_id":"public/tags/继承/index.html","hash":"8f85eeccdc0b0e3ce5875442cf5263fc1f83bf42","modified":1577757920987},{"_id":"public/tags/浏览器内核/index.html","hash":"d7955bc14a2ea6145038194594bdfba557c6d6c6","modified":1577757920987},{"_id":"public/tags/类数组对象/index.html","hash":"2408c22df2c3936ff562d49142c38b792c80682b","modified":1577757920987},{"_id":"public/tags/重新思考setTimeout/index.html","hash":"c97aefaecaf6fab5a22993466416f133ad9a6fed","modified":1577757920987},{"_id":"public/tags/事件循环/index.html","hash":"d0c93bd000f28457a9733a0f7d2c6efe83c4843d","modified":1577757920987},{"_id":"public/tags/防抖/index.html","hash":"e697dfc2c09fcaec9d8dddf7a73234a62bcc9b6e","modified":1577757920987},{"_id":"public/tags/节流/index.html","hash":"a2588aaac7d588920facae03abb06f3f8c06d5e0","modified":1577757920987},{"_id":"public/tags/mouseenter/index.html","hash":"376ad2bad28cecbf7fb0a97fac19b894c8cd19ca","modified":1576770539487},{"_id":"public/tags/setTimeout/index.html","hash":"5fd1e6f04f127f156e0014de10fff321a63b84d5","modified":1577757920987},{"_id":"public/tags/setInterval/index.html","hash":"511729e45f721b8ff21e5b56429fff53d8e50730","modified":1577757920987},{"_id":"public/tags/时间循环/index.html","hash":"2215d1de67cc2c8ed86f191d749d6de3c456d9e0","modified":1577757920988},{"_id":"public/tags/滚动加载/index.html","hash":"2a79725f3ef55128e6c028dc637d1fb9aff1d0a8","modified":1577757920988},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1577757920994},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1577757920994},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1577757920995},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1577757920995},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1577757920995},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1577757920995},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1577757920995},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1577757920995},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1577757920995},{"_id":"public/img/IMG_4601.JPG","hash":"7431474227c20d91590c20eb75d511ce089945ad","modified":1577757921004},{"_id":"public/main.0cf68a.css","hash":"ff26c88a5c63922e8d83d22297404f60ccbe8a61","modified":1577757921004},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1577757921004},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1577757921004},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1577757921004},{"_id":"public/img/IMG_4175.JPG","hash":"a1315d66ec17a939c40ff509a30b898725c73ba1","modified":1577757921043},{"_id":"themes/yilia/source/._.DS_Store","hash":"c1f453f8a35c6a455bc2c9d53ef88020fc2d5e82","modified":1576772274000},{"_id":"themes/yilia/source/img/._IMG_4175.JPG","hash":"c5c65f1dde4d360d400271280aba494bb08727d4","modified":1576772276000},{"_id":"themes/yilia/source/img/._IMG_4601.JPG","hash":"14fc3149ea76a283f592029217db71b043554ec0","modified":1576772274000},{"_id":"public/2019/12/19/重新思考setTimeout--2/index.html","hash":"5fa005e7789f951774ce2caa01570a96c1ee4637","modified":1577757920959},{"_id":"public/2019/12/19/防抖和节流/index.html","hash":"354fa795a96a0b850655bcc8dc2951ed887d1f88","modified":1577757920959},{"_id":"public/2019/12/19/重新思考setTimeout--1/index.html","hash":"4afa0c7446400d79f8fc0f3b58eb8a7e8ba5c0c1","modified":1577757920959},{"_id":"public/2019/12/19/继承之ES5和ES6对比/index.html","hash":"dc56298ebb225498d08bf69a739e851b8b36443f","modified":1577757920959},{"_id":"public/2019/12/19/节流-滚动加载/index.html","hash":"61944bcaeb3b3687a0018ad2ac102766a43aa0e6","modified":1577757920959},{"_id":"public/2019/12/19/线程和进程/index.html","hash":"a79e42729bb193b49136842c1622d322de669aa3","modified":1577757920959},{"_id":"public/2019/12/19/柯理化/index.html","hash":"c50fb575c55d76b84d51c595b50a1961b4500b00","modified":1577757920959},{"_id":"public/2019/12/19/浏览器内核/index.html","hash":"bfc53c9cab10759ed8b075be0a5bfa4c16a457bd","modified":1577757920959},{"_id":"public/2019/12/19/推一个空的commit/index.html","hash":"ee1cdde09364da5dc53e5fc13d765e2424dbbf90","modified":1577757920959},{"_id":"public/2019/12/19/数组交集并集/index.html","hash":"d72813461c08d9c4334207b171452b52e650498a","modified":1577757920960},{"_id":"public/2019/12/19/宏任务和微任务/index.html","hash":"853f9f9eaeea54dcedbad4f5b57e2d8a9925716d","modified":1577757920960},{"_id":"public/2019/12/19/居中/index.html","hash":"e814d36b17404f6fe1430674ac70f49fad222866","modified":1577757920960},{"_id":"public/2019/12/19/开发中遇到的问题/index.html","hash":"73a6732c1552ebebe247d56290f75367ca564f32","modified":1577757920960},{"_id":"public/2019/12/19/函数链式调用/index.html","hash":"7477df17c6d7e51416cb4881f49f30d9db3b77cb","modified":1577757920960},{"_id":"public/2019/12/19/安装nvm总结(MAC)/index.html","hash":"1d10b142d019030a586c85e674f8982e9b731a75","modified":1577757920960},{"_id":"public/2019/12/19/同步fork来的仓库/index.html","hash":"8bd272a39926b40a707604531e835c47b044fa7b","modified":1577757920961},{"_id":"public/2019/12/19/传递函数给组件/index.html","hash":"bef18e19be979d7d1da0a4ca8e69e0b642054204","modified":1577757920961},{"_id":"public/2019/12/19/从源码看redux中间件/index.html","hash":"e2dba2f0bd548d79771a525471eb991491720f25","modified":1577757920961},{"_id":"public/2019/12/19/二叉树遍历/index.html","hash":"722bed230113af35b7ce2af58fefc862001bc02e","modified":1577757920961},{"_id":"public/2019/12/19/spectacle/index.html","hash":"54bf083a3286d8ee07c94aa313fa5841caff8975","modified":1577757920961},{"_id":"public/2019/12/19/url从输入到页面显示/index.html","hash":"92792523f816cfeb9dcf2d1c60ffda16b500e864","modified":1577757920961},{"_id":"public/2019/12/19/中间件教程/index.html","hash":"9600eb945478d19c72eedff0dec0bd179deac9e1","modified":1577757920961},{"_id":"public/2019/12/19/redux基础/index.html","hash":"decfa68e4486a1fb2ec9cf8b3af3deee7577eda3","modified":1577757920962},{"_id":"public/2019/12/19/replace/index.html","hash":"d4da4b2847b577375d1075d22def0591cd25a96d","modified":1577757920962},{"_id":"public/2019/12/19/queryString模块/index.html","hash":"53a03d0b97e92eccaa2b6b91e050feed9e4ce7b7","modified":1577757920962},{"_id":"public/2019/12/19/react事件/index.html","hash":"aa524c2c9d834108922d17ecc66b5f04f16b3dbe","modified":1577757920962},{"_id":"public/2019/12/19/react-rooter/index.html","hash":"7b55b132ee511ad563abf716916d692751327fb5","modified":1577757920962},{"_id":"public/2019/12/19/parseInt函数/index.html","hash":"0d3ac763966c27eb9b6ddfa6b241b36dc4a7b29d","modified":1577757920962},{"_id":"public/2019/12/19/promise.all()代码实现/index.html","hash":"674b7bf666122a12aa4b9c12aea607d24ec9030e","modified":1577757920962},{"_id":"public/2019/12/19/query-string源码仿写/index.html","hash":"bab93bcdb48aecb9fc6fbc64c60f04bdac25e8d7","modified":1577757920962},{"_id":"public/2019/12/19/page-rendering/index.html","hash":"7b5b719f680172af72ef3dedcce5fd66a8de0adc","modified":1577757920963},{"_id":"public/2019/12/19/pairs/index.html","hash":"9ed64c94dd2c69f1ff389915dbff9d3c9087bafb","modified":1577757920963},{"_id":"public/2019/12/19/npm包和npm link/index.html","hash":"2a3b131f29ea15a64536f279c891a9d416920e0e","modified":1577757920963},{"_id":"public/2019/12/19/npm安装包/index.html","hash":"fe41f64722ebe6ecf383888b0ac70a580e8111c1","modified":1577757920963},{"_id":"public/2019/12/19/number/index.html","hash":"1889724192d9fa1b8f9a825c5e822ae310ca1236","modified":1577757920963},{"_id":"public/2019/12/19/node中require的路径解析/index.html","hash":"a9453810dc41835798094c41d3337cf5ac38495d","modified":1577757920963},{"_id":"public/2019/12/19/node版本号/index.html","hash":"9eae71d624da36b8f4592c48ec160969fba7aba0","modified":1577757920963},{"_id":"public/2019/12/19/max-height，min-height，height一起使用时，优先级问题/index.html","hash":"257a5780f7f7f415132fb3b1e2d1b0071899eec9","modified":1577757920963},{"_id":"public/2019/12/19/location/index.html","hash":"5acb023741f55fc571b7eeb14fec3af79c44a0a5","modified":1577757920964},{"_id":"public/2019/12/19/immutable优化react/index.html","hash":"79c7691118a9a8421439054aa3739e3a16bdbb0e","modified":1577757920964},{"_id":"public/2019/12/19/git在zash中的缩写/index.html","hash":"d2110f4d695268335fb15f651054cac257fca97d","modified":1577757920964},{"_id":"public/2019/12/19/git常用命令/index.html","hash":"fbd0d29eff8ea14d7b48bad53974ae9b7d97988d","modified":1577757920964},{"_id":"public/2019/12/19/http缓存/index.html","hash":"67aa8c0cc7ed473529cfe6ddb3335c68bd2cd0f4","modified":1577757920964},{"_id":"public/2019/12/19/git merge/index.html","hash":"4123d49cb7d65743231b35c102edc92ef66bb4ad","modified":1577757920964},{"_id":"public/2019/12/19/for..in和for...of/index.html","hash":"61f5eed63697522d8080e624ccc59055250ab52b","modified":1577757920965},{"_id":"public/2019/12/19/emoji/index.html","hash":"6d99904bf8f39506f470c92ec32ef929e6d1b44e","modified":1577757920965},{"_id":"public/2019/12/19/background/index.html","hash":"3d3631dffcff2578fb7bf1e9cc8e20f978b07937","modified":1577757920965},{"_id":"public/2019/12/19/combineReducer/index.html","hash":"7902da3cc1c8c898da926b80a1795da24d190115","modified":1577757920965},{"_id":"public/2019/12/19/dangerouslySetInnerHTML/index.html","hash":"7c4090d61996ddbc5f1f3fb1dcc52e72457b0818","modified":1577757920965},{"_id":"public/2019/12/19/async函数整理/index.html","hash":"ed2c518559d959c3159d1bd102503103994815dc","modified":1577757920965},{"_id":"public/2019/12/19/WebSocket和WebWorker/index.html","hash":"f12007d9f331ed95a0d6a0970969413e6e4c0e16","modified":1577757920965},{"_id":"public/2019/12/19/VSCode 快捷键/index.html","hash":"69c7f6ff7e4e03daf13e752d6fcdf405e4a12246","modified":1577757920965},{"_id":"public/2019/12/19/align-items和align-content区别/index.html","hash":"61891f0dee8abd22a2b216308e7692cb406bd3b5","modified":1577757920965},{"_id":"public/2019/12/19/Promise整理/index.html","hash":"66bd806f58e28906ef68e5fb63c759fd24bfdbc8","modified":1577757920966},{"_id":"public/2019/12/19/Math/index.html","hash":"5dee108d80e7bd5cbcc6e1034898c366578e770a","modified":1577757920966},{"_id":"public/2019/12/19/Object.create()和new Object()/index.html","hash":"088e0eee55e97099e0df03a2c7bb61060937888e","modified":1577757920966},{"_id":"public/2019/12/19/Picgo/index.html","hash":"aea5e325f37bc808bf7be3257d1f2d55755d3cb6","modified":1577757920966},{"_id":"public/2019/12/19/JS中的深浅拷贝/index.html","hash":"8798e13535a783b84cd9b9336734baa8a44af684","modified":1577757920966},{"_id":"public/2019/12/19/JS互换两个变量/index.html","hash":"77eb65ff00b925561da159f9b1e860e390cc87bd","modified":1577757920966},{"_id":"public/2019/12/19/IsEqual(a,b)/index.html","hash":"21f1505d78e8509f9347a2d04df08fae0d389662","modified":1577757920966},{"_id":"public/2019/12/19/GitCommitEmoji/index.html","hash":"8da5314980d25570a97a2e6fdcff5649461204e3","modified":1577757920966},{"_id":"public/2019/12/19/DOMContentLoaded/index.html","hash":"53b822e5f2475b658bfbfc2707fd490394778673","modified":1577757920967},{"_id":"public/2019/12/19/Closures/index.html","hash":"e45a69f1dbd19fcd185cb52cf2f468d06c617bf8","modified":1577757920967},{"_id":"public/2019/12/19/Bable的loose模式/index.html","hash":"9288c2ad38e1dded933878e07b7417eaf32ac88a","modified":1577757920967},{"_id":"public/2019/12/19/Array-flat/index.html","hash":"40b2a4c4fdf036e4aeddaa46eb668fcebfa4b530","modified":1577757920967},{"_id":"public/2019/12/19/CSS-width/index.html","hash":"896f5c7f46373a5a7344d32873913028711fbb02","modified":1577757920967},{"_id":"public/archives/2019/page/8/index.html","hash":"3541624d5cafb6ce51dc3f38aec0d8bb927730bb","modified":1577757920969},{"_id":"public/archives/2019/12/page/2/index.html","hash":"18aa80008d69d344bcbe7a5cc01c47cd807893f5","modified":1577757920969},{"_id":"public/archives/2019/12/page/3/index.html","hash":"01000d48b74155372ee62384e46e689a1e6fe22f","modified":1577757920970},{"_id":"public/archives/2019/12/page/4/index.html","hash":"11ba4ce27be66697b0e098a92960e383bb8cb2fb","modified":1577757920970},{"_id":"public/archives/2019/12/page/5/index.html","hash":"aa1c9b099e6504900c987d7c391c78456c4c9d3e","modified":1577757920970},{"_id":"public/archives/2019/12/page/6/index.html","hash":"8eda1bf4c2cd4a17b2e62ba1373d6b0b313942c0","modified":1577757920970},{"_id":"public/archives/2019/12/page/7/index.html","hash":"9a92982cb162feeb058290ad90b058a5e106570e","modified":1577757920970},{"_id":"public/archives/2019/12/page/8/index.html","hash":"9ce33797bf1bc29deed59e6b1a5c4bd888a82a81","modified":1577757920970}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2019-04-19T14:28:25.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-19 22:28:25\n---\n","updated":"2019-12-19T15:52:56.162Z","path":"about/index.html","_id":"ck4cwgnha0000ckuku2xtqgip","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Babel的loose模式的坑","_content":"## 项目中Babel的loose的坑\n对Set的解构：\n```\nconst set = new Set([1,2,3,4]);\n[...set]\n```\n我想得到[1,2,3,4]\n但是如果项目的Babel配置中使用Loose模式(勾选左侧的ES-2015-loose)，在Babel中的解析：\n```\n\"use strict\";\n\nvar set = new Set([1, 2, 3, 4]);\n[].concat(set);\n```\n这种解析方式就很难受了，它不是通过Array.from()来解析的。这样的情况还存在Map中，这种方式对数组类型显然没有影响。\n\n**在Babel的normal模式下的解析：**\n<!--more-->\n```\n\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar set = new Set([1, 2, 3, 4]);\n\n_toConsumableArray(set);\n```\n- 先判断是不是数组，是的话返回数组\n- 再判断是不是可迭代的对象Symbol.iterator in Object(iter)，如果没成功，判断是不是类数组对象\n- 使用Array.from(),将set转成数组\n\n**参考链接:**\n\nhttps://w3ctech.com/topic/1708\nhttps://github.com/babel/babel/issues/8298","source":"_posts/Bable的loose模式.md","raw":"---\ntitle: Babel的loose模式的坑\ntags: \n- JS\n- babel\n---\n## 项目中Babel的loose的坑\n对Set的解构：\n```\nconst set = new Set([1,2,3,4]);\n[...set]\n```\n我想得到[1,2,3,4]\n但是如果项目的Babel配置中使用Loose模式(勾选左侧的ES-2015-loose)，在Babel中的解析：\n```\n\"use strict\";\n\nvar set = new Set([1, 2, 3, 4]);\n[].concat(set);\n```\n这种解析方式就很难受了，它不是通过Array.from()来解析的。这样的情况还存在Map中，这种方式对数组类型显然没有影响。\n\n**在Babel的normal模式下的解析：**\n<!--more-->\n```\n\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar set = new Set([1, 2, 3, 4]);\n\n_toConsumableArray(set);\n```\n- 先判断是不是数组，是的话返回数组\n- 再判断是不是可迭代的对象Symbol.iterator in Object(iter)，如果没成功，判断是不是类数组对象\n- 使用Array.from(),将set转成数组\n\n**参考链接:**\n\nhttps://w3ctech.com/topic/1708\nhttps://github.com/babel/babel/issues/8298","slug":"Bable的loose模式","published":1,"date":"2019-12-19T15:52:56.131Z","updated":"2019-12-19T15:52:56.131Z","_id":"ck4cwgnhb0001ckuk0q4xpdka","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"项目中Babel的loose的坑\"><a href=\"#项目中Babel的loose的坑\" class=\"headerlink\" title=\"项目中Babel的loose的坑\"></a>项目中Babel的loose的坑</h2><p>对Set的解构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const set = new Set([1,2,3,4]);</span><br><span class=\"line\">[...set]</span><br></pre></td></tr></table></figure></p>\n<p>我想得到[1,2,3,4]<br>但是如果项目的Babel配置中使用Loose模式(勾选左侧的ES-2015-loose)，在Babel中的解析：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var set = new Set([1, 2, 3, 4]);</span><br><span class=\"line\">[].concat(set);</span><br></pre></td></tr></table></figure></p>\n<p>这种解析方式就很难受了，它不是通过Array.from()来解析的。这样的情况还存在Map中，这种方式对数组类型显然没有影响。</p>\n<p><strong>在Babel的normal模式下的解析：</strong><br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function _toConsumableArray(arr) &#123; return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function _nonIterableSpread() &#123; throw new TypeError(&quot;Invalid attempt to spread non-iterable instance&quot;); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function _iterableToArray(iter) &#123; if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === &quot;[object Arguments]&quot;) return Array.from(iter); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function _arrayWithoutHoles(arr) &#123; if (Array.isArray(arr)) &#123; for (var i = 0, arr2 = new Array(arr.length); i &lt; arr.length; i++) &#123; arr2[i] = arr[i]; &#125; return arr2; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var set = new Set([1, 2, 3, 4]);</span><br><span class=\"line\"></span><br><span class=\"line\">_toConsumableArray(set);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>先判断是不是数组，是的话返回数组</li>\n<li>再判断是不是可迭代的对象Symbol.iterator in Object(iter)，如果没成功，判断是不是类数组对象</li>\n<li>使用Array.from(),将set转成数组</li>\n</ul>\n<p><strong>参考链接:</strong></p>\n<p><a href=\"https://w3ctech.com/topic/1708\" target=\"_blank\" rel=\"noopener\">https://w3ctech.com/topic/1708</a><br><a href=\"https://github.com/babel/babel/issues/8298\" target=\"_blank\" rel=\"noopener\">https://github.com/babel/babel/issues/8298</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"项目中Babel的loose的坑\"><a href=\"#项目中Babel的loose的坑\" class=\"headerlink\" title=\"项目中Babel的loose的坑\"></a>项目中Babel的loose的坑</h2><p>对Set的解构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const set = new Set([1,2,3,4]);</span><br><span class=\"line\">[...set]</span><br></pre></td></tr></table></figure></p>\n<p>我想得到[1,2,3,4]<br>但是如果项目的Babel配置中使用Loose模式(勾选左侧的ES-2015-loose)，在Babel中的解析：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">var set = new Set([1, 2, 3, 4]);</span><br><span class=\"line\">[].concat(set);</span><br></pre></td></tr></table></figure></p>\n<p>这种解析方式就很难受了，它不是通过Array.from()来解析的。这样的情况还存在Map中，这种方式对数组类型显然没有影响。</p>\n<p><strong>在Babel的normal模式下的解析：</strong><br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function _toConsumableArray(arr) &#123; return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function _nonIterableSpread() &#123; throw new TypeError(&quot;Invalid attempt to spread non-iterable instance&quot;); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function _iterableToArray(iter) &#123; if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === &quot;[object Arguments]&quot;) return Array.from(iter); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function _arrayWithoutHoles(arr) &#123; if (Array.isArray(arr)) &#123; for (var i = 0, arr2 = new Array(arr.length); i &lt; arr.length; i++) &#123; arr2[i] = arr[i]; &#125; return arr2; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var set = new Set([1, 2, 3, 4]);</span><br><span class=\"line\"></span><br><span class=\"line\">_toConsumableArray(set);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>先判断是不是数组，是的话返回数组</li>\n<li>再判断是不是可迭代的对象Symbol.iterator in Object(iter)，如果没成功，判断是不是类数组对象</li>\n<li>使用Array.from(),将set转成数组</li>\n</ul>\n<p><strong>参考链接:</strong></p>\n<p><a href=\"https://w3ctech.com/topic/1708\" target=\"_blank\" rel=\"noopener\">https://w3ctech.com/topic/1708</a><br><a href=\"https://github.com/babel/babel/issues/8298\" target=\"_blank\" rel=\"noopener\">https://github.com/babel/babel/issues/8298</a></p>"},{"title":"Array.prototype.flat()","toc":true,"_content":"## flat函数\nflat这个函数的方法很少的使用，它的意思就是将数组的元素‘打平’。说的感觉挺悬乎的，其实这是一个很简单的函数。那么下面我想通过这几方面来研究它：1、如何使用flat? 2、它是不是有副作用？会影响原数组？3、原生的flat方法是怎么实现的？\n## flat函数的用法\nflat的语法：`var newArray = arr.flat(depth)`，其中的depth的值是个number类型。\n> deepth指的提取嵌套数组的结构深度，默认值为 1\n\n## 实测flat\n\n![20190729203145.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190729203145.png)\n\n测试的结果如上图所示。\n- 第一个方框说明当depth的值大于数组元素的嵌套深度的时候会将所有的数组元素打平输出。\n- 第二个红框则说明了，使用flat方法不会影响原数组\n\n那数组的那些方法会影响原数组呢？列举几个常见的：\n```\nsort()、reverse()、splice()、push()、pop()、shift()、unshift()\n```\n那数组的那些方法不会影响原数组呢？列举几个常见的：\n```\nmap()、forEach()、reduce()、filter()、join()、concat()、slice()\n```\n<!--more-->\n## 原生方法实现：\n```js\nArray.prototype._flat = function(depth = 1){\n\tvar result = [];\n\tvar length = this.length;\n\tif(depth === 0) return this;\n\tfor(var i = 0; i < length; i++){\n\t\tif(this[i] instanceof Array){\n\t\t\tresult = [...result, ...this[i]._flat(depth - 1)];\n\t\t}else {\n\t\t\tresult.push(this[i]);\n\t\t}\n\t}\n\treturn result\n}\n```\n实现思路：递归嵌套数组\n\n对数组的元素进行判断，如果是数组就递归，不是数组就推进result中。递归当depth为0的时候截止。最后返回result\n## MDN的‘打平’思路：\n### 使用递归：\n```js\nvar arr1 = [1,2,3,[1,2,3,4, [2,3,4]]];\n\nfunction flattenDeep(arr1) {\n   return arr1.reduce((acc, val) => Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);\n}\nflattenDeep(arr1);\n```\n利用reduce的递归方法，来将所有的元素遍历，如果是数组就递归，不是数组放进迭代acc里\n\n- 思考\n\n`把acc换成push如何？`push返回的是数组的length。那样的话 acc = length。会怎么样？\n\n### 不用递归：\n```js\nfunction flatten(input) {\n    var stack = [...input];\n    var result = [];\n    while(stack.length){\n        var value = stack.pop();\n        if(!Array.isArray(value)){\n            result.unshift(value);\n        }else{\n            stack = [...stack,...value];\n        }\n    }\n    return result\n}\n```\n数组从后向前解析，遇到不是数组的就直接头插result中，如果是数组，将数组结构和剩余的源数组链接，重复操作。\n\n### 更简单的做法：\n\n前提：处理的数组，不管有多少层，只有数字类型\n```js\nvar arr1 = [1,2,3,[1,2,3,4,[2,3,4]]];\narr1.join().split(',').map(value => +value);\n\n// arr1.join() 的结果\"1,2,3,1,2,3,4,2,3,4\"\n```\n\n\n\n\n","source":"_posts/Array-flat.md","raw":"---\ntitle: Array.prototype.flat()\ntoc: true\ntags: \n- JS\n- Array\n- flat\n---\n## flat函数\nflat这个函数的方法很少的使用，它的意思就是将数组的元素‘打平’。说的感觉挺悬乎的，其实这是一个很简单的函数。那么下面我想通过这几方面来研究它：1、如何使用flat? 2、它是不是有副作用？会影响原数组？3、原生的flat方法是怎么实现的？\n## flat函数的用法\nflat的语法：`var newArray = arr.flat(depth)`，其中的depth的值是个number类型。\n> deepth指的提取嵌套数组的结构深度，默认值为 1\n\n## 实测flat\n\n![20190729203145.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190729203145.png)\n\n测试的结果如上图所示。\n- 第一个方框说明当depth的值大于数组元素的嵌套深度的时候会将所有的数组元素打平输出。\n- 第二个红框则说明了，使用flat方法不会影响原数组\n\n那数组的那些方法会影响原数组呢？列举几个常见的：\n```\nsort()、reverse()、splice()、push()、pop()、shift()、unshift()\n```\n那数组的那些方法不会影响原数组呢？列举几个常见的：\n```\nmap()、forEach()、reduce()、filter()、join()、concat()、slice()\n```\n<!--more-->\n## 原生方法实现：\n```js\nArray.prototype._flat = function(depth = 1){\n\tvar result = [];\n\tvar length = this.length;\n\tif(depth === 0) return this;\n\tfor(var i = 0; i < length; i++){\n\t\tif(this[i] instanceof Array){\n\t\t\tresult = [...result, ...this[i]._flat(depth - 1)];\n\t\t}else {\n\t\t\tresult.push(this[i]);\n\t\t}\n\t}\n\treturn result\n}\n```\n实现思路：递归嵌套数组\n\n对数组的元素进行判断，如果是数组就递归，不是数组就推进result中。递归当depth为0的时候截止。最后返回result\n## MDN的‘打平’思路：\n### 使用递归：\n```js\nvar arr1 = [1,2,3,[1,2,3,4, [2,3,4]]];\n\nfunction flattenDeep(arr1) {\n   return arr1.reduce((acc, val) => Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);\n}\nflattenDeep(arr1);\n```\n利用reduce的递归方法，来将所有的元素遍历，如果是数组就递归，不是数组放进迭代acc里\n\n- 思考\n\n`把acc换成push如何？`push返回的是数组的length。那样的话 acc = length。会怎么样？\n\n### 不用递归：\n```js\nfunction flatten(input) {\n    var stack = [...input];\n    var result = [];\n    while(stack.length){\n        var value = stack.pop();\n        if(!Array.isArray(value)){\n            result.unshift(value);\n        }else{\n            stack = [...stack,...value];\n        }\n    }\n    return result\n}\n```\n数组从后向前解析，遇到不是数组的就直接头插result中，如果是数组，将数组结构和剩余的源数组链接，重复操作。\n\n### 更简单的做法：\n\n前提：处理的数组，不管有多少层，只有数字类型\n```js\nvar arr1 = [1,2,3,[1,2,3,4,[2,3,4]]];\narr1.join().split(',').map(value => +value);\n\n// arr1.join() 的结果\"1,2,3,1,2,3,4,2,3,4\"\n```\n\n\n\n\n","slug":"Array-flat","published":1,"date":"2019-12-19T15:52:56.131Z","updated":"2019-12-19T15:52:56.131Z","_id":"ck4cwgnhe0002ckukr8u56o6w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"flat函数\"><a href=\"#flat函数\" class=\"headerlink\" title=\"flat函数\"></a>flat函数</h2><p>flat这个函数的方法很少的使用，它的意思就是将数组的元素‘打平’。说的感觉挺悬乎的，其实这是一个很简单的函数。那么下面我想通过这几方面来研究它：1、如何使用flat? 2、它是不是有副作用？会影响原数组？3、原生的flat方法是怎么实现的？</p>\n<h2 id=\"flat函数的用法\"><a href=\"#flat函数的用法\" class=\"headerlink\" title=\"flat函数的用法\"></a>flat函数的用法</h2><p>flat的语法：<code>var newArray = arr.flat(depth)</code>，其中的depth的值是个number类型。</p>\n<blockquote>\n<p>deepth指的提取嵌套数组的结构深度，默认值为 1</p>\n</blockquote>\n<h2 id=\"实测flat\"><a href=\"#实测flat\" class=\"headerlink\" title=\"实测flat\"></a>实测flat</h2><p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190729203145.png\" alt=\"20190729203145.png\"></p>\n<p>测试的结果如上图所示。</p>\n<ul>\n<li>第一个方框说明当depth的值大于数组元素的嵌套深度的时候会将所有的数组元素打平输出。</li>\n<li>第二个红框则说明了，使用flat方法不会影响原数组</li>\n</ul>\n<p>那数组的那些方法会影响原数组呢？列举几个常见的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort()、reverse()、splice()、push()、pop()、shift()、unshift()</span><br></pre></td></tr></table></figure></p>\n<p>那数组的那些方法不会影响原数组呢？列举几个常见的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map()、forEach()、reduce()、filter()、join()、concat()、slice()</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"原生方法实现：\"><a href=\"#原生方法实现：\" class=\"headerlink\" title=\"原生方法实现：\"></a>原生方法实现：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype._flat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">depth = <span class=\"number\">1</span></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> length = <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(depth === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">\t\t\tresult = [...result, ...this[i]._flat(depth - <span class=\"number\">1</span>)];</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresult.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现思路：递归嵌套数组</p>\n<p>对数组的元素进行判断，如果是数组就递归，不是数组就推进result中。递归当depth为0的时候截止。最后返回result</p>\n<h2 id=\"MDN的‘打平’思路：\"><a href=\"#MDN的‘打平’思路：\" class=\"headerlink\" title=\"MDN的‘打平’思路：\"></a>MDN的‘打平’思路：</h2><h3 id=\"使用递归：\"><a href=\"#使用递归：\" class=\"headerlink\" title=\"使用递归：\"></a>使用递归：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>, [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenDeep</span>(<span class=\"params\">arr1</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> arr1.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> <span class=\"built_in\">Array</span>.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flattenDeep(arr1);</span><br></pre></td></tr></table></figure>\n<p>利用reduce的递归方法，来将所有的元素遍历，如果是数组就递归，不是数组放进迭代acc里</p>\n<ul>\n<li>思考</li>\n</ul>\n<p><code>把acc换成push如何？</code>push返回的是数组的length。那样的话 acc = length。会怎么样？</p>\n<h3 id=\"不用递归：\"><a href=\"#不用递归：\" class=\"headerlink\" title=\"不用递归：\"></a>不用递归：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [...input];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.isArray(value))&#123;</span><br><span class=\"line\">            result.unshift(value);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            stack = [...stack,...value];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数组从后向前解析，遇到不是数组的就直接头插result中，如果是数组，将数组结构和剩余的源数组链接，重复操作。</p>\n<h3 id=\"更简单的做法：\"><a href=\"#更简单的做法：\" class=\"headerlink\" title=\"更简单的做法：\"></a>更简单的做法：</h3><p>前提：处理的数组，不管有多少层，只有数字类型<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]]];</span><br><span class=\"line\">arr1.join().split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> +value);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arr1.join() 的结果\"1,2,3,1,2,3,4,2,3,4\"</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"flat函数\"><a href=\"#flat函数\" class=\"headerlink\" title=\"flat函数\"></a>flat函数</h2><p>flat这个函数的方法很少的使用，它的意思就是将数组的元素‘打平’。说的感觉挺悬乎的，其实这是一个很简单的函数。那么下面我想通过这几方面来研究它：1、如何使用flat? 2、它是不是有副作用？会影响原数组？3、原生的flat方法是怎么实现的？</p>\n<h2 id=\"flat函数的用法\"><a href=\"#flat函数的用法\" class=\"headerlink\" title=\"flat函数的用法\"></a>flat函数的用法</h2><p>flat的语法：<code>var newArray = arr.flat(depth)</code>，其中的depth的值是个number类型。</p>\n<blockquote>\n<p>deepth指的提取嵌套数组的结构深度，默认值为 1</p>\n</blockquote>\n<h2 id=\"实测flat\"><a href=\"#实测flat\" class=\"headerlink\" title=\"实测flat\"></a>实测flat</h2><p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190729203145.png\" alt=\"20190729203145.png\"></p>\n<p>测试的结果如上图所示。</p>\n<ul>\n<li>第一个方框说明当depth的值大于数组元素的嵌套深度的时候会将所有的数组元素打平输出。</li>\n<li>第二个红框则说明了，使用flat方法不会影响原数组</li>\n</ul>\n<p>那数组的那些方法会影响原数组呢？列举几个常见的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort()、reverse()、splice()、push()、pop()、shift()、unshift()</span><br></pre></td></tr></table></figure></p>\n<p>那数组的那些方法不会影响原数组呢？列举几个常见的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map()、forEach()、reduce()、filter()、join()、concat()、slice()</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"原生方法实现：\"><a href=\"#原生方法实现：\" class=\"headerlink\" title=\"原生方法实现：\"></a>原生方法实现：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype._flat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">depth = <span class=\"number\">1</span></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> length = <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(depth === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">\t\t\tresult = [...result, ...this[i]._flat(depth - <span class=\"number\">1</span>)];</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresult.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现思路：递归嵌套数组</p>\n<p>对数组的元素进行判断，如果是数组就递归，不是数组就推进result中。递归当depth为0的时候截止。最后返回result</p>\n<h2 id=\"MDN的‘打平’思路：\"><a href=\"#MDN的‘打平’思路：\" class=\"headerlink\" title=\"MDN的‘打平’思路：\"></a>MDN的‘打平’思路：</h2><h3 id=\"使用递归：\"><a href=\"#使用递归：\" class=\"headerlink\" title=\"使用递归：\"></a>使用递归：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>, [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenDeep</span>(<span class=\"params\">arr1</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> arr1.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> <span class=\"built_in\">Array</span>.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flattenDeep(arr1);</span><br></pre></td></tr></table></figure>\n<p>利用reduce的递归方法，来将所有的元素遍历，如果是数组就递归，不是数组放进迭代acc里</p>\n<ul>\n<li>思考</li>\n</ul>\n<p><code>把acc换成push如何？</code>push返回的是数组的length。那样的话 acc = length。会怎么样？</p>\n<h3 id=\"不用递归：\"><a href=\"#不用递归：\" class=\"headerlink\" title=\"不用递归：\"></a>不用递归：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [...input];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.isArray(value))&#123;</span><br><span class=\"line\">            result.unshift(value);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            stack = [...stack,...value];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数组从后向前解析，遇到不是数组的就直接头插result中，如果是数组，将数组结构和剩余的源数组链接，重复操作。</p>\n<h3 id=\"更简单的做法：\"><a href=\"#更简单的做法：\" class=\"headerlink\" title=\"更简单的做法：\"></a>更简单的做法：</h3><p>前提：处理的数组，不管有多少层，只有数字类型<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]]];</span><br><span class=\"line\">arr1.join().split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> +value);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arr1.join() 的结果\"1,2,3,1,2,3,4,2,3,4\"</span></span><br></pre></td></tr></table></figure></p>"},{"title":"重新思考闭包和内存泄漏","toc":true,"_content":"\n## 闭包\n\n闭包之前的理解是，一个函数引用外部函数的内部变量时，就会生成闭包。但是这个理解其实不是特别准确，其实即使不引用也会生成闭包。正确的理解是`内部函数可以访问其父级的函数变量和参数`，此时便是一个闭包。通过一个经典例子看一下：\n\n```js\nfunction addHandler() {\n    var el = document.getElementById('el');\n    el.onclick = function() {\n        this.style.backgroundColor = 'red';\n    }\n}\n```\n虽然在内部回调函数没有引用外部函数中的变量el，但该变量依旧是闭包范围的一部分，即使它可能没有在函数本身内部直接引用（通过查看函数代码）。\n区别在于引擎如何优化未使用的变量。\n<!--more-->\n## 内存泄漏\n\n上面函数引起内存泄漏只存在于IE浏览器中，因为IE浏览器使用垃圾回收策略是引用计数，每次触发`click`回调都会生成一个新的函数，并带有一个包含el的闭包。\n因为匿名函数保持者对el的访问权，垃圾回收器无法将其从内存中删除。所以会导致内存泄漏。\n\n但是这种情况在Chrome中不会存在，在Chrome中V8采用了一种代回收的策略，将内存分为两个生代：[新生代（new generation）和老生代（old generation)](https://thinkbucket.github.io/docsite/docs/javascript/2.memory/old-new-space)。当内部函数没有引用外部函数变量时，函数执行完整体都会被直接回收，不会引起内存泄漏。\n\n## 参考链接：\n\n[参考链接一](https://stackoverflow.com/questions/15801471/deeper-understanding-of-closure-in-javascript/15801663#15801663)\n\n[参考链接二](https://stackoverflow.com/questions/15761094/dom-why-is-this-a-memory-leak/15761640#15761640)\n\n\n","source":"_posts/Closures.md","raw":"---\ntitle: 重新思考闭包和内存泄漏\ntags:  \n- JS\n- 闭包\n- 内存泄漏\ntoc: true\n---\n\n## 闭包\n\n闭包之前的理解是，一个函数引用外部函数的内部变量时，就会生成闭包。但是这个理解其实不是特别准确，其实即使不引用也会生成闭包。正确的理解是`内部函数可以访问其父级的函数变量和参数`，此时便是一个闭包。通过一个经典例子看一下：\n\n```js\nfunction addHandler() {\n    var el = document.getElementById('el');\n    el.onclick = function() {\n        this.style.backgroundColor = 'red';\n    }\n}\n```\n虽然在内部回调函数没有引用外部函数中的变量el，但该变量依旧是闭包范围的一部分，即使它可能没有在函数本身内部直接引用（通过查看函数代码）。\n区别在于引擎如何优化未使用的变量。\n<!--more-->\n## 内存泄漏\n\n上面函数引起内存泄漏只存在于IE浏览器中，因为IE浏览器使用垃圾回收策略是引用计数，每次触发`click`回调都会生成一个新的函数，并带有一个包含el的闭包。\n因为匿名函数保持者对el的访问权，垃圾回收器无法将其从内存中删除。所以会导致内存泄漏。\n\n但是这种情况在Chrome中不会存在，在Chrome中V8采用了一种代回收的策略，将内存分为两个生代：[新生代（new generation）和老生代（old generation)](https://thinkbucket.github.io/docsite/docs/javascript/2.memory/old-new-space)。当内部函数没有引用外部函数变量时，函数执行完整体都会被直接回收，不会引起内存泄漏。\n\n## 参考链接：\n\n[参考链接一](https://stackoverflow.com/questions/15801471/deeper-understanding-of-closure-in-javascript/15801663#15801663)\n\n[参考链接二](https://stackoverflow.com/questions/15761094/dom-why-is-this-a-memory-leak/15761640#15761640)\n\n\n","slug":"Closures","published":1,"date":"2019-12-19T15:52:56.132Z","updated":"2019-12-19T15:52:56.132Z","_id":"ck4cwgnhi0004ckuklrc57t7f","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包之前的理解是，一个函数引用外部函数的内部变量时，就会生成闭包。但是这个理解其实不是特别准确，其实即使不引用也会生成闭包。正确的理解是<code>内部函数可以访问其父级的函数变量和参数</code>，此时便是一个闭包。通过一个经典例子看一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'el'</span>);</span><br><span class=\"line\">    el.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.style.backgroundColor = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然在内部回调函数没有引用外部函数中的变量el，但该变量依旧是闭包范围的一部分，即使它可能没有在函数本身内部直接引用（通过查看函数代码）。<br>区别在于引擎如何优化未使用的变量。<br><a id=\"more\"></a></p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>上面函数引起内存泄漏只存在于IE浏览器中，因为IE浏览器使用垃圾回收策略是引用计数，每次触发<code>click</code>回调都会生成一个新的函数，并带有一个包含el的闭包。<br>因为匿名函数保持者对el的访问权，垃圾回收器无法将其从内存中删除。所以会导致内存泄漏。</p>\n<p>但是这种情况在Chrome中不会存在，在Chrome中V8采用了一种代回收的策略，将内存分为两个生代：<a href=\"https://thinkbucket.github.io/docsite/docs/javascript/2.memory/old-new-space\" target=\"_blank\" rel=\"noopener\">新生代（new generation）和老生代（old generation)</a>。当内部函数没有引用外部函数变量时，函数执行完整体都会被直接回收，不会引起内存泄漏。</p>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><p><a href=\"https://stackoverflow.com/questions/15801471/deeper-understanding-of-closure-in-javascript/15801663#15801663\" target=\"_blank\" rel=\"noopener\">参考链接一</a></p>\n<p><a href=\"https://stackoverflow.com/questions/15761094/dom-why-is-this-a-memory-leak/15761640#15761640\" target=\"_blank\" rel=\"noopener\">参考链接二</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包之前的理解是，一个函数引用外部函数的内部变量时，就会生成闭包。但是这个理解其实不是特别准确，其实即使不引用也会生成闭包。正确的理解是<code>内部函数可以访问其父级的函数变量和参数</code>，此时便是一个闭包。通过一个经典例子看一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'el'</span>);</span><br><span class=\"line\">    el.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.style.backgroundColor = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然在内部回调函数没有引用外部函数中的变量el，但该变量依旧是闭包范围的一部分，即使它可能没有在函数本身内部直接引用（通过查看函数代码）。<br>区别在于引擎如何优化未使用的变量。<br>","more":"</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>上面函数引起内存泄漏只存在于IE浏览器中，因为IE浏览器使用垃圾回收策略是引用计数，每次触发<code>click</code>回调都会生成一个新的函数，并带有一个包含el的闭包。<br>因为匿名函数保持者对el的访问权，垃圾回收器无法将其从内存中删除。所以会导致内存泄漏。</p>\n<p>但是这种情况在Chrome中不会存在，在Chrome中V8采用了一种代回收的策略，将内存分为两个生代：<a href=\"https://thinkbucket.github.io/docsite/docs/javascript/2.memory/old-new-space\" target=\"_blank\" rel=\"noopener\">新生代（new generation）和老生代（old generation)</a>。当内部函数没有引用外部函数变量时，函数执行完整体都会被直接回收，不会引起内存泄漏。</p>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><p><a href=\"https://stackoverflow.com/questions/15801471/deeper-understanding-of-closure-in-javascript/15801663#15801663\" target=\"_blank\" rel=\"noopener\">参考链接一</a></p>\n<p><a href=\"https://stackoverflow.com/questions/15761094/dom-why-is-this-a-memory-leak/15761640#15761640\" target=\"_blank\" rel=\"noopener\">参考链接二</a></p>"},{"title":"关于width","toc":true,"_content":"### **width:auto**\n\n---\n- [ ] 父元素的content = 子元素（content + padding + border + margin )\n- [ ] 子元素（包括content+padding+border+margin）撑满整个父元素的content区域。\n\n- [ ] 子元素有margin、border、padding时，会减去子元素自身content相对应的width值\n- 此时的子元素有点像IE盒模型，宽高的值就是父元素的宽高。\n---\n### **width:100%**\n\n---\n<!--more-->\n\n- [ ] 父元素的content = 子元素的content\n- [ ] 强制将子元素的content区域 撑满 父元素的content区域\n- [ ] 子元素有margin、border、padding时，不改变子元素content区域的width，而是溢出父盒子，保持原有值\n\n- 此时的自元素有点像盒模型。\n---\n贴段代码做参考：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style type=\"text/css\">\n        * {\n            margin: 0;padding: 0;\n        }\n        body {\n            background: #dcdcdc;\n        }\n        .box {\n            width: 400px;\n            border: 3px solid red;\n            padding: 0 50px;\n        }\n        .box1 {\n            width: auto;\n            height: 100px;\n            background: pink;\n            padding: 0 50px;\n            margin: 0 50px;\n            border-width: 0 50px;\n            border-style: solid;\n            border-color: green;\n        }\n        .box2 {\n            width: 100%;\n            height: 100px;\n            background: gold;\n            padding: 0 50px;\n            margin: 0 50px;\n            border-width: 0 50px;\n            border-style: solid;\n            border-color: green;\n        }\n    </style>\n</head>\n<body>\n<div class=\"box\">\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n</div>\n</body>\n</html>\n\n```\n\n\n\n","source":"_posts/CSS-width.md","raw":"---\ntitle: 关于width\ntags: \n- CSS\n- width:auto\n- width:100%\ntoc: true\n---\n### **width:auto**\n\n---\n- [ ] 父元素的content = 子元素（content + padding + border + margin )\n- [ ] 子元素（包括content+padding+border+margin）撑满整个父元素的content区域。\n\n- [ ] 子元素有margin、border、padding时，会减去子元素自身content相对应的width值\n- 此时的子元素有点像IE盒模型，宽高的值就是父元素的宽高。\n---\n### **width:100%**\n\n---\n<!--more-->\n\n- [ ] 父元素的content = 子元素的content\n- [ ] 强制将子元素的content区域 撑满 父元素的content区域\n- [ ] 子元素有margin、border、padding时，不改变子元素content区域的width，而是溢出父盒子，保持原有值\n\n- 此时的自元素有点像盒模型。\n---\n贴段代码做参考：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style type=\"text/css\">\n        * {\n            margin: 0;padding: 0;\n        }\n        body {\n            background: #dcdcdc;\n        }\n        .box {\n            width: 400px;\n            border: 3px solid red;\n            padding: 0 50px;\n        }\n        .box1 {\n            width: auto;\n            height: 100px;\n            background: pink;\n            padding: 0 50px;\n            margin: 0 50px;\n            border-width: 0 50px;\n            border-style: solid;\n            border-color: green;\n        }\n        .box2 {\n            width: 100%;\n            height: 100px;\n            background: gold;\n            padding: 0 50px;\n            margin: 0 50px;\n            border-width: 0 50px;\n            border-style: solid;\n            border-color: green;\n        }\n    </style>\n</head>\n<body>\n<div class=\"box\">\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n</div>\n</body>\n</html>\n\n```\n\n\n\n","slug":"CSS-width","published":1,"date":"2019-12-19T15:52:56.131Z","updated":"2019-12-19T15:52:56.132Z","_id":"ck4cwgnhj0005ckuk75atnqz7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"width-auto\"><a href=\"#width-auto\" class=\"headerlink\" title=\"width:auto\"></a><strong>width:auto</strong></h3><hr>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 父元素的content = 子元素（content + padding + border + margin )</li>\n<li><p>[ ] 子元素（包括content+padding+border+margin）撑满整个父元素的content区域。</p>\n</li>\n<li><p>[ ] 子元素有margin、border、padding时，会减去子元素自身content相对应的width值</p>\n</li>\n<li>此时的子元素有点像IE盒模型，宽高的值就是父元素的宽高。</li>\n</ul>\n<hr>\n<h3 id=\"width-100\"><a href=\"#width-100\" class=\"headerlink\" title=\"width:100%\"></a><strong>width:100%</strong></h3><hr>\n<a id=\"more\"></a>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 父元素的content = 子元素的content</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 强制将子元素的content区域 撑满 父元素的content区域</li>\n<li><p>[ ] 子元素有margin、border、padding时，不改变子元素content区域的width，而是溢出父盒子，保持原有值</p>\n</li>\n<li><p>此时的自元素有点像盒模型。</p>\n</li>\n</ul>\n<hr>\n<p>贴段代码做参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        * &#123;</span><br><span class=\"line\">            margin: 0;padding: 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            background: #dcdcdc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .box &#123;</span><br><span class=\"line\">            width: 400px;</span><br><span class=\"line\">            border: 3px solid red;</span><br><span class=\"line\">            padding: 0 50px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .box1 &#123;</span><br><span class=\"line\">            width: auto;</span><br><span class=\"line\">            height: 100px;</span><br><span class=\"line\">            background: pink;</span><br><span class=\"line\">            padding: 0 50px;</span><br><span class=\"line\">            margin: 0 50px;</span><br><span class=\"line\">            border-width: 0 50px;</span><br><span class=\"line\">            border-style: solid;</span><br><span class=\"line\">            border-color: green;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .box2 &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100px;</span><br><span class=\"line\">            background: gold;</span><br><span class=\"line\">            padding: 0 50px;</span><br><span class=\"line\">            margin: 0 50px;</span><br><span class=\"line\">            border-width: 0 50px;</span><br><span class=\"line\">            border-style: solid;</span><br><span class=\"line\">            border-color: green;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"width-auto\"><a href=\"#width-auto\" class=\"headerlink\" title=\"width:auto\"></a><strong>width:auto</strong></h3><hr>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 父元素的content = 子元素（content + padding + border + margin )</li>\n<li><p>[ ] 子元素（包括content+padding+border+margin）撑满整个父元素的content区域。</p>\n</li>\n<li><p>[ ] 子元素有margin、border、padding时，会减去子元素自身content相对应的width值</p>\n</li>\n<li>此时的子元素有点像IE盒模型，宽高的值就是父元素的宽高。</li>\n</ul>\n<hr>\n<h3 id=\"width-100\"><a href=\"#width-100\" class=\"headerlink\" title=\"width:100%\"></a><strong>width:100%</strong></h3><hr>","more":"<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 父元素的content = 子元素的content</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 强制将子元素的content区域 撑满 父元素的content区域</li>\n<li><p>[ ] 子元素有margin、border、padding时，不改变子元素content区域的width，而是溢出父盒子，保持原有值</p>\n</li>\n<li><p>此时的自元素有点像盒模型。</p>\n</li>\n</ul>\n<hr>\n<p>贴段代码做参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        * &#123;</span><br><span class=\"line\">            margin: 0;padding: 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            background: #dcdcdc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .box &#123;</span><br><span class=\"line\">            width: 400px;</span><br><span class=\"line\">            border: 3px solid red;</span><br><span class=\"line\">            padding: 0 50px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .box1 &#123;</span><br><span class=\"line\">            width: auto;</span><br><span class=\"line\">            height: 100px;</span><br><span class=\"line\">            background: pink;</span><br><span class=\"line\">            padding: 0 50px;</span><br><span class=\"line\">            margin: 0 50px;</span><br><span class=\"line\">            border-width: 0 50px;</span><br><span class=\"line\">            border-style: solid;</span><br><span class=\"line\">            border-color: green;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .box2 &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100px;</span><br><span class=\"line\">            background: gold;</span><br><span class=\"line\">            padding: 0 50px;</span><br><span class=\"line\">            margin: 0 50px;</span><br><span class=\"line\">            border-width: 0 50px;</span><br><span class=\"line\">            border-style: solid;</span><br><span class=\"line\">            border-color: green;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"深比较两个值","toc":true,"_content":"# Js深比较探究\n## 深比较的思路：\n1、对于非引用类型：数字、字符串、null、undefined、布尔类型，使用===操作既可以判断出来。\n\n`对于特殊的NaN === NaN 为false和 0===-0 为true这两种情况要特殊处理。但是写深比较函数不讨论这两种情况，因为我觉的这两种值没有意义，业务中也不会出现这两种值，但是他们在_.isEqual()下是相等的。`\n\n2、对于日期类型(Date)、正则类型(RegExp)不能使用 === 处理，需要单独做处理。\n\n3、对于Object和Array类型则需要递归处理，Object和Array的元素可能包括任何数据类型。\n<!--More-->\n## 深比较函数\n```\nconst equals = (a, b) => {\n  if (a === b) return true;\n  if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a=== b;\n  if (a instanceof RegExp && b instanceof RegExp) return ''+a === ''+b;\n  if (a instanceof Date && b instanceof Date) return a.getTime() ===  b.getTime();\n  if (a.__proto__ !== b.__proto__) return false;\n  let keys = Object.keys(a);\n  if (keys.length !== Object.keys(b).length) return false;\n  return keys.every(k => equals(a[k], b[k]));\n};\n```","source":"_posts/IsEqual(a,b).md","raw":"---\ntitle: 深比较两个值\ntoc: true\ntags: \n- JS\n- 深比较\n- _.isEqual()\n---\n# Js深比较探究\n## 深比较的思路：\n1、对于非引用类型：数字、字符串、null、undefined、布尔类型，使用===操作既可以判断出来。\n\n`对于特殊的NaN === NaN 为false和 0===-0 为true这两种情况要特殊处理。但是写深比较函数不讨论这两种情况，因为我觉的这两种值没有意义，业务中也不会出现这两种值，但是他们在_.isEqual()下是相等的。`\n\n2、对于日期类型(Date)、正则类型(RegExp)不能使用 === 处理，需要单独做处理。\n\n3、对于Object和Array类型则需要递归处理，Object和Array的元素可能包括任何数据类型。\n<!--More-->\n## 深比较函数\n```\nconst equals = (a, b) => {\n  if (a === b) return true;\n  if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a=== b;\n  if (a instanceof RegExp && b instanceof RegExp) return ''+a === ''+b;\n  if (a instanceof Date && b instanceof Date) return a.getTime() ===  b.getTime();\n  if (a.__proto__ !== b.__proto__) return false;\n  let keys = Object.keys(a);\n  if (keys.length !== Object.keys(b).length) return false;\n  return keys.every(k => equals(a[k], b[k]));\n};\n```","slug":"IsEqual(a,b)","published":1,"date":"2019-12-19T15:52:56.133Z","updated":"2019-12-19T15:52:56.134Z","_id":"ck4cwgnhk0006ckuk46oqv9mf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Js深比较探究\"><a href=\"#Js深比较探究\" class=\"headerlink\" title=\"Js深比较探究\"></a>Js深比较探究</h1><h2 id=\"深比较的思路：\"><a href=\"#深比较的思路：\" class=\"headerlink\" title=\"深比较的思路：\"></a>深比较的思路：</h2><p>1、对于非引用类型：数字、字符串、null、undefined、布尔类型，使用===操作既可以判断出来。</p>\n<p><code>对于特殊的NaN === NaN 为false和 0===-0 为true这两种情况要特殊处理。但是写深比较函数不讨论这两种情况，因为我觉的这两种值没有意义，业务中也不会出现这两种值，但是他们在_.isEqual()下是相等的。</code></p>\n<p>2、对于日期类型(Date)、正则类型(RegExp)不能使用 === 处理，需要单独做处理。</p>\n<p>3、对于Object和Array类型则需要递归处理，Object和Array的元素可能包括任何数据类型。<br><a id=\"more\"></a></p>\n<h2 id=\"深比较函数\"><a href=\"#深比较函数\" class=\"headerlink\" title=\"深比较函数\"></a>深比较函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const equals = (a, b) =&gt; &#123;</span><br><span class=\"line\">  if (a === b) return true;</span><br><span class=\"line\">  if (!a || !b || (typeof a !== &apos;object&apos; &amp;&amp; typeof b !== &apos;object&apos;)) return a=== b;</span><br><span class=\"line\">  if (a instanceof RegExp &amp;&amp; b instanceof RegExp) return &apos;&apos;+a === &apos;&apos;+b;</span><br><span class=\"line\">  if (a instanceof Date &amp;&amp; b instanceof Date) return a.getTime() ===  b.getTime();</span><br><span class=\"line\">  if (a.__proto__ !== b.__proto__) return false;</span><br><span class=\"line\">  let keys = Object.keys(a);</span><br><span class=\"line\">  if (keys.length !== Object.keys(b).length) return false;</span><br><span class=\"line\">  return keys.every(k =&gt; equals(a[k], b[k]));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Js深比较探究\"><a href=\"#Js深比较探究\" class=\"headerlink\" title=\"Js深比较探究\"></a>Js深比较探究</h1><h2 id=\"深比较的思路：\"><a href=\"#深比较的思路：\" class=\"headerlink\" title=\"深比较的思路：\"></a>深比较的思路：</h2><p>1、对于非引用类型：数字、字符串、null、undefined、布尔类型，使用===操作既可以判断出来。</p>\n<p><code>对于特殊的NaN === NaN 为false和 0===-0 为true这两种情况要特殊处理。但是写深比较函数不讨论这两种情况，因为我觉的这两种值没有意义，业务中也不会出现这两种值，但是他们在_.isEqual()下是相等的。</code></p>\n<p>2、对于日期类型(Date)、正则类型(RegExp)不能使用 === 处理，需要单独做处理。</p>\n<p>3、对于Object和Array类型则需要递归处理，Object和Array的元素可能包括任何数据类型。<br>","more":"</p>\n<h2 id=\"深比较函数\"><a href=\"#深比较函数\" class=\"headerlink\" title=\"深比较函数\"></a>深比较函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const equals = (a, b) =&gt; &#123;</span><br><span class=\"line\">  if (a === b) return true;</span><br><span class=\"line\">  if (!a || !b || (typeof a !== &apos;object&apos; &amp;&amp; typeof b !== &apos;object&apos;)) return a=== b;</span><br><span class=\"line\">  if (a instanceof RegExp &amp;&amp; b instanceof RegExp) return &apos;&apos;+a === &apos;&apos;+b;</span><br><span class=\"line\">  if (a instanceof Date &amp;&amp; b instanceof Date) return a.getTime() ===  b.getTime();</span><br><span class=\"line\">  if (a.__proto__ !== b.__proto__) return false;</span><br><span class=\"line\">  let keys = Object.keys(a);</span><br><span class=\"line\">  if (keys.length !== Object.keys(b).length) return false;</span><br><span class=\"line\">  return keys.every(k =&gt; equals(a[k], b[k]));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"PRcommentEmoji","_content":"Inspired by [dannyfritz/commit-message-emoji](https://github.com/dannyfritz/commit-message-emoji)\n\nSee also [gitmoji](https://gitmoji.carloscuesta.me/).\n<!--more-->\n|   Commit type              | Emoji                                         |\n|:---------------------------|:----------------------------------------------|\n| Initial commit             | :tada: `:tada:`                               |\n| Version tag                | :bookmark: `:bookmark:`                       |\n| New feature                | :sparkles: `:sparkles:`                       |\n| Bugfix                     | :bug: `:bug:`                                 |\n| Metadata                   | :card_index: `:card_index:`                   |\n| Documentation              | :books: `:books:`                             |\n| Documenting source code    | :bulb: `:bulb:`                               |\n| Performance                | :racehorse: `:racehorse:`                     |\n| Cosmetic                   | :lipstick: `:lipstick:`                       |\n| Tests                      | :rotating_light: `:rotating_light:`           |\n| Adding a test              | :white_check_mark: `:white_check_mark:`       |\n| General update             | :zap: `:zap:`                                 |\n| Improve format/structure   | :art: `:art:`                                 |\n| Refactor code              | :hammer: `:hammer:`                           |\n| Removing code/files        | :fire: `:fire:`                               |\n| Continuous Integration     | :green_heart: `:green_heart:`                 |\n| Security                   | :lock: `:lock:`                               |\n| Upgrading dependencies     | :arrow_up: `:arrow_up:`                       |\n| Downgrading dependencies   | :arrow_down: `:arrow_down:`                   |\n| Lint                       | :shirt: `:shirt:`                             |\n| Translation                | :alien: `:alien:`                             |\n| Text                       | :pencil: `:pencil:`                           |\n| Critical hotfix            | :ambulance: `:ambulance:`                     |\n| Deploying stuff            | :rocket: `:rocket:`                           |\n| Fixing on MacOS            | :apple: `:apple:`                             |\n| Fixing on Linux            | :penguin: `:penguin:`                         |\n| Fixing on Windows          | :checkered_flag: `:checkered_flag:`           |\n| Work in progress           | :construction:  `:construction:`              |\n| Adding CI build system     | :construction_worker: `:construction_worker:` |\n| Analytics or tracking code | :chart_with_upwards_trend: `:chart_with_upwards_trend:` |\n| Removing a dependency      | :heavy_minus_sign: `:heavy_minus_sign:`       |\n| Adding a dependency        | :heavy_plus_sign: `:heavy_plus_sign:`         |\n| Docker                     | :whale: `:whale:`                             |\n| Configuration files        | :wrench: `:wrench:`                           |\n| Package.json in JS         | :package: `:package:`                         |\n| Merging branches           | :twisted_rightwards_arrows: `:twisted_rightwards_arrows:` |\n| Bad code / need improv.    | :hankey: `:hankey:`                           |\n| Reverting changes          | :rewind: `:rewind:`                           |\n| Breaking changes           | :boom: `:boom:`                               |\n| Code review changes        | :ok_hand: `:ok_hand:`                         |\n| Accessibility              | :wheelchair: `:wheelchair:`                   |\n| Move/rename repository     | :truck: `:truck:`                             |\n| Other                      | [Be creative](http://www.emoji-cheat-sheet.com/)  |","source":"_posts/GitCommitEmoji.md","raw":"---\ntitle: PRcommentEmoji\ntags: \n- Git\n---\nInspired by [dannyfritz/commit-message-emoji](https://github.com/dannyfritz/commit-message-emoji)\n\nSee also [gitmoji](https://gitmoji.carloscuesta.me/).\n<!--more-->\n|   Commit type              | Emoji                                         |\n|:---------------------------|:----------------------------------------------|\n| Initial commit             | :tada: `:tada:`                               |\n| Version tag                | :bookmark: `:bookmark:`                       |\n| New feature                | :sparkles: `:sparkles:`                       |\n| Bugfix                     | :bug: `:bug:`                                 |\n| Metadata                   | :card_index: `:card_index:`                   |\n| Documentation              | :books: `:books:`                             |\n| Documenting source code    | :bulb: `:bulb:`                               |\n| Performance                | :racehorse: `:racehorse:`                     |\n| Cosmetic                   | :lipstick: `:lipstick:`                       |\n| Tests                      | :rotating_light: `:rotating_light:`           |\n| Adding a test              | :white_check_mark: `:white_check_mark:`       |\n| General update             | :zap: `:zap:`                                 |\n| Improve format/structure   | :art: `:art:`                                 |\n| Refactor code              | :hammer: `:hammer:`                           |\n| Removing code/files        | :fire: `:fire:`                               |\n| Continuous Integration     | :green_heart: `:green_heart:`                 |\n| Security                   | :lock: `:lock:`                               |\n| Upgrading dependencies     | :arrow_up: `:arrow_up:`                       |\n| Downgrading dependencies   | :arrow_down: `:arrow_down:`                   |\n| Lint                       | :shirt: `:shirt:`                             |\n| Translation                | :alien: `:alien:`                             |\n| Text                       | :pencil: `:pencil:`                           |\n| Critical hotfix            | :ambulance: `:ambulance:`                     |\n| Deploying stuff            | :rocket: `:rocket:`                           |\n| Fixing on MacOS            | :apple: `:apple:`                             |\n| Fixing on Linux            | :penguin: `:penguin:`                         |\n| Fixing on Windows          | :checkered_flag: `:checkered_flag:`           |\n| Work in progress           | :construction:  `:construction:`              |\n| Adding CI build system     | :construction_worker: `:construction_worker:` |\n| Analytics or tracking code | :chart_with_upwards_trend: `:chart_with_upwards_trend:` |\n| Removing a dependency      | :heavy_minus_sign: `:heavy_minus_sign:`       |\n| Adding a dependency        | :heavy_plus_sign: `:heavy_plus_sign:`         |\n| Docker                     | :whale: `:whale:`                             |\n| Configuration files        | :wrench: `:wrench:`                           |\n| Package.json in JS         | :package: `:package:`                         |\n| Merging branches           | :twisted_rightwards_arrows: `:twisted_rightwards_arrows:` |\n| Bad code / need improv.    | :hankey: `:hankey:`                           |\n| Reverting changes          | :rewind: `:rewind:`                           |\n| Breaking changes           | :boom: `:boom:`                               |\n| Code review changes        | :ok_hand: `:ok_hand:`                         |\n| Accessibility              | :wheelchair: `:wheelchair:`                   |\n| Move/rename repository     | :truck: `:truck:`                             |\n| Other                      | [Be creative](http://www.emoji-cheat-sheet.com/)  |","slug":"GitCommitEmoji","published":1,"date":"2019-12-19T15:52:56.133Z","updated":"2019-12-19T15:52:56.133Z","_id":"ck4cwgnhl0008ckuk8pm2apmo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Inspired by <a href=\"https://github.com/dannyfritz/commit-message-emoji\" target=\"_blank\" rel=\"noopener\">dannyfritz/commit-message-emoji</a></p>\n<p>See also <a href=\"https://gitmoji.carloscuesta.me/\" target=\"_blank\" rel=\"noopener\">gitmoji</a>.<br><a id=\"more\"></a><br>|   Commit type              | Emoji                                         |<br>|:—————————|:———————————————-|<br>| Initial commit             | :tada: <code>:tada:</code>                               |<br>| Version tag                | :bookmark: <code>:bookmark:</code>                       |<br>| New feature                | :sparkles: <code>:sparkles:</code>                       |<br>| Bugfix                     | :bug: <code>:bug:</code>                                 |<br>| Metadata                   | :card_index: <code>:card_index:</code>                   |<br>| Documentation              | :books: <code>:books:</code>                             |<br>| Documenting source code    | :bulb: <code>:bulb:</code>                               |<br>| Performance                | :racehorse: <code>:racehorse:</code>                     |<br>| Cosmetic                   | :lipstick: <code>:lipstick:</code>                       |<br>| Tests                      | :rotating_light: <code>:rotating_light:</code>           |<br>| Adding a test              | :white_check_mark: <code>:white_check_mark:</code>       |<br>| General update             | :zap: <code>:zap:</code>                                 |<br>| Improve format/structure   | :art: <code>:art:</code>                                 |<br>| Refactor code              | :hammer: <code>:hammer:</code>                           |<br>| Removing code/files        | :fire: <code>:fire:</code>                               |<br>| Continuous Integration     | :green_heart: <code>:green_heart:</code>                 |<br>| Security                   | :lock: <code>:lock:</code>                               |<br>| Upgrading dependencies     | :arrow_up: <code>:arrow_up:</code>                       |<br>| Downgrading dependencies   | :arrow_down: <code>:arrow_down:</code>                   |<br>| Lint                       | :shirt: <code>:shirt:</code>                             |<br>| Translation                | :alien: <code>:alien:</code>                             |<br>| Text                       | :pencil: <code>:pencil:</code>                           |<br>| Critical hotfix            | :ambulance: <code>:ambulance:</code>                     |<br>| Deploying stuff            | :rocket: <code>:rocket:</code>                           |<br>| Fixing on MacOS            | :apple: <code>:apple:</code>                             |<br>| Fixing on Linux            | :penguin: <code>:penguin:</code>                         |<br>| Fixing on Windows          | :checkered_flag: <code>:checkered_flag:</code>           |<br>| Work in progress           | :construction:  <code>:construction:</code>              |<br>| Adding CI build system     | :construction_worker: <code>:construction_worker:</code> |<br>| Analytics or tracking code | :chart_with_upwards_trend: <code>:chart_with_upwards_trend:</code> |<br>| Removing a dependency      | :heavy_minus_sign: <code>:heavy_minus_sign:</code>       |<br>| Adding a dependency        | :heavy_plus_sign: <code>:heavy_plus_sign:</code>         |<br>| Docker                     | :whale: <code>:whale:</code>                             |<br>| Configuration files        | :wrench: <code>:wrench:</code>                           |<br>| Package.json in JS         | :package: <code>:package:</code>                         |<br>| Merging branches           | :twisted_rightwards_arrows: <code>:twisted_rightwards_arrows:</code> |<br>| Bad code / need improv.    | :hankey: <code>:hankey:</code>                           |<br>| Reverting changes          | :rewind: <code>:rewind:</code>                           |<br>| Breaking changes           | :boom: <code>:boom:</code>                               |<br>| Code review changes        | :ok_hand: <code>:ok_hand:</code>                         |<br>| Accessibility              | :wheelchair: <code>:wheelchair:</code>                   |<br>| Move/rename repository     | :truck: <code>:truck:</code>                             |<br>| Other                      | <a href=\"http://www.emoji-cheat-sheet.com/\" target=\"_blank\" rel=\"noopener\">Be creative</a>  |</p>\n","site":{"data":{}},"excerpt":"<p>Inspired by <a href=\"https://github.com/dannyfritz/commit-message-emoji\" target=\"_blank\" rel=\"noopener\">dannyfritz/commit-message-emoji</a></p>\n<p>See also <a href=\"https://gitmoji.carloscuesta.me/\" target=\"_blank\" rel=\"noopener\">gitmoji</a>.<br>","more":"<br>|   Commit type              | Emoji                                         |<br>|:—————————|:———————————————-|<br>| Initial commit             | :tada: <code>:tada:</code>                               |<br>| Version tag                | :bookmark: <code>:bookmark:</code>                       |<br>| New feature                | :sparkles: <code>:sparkles:</code>                       |<br>| Bugfix                     | :bug: <code>:bug:</code>                                 |<br>| Metadata                   | :card_index: <code>:card_index:</code>                   |<br>| Documentation              | :books: <code>:books:</code>                             |<br>| Documenting source code    | :bulb: <code>:bulb:</code>                               |<br>| Performance                | :racehorse: <code>:racehorse:</code>                     |<br>| Cosmetic                   | :lipstick: <code>:lipstick:</code>                       |<br>| Tests                      | :rotating_light: <code>:rotating_light:</code>           |<br>| Adding a test              | :white_check_mark: <code>:white_check_mark:</code>       |<br>| General update             | :zap: <code>:zap:</code>                                 |<br>| Improve format/structure   | :art: <code>:art:</code>                                 |<br>| Refactor code              | :hammer: <code>:hammer:</code>                           |<br>| Removing code/files        | :fire: <code>:fire:</code>                               |<br>| Continuous Integration     | :green_heart: <code>:green_heart:</code>                 |<br>| Security                   | :lock: <code>:lock:</code>                               |<br>| Upgrading dependencies     | :arrow_up: <code>:arrow_up:</code>                       |<br>| Downgrading dependencies   | :arrow_down: <code>:arrow_down:</code>                   |<br>| Lint                       | :shirt: <code>:shirt:</code>                             |<br>| Translation                | :alien: <code>:alien:</code>                             |<br>| Text                       | :pencil: <code>:pencil:</code>                           |<br>| Critical hotfix            | :ambulance: <code>:ambulance:</code>                     |<br>| Deploying stuff            | :rocket: <code>:rocket:</code>                           |<br>| Fixing on MacOS            | :apple: <code>:apple:</code>                             |<br>| Fixing on Linux            | :penguin: <code>:penguin:</code>                         |<br>| Fixing on Windows          | :checkered_flag: <code>:checkered_flag:</code>           |<br>| Work in progress           | :construction:  <code>:construction:</code>              |<br>| Adding CI build system     | :construction_worker: <code>:construction_worker:</code> |<br>| Analytics or tracking code | :chart_with_upwards_trend: <code>:chart_with_upwards_trend:</code> |<br>| Removing a dependency      | :heavy_minus_sign: <code>:heavy_minus_sign:</code>       |<br>| Adding a dependency        | :heavy_plus_sign: <code>:heavy_plus_sign:</code>         |<br>| Docker                     | :whale: <code>:whale:</code>                             |<br>| Configuration files        | :wrench: <code>:wrench:</code>                           |<br>| Package.json in JS         | :package: <code>:package:</code>                         |<br>| Merging branches           | :twisted_rightwards_arrows: <code>:twisted_rightwards_arrows:</code> |<br>| Bad code / need improv.    | :hankey: <code>:hankey:</code>                           |<br>| Reverting changes          | :rewind: <code>:rewind:</code>                           |<br>| Breaking changes           | :boom: <code>:boom:</code>                               |<br>| Code review changes        | :ok_hand: <code>:ok_hand:</code>                         |<br>| Accessibility              | :wheelchair: <code>:wheelchair:</code>                   |<br>| Move/rename repository     | :truck: <code>:truck:</code>                             |<br>| Other                      | <a href=\"http://www.emoji-cheat-sheet.com/\" target=\"_blank\" rel=\"noopener\">Be creative</a>  |</p>"},{"title":"js中的深拷贝和浅拷贝","toc":true,"_content":"### 如何区分JS的拷贝是深拷贝还是浅拷贝\n>浅拷贝:只对其第一层基础类型的属性进行复制开辟新空间，引用类型只存地址，指向同一块空间\n深拷贝:则递归复制了所有层级，全部开辟新的空间，不会影响先前的对象\n \n### 基本数据类型和引用数据类型\n对于基本数据类型，变量的数据存放在栈中，数据复制后会开辟新的内存，两者互不影响。但是这不是深拷贝，深拷贝是针对引用类型来讲的。\n\n对于引用类型，数据保存在堆中，栈内存中定义的变量对应的是对堆内存的引用地址。引用类型的赋值操作，只是对引用地址的拷贝。其中一个的改变必然会影响到另一个。\n\n### 实现浅拷贝的方法：\n首先要明确，对引用类型采用直接赋值，不是浅拷贝\n举个例子：\n```\nlet x = {\n    a: 1,\n    b: { z: 0 }\n};\nlet y = x\ny === x   // true，代表它们指向同一块空间\ny.a === x.a   // true\ny.a = 2\nx.a  // 2 x的值也发生的改变\ny.b === x.b   // true，代表它们指向同一块空间\nx.b.z = 100\ny.b.z     // 100\n```\n上述例子中，x对y的赋值操作不属于浅拷贝，浅拷贝对于a属性中的非引用类型应该开辟新的存储空间，即对`y.a = 2`的操作不应该影响到原对象x.a的值。\n\n![20190630101009.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190630101009.png)\n\n#### 如何算浅拷贝？\n```\nfunction shallowCopy(src) {\n  let dst = {};\n  for (var prop in src) {\n    if (src.hasOwnProperty(prop)) {\n      dst[prop] = src[prop];\n    }\n  }\n  return dst;\n}\nlet obj = { a:1, arr: [2,3] };\nlet shallowObj = shallowCopy(obj);\n```\n此时对于属性值是基本数据类型的会开辟新的内存空间，互不影响。对于引用类型的则是地址的拷贝。改变其中一个另一个也会改变。\n### 实现深拷贝的方法：\n\n- 递归操作：\n\n```\nfunction deepClone(obj){\n    let objClone = Array.isArray(obj) ? [] : {};\n    if(obj && typeof obj === \"object\"){\n        for(key in obj){\n            if(obj.hasOwnProperty(key)){\n                //判断ojb子元素是否为对象，如果是，递归复制\n                if(obj[key]&&typeof obj[key] ===\"object\"){\n                    objClone[key] = deepClone(obj[key]);\n                }else{\n                    //如果不是，简单复制\n                    objClone[key] = obj[key];\n                }\n            }\n        }\n    }\n    return objClone;\n}    \n```\n<!--more-->\n\n- 使用Json的stringyfy和pase方法：\n\n```\nfunction deepClone(obj){\n    let _obj = JSON.stringify(obj),\n        objClone = JSON.parse(_obj);\n    return objClone\n}    \nlet a=[0,1,[2,3],4],\n    b=deepClone(a);\na[0]=1;\na[2][0]=1;\nconsole.log(a,b);\n//a\n(4) [1, 1, Array(2), 4]\n0: 1\n1: 1\n2: (2) [1, 3]\n3: 4\nlength: 4\n__proto__: Array(0)\n//b\n(4) [0, 1, Array(2), 4]\n0: 0\n1: 1\n2: (2) [2, 3]\n3: 4\nlength: 4\n__proto__: Array(0)\n```\n- 使用Lodash的_.cloneDeep(value)\n\n  [lodash官方文档](https://lodash.com/docs/4.17.11#cloneDeep)\n\n### 关于slice()和contact()方法是不是深拷贝：\n对于数组，如果数组不存在嵌套，那么这两个方法确实能不影响原数组，实现'深拷贝'，但如果存在嵌套就会失效，所以不是真正的深拷贝，真正的深拷贝无论元素有多少层都会深度拷贝。\n\neg:\n~~~\nlet a=[0,1,[2,3],4];\nconst b=a.slice();\na[0]=1;\na[2][0]=1;\n\n//a\n(4) [1, 1, Array(2), 4]\n0: 1\n1: 1\n2: (2) [1, 3]\n3: 4\nlength: 4\n__proto__: Array(0)\n\n//b\n(4) [0, 1, Array(2), 4]\n0: 0\n1: 1\n2: (2) [1, 3]\n3: 4\nlength: 4\n__proto__: Array(0)\n\n~~~\n[参考链接](https://github.com/muwenzi/Program-Blog/issues/62)\n\n\n\n","source":"_posts/JS中的深浅拷贝.md","raw":"---\ntitle: js中的深拷贝和浅拷贝\ntags: \n- JS\n- 深拷贝\ntoc: true\n---\n### 如何区分JS的拷贝是深拷贝还是浅拷贝\n>浅拷贝:只对其第一层基础类型的属性进行复制开辟新空间，引用类型只存地址，指向同一块空间\n深拷贝:则递归复制了所有层级，全部开辟新的空间，不会影响先前的对象\n \n### 基本数据类型和引用数据类型\n对于基本数据类型，变量的数据存放在栈中，数据复制后会开辟新的内存，两者互不影响。但是这不是深拷贝，深拷贝是针对引用类型来讲的。\n\n对于引用类型，数据保存在堆中，栈内存中定义的变量对应的是对堆内存的引用地址。引用类型的赋值操作，只是对引用地址的拷贝。其中一个的改变必然会影响到另一个。\n\n### 实现浅拷贝的方法：\n首先要明确，对引用类型采用直接赋值，不是浅拷贝\n举个例子：\n```\nlet x = {\n    a: 1,\n    b: { z: 0 }\n};\nlet y = x\ny === x   // true，代表它们指向同一块空间\ny.a === x.a   // true\ny.a = 2\nx.a  // 2 x的值也发生的改变\ny.b === x.b   // true，代表它们指向同一块空间\nx.b.z = 100\ny.b.z     // 100\n```\n上述例子中，x对y的赋值操作不属于浅拷贝，浅拷贝对于a属性中的非引用类型应该开辟新的存储空间，即对`y.a = 2`的操作不应该影响到原对象x.a的值。\n\n![20190630101009.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190630101009.png)\n\n#### 如何算浅拷贝？\n```\nfunction shallowCopy(src) {\n  let dst = {};\n  for (var prop in src) {\n    if (src.hasOwnProperty(prop)) {\n      dst[prop] = src[prop];\n    }\n  }\n  return dst;\n}\nlet obj = { a:1, arr: [2,3] };\nlet shallowObj = shallowCopy(obj);\n```\n此时对于属性值是基本数据类型的会开辟新的内存空间，互不影响。对于引用类型的则是地址的拷贝。改变其中一个另一个也会改变。\n### 实现深拷贝的方法：\n\n- 递归操作：\n\n```\nfunction deepClone(obj){\n    let objClone = Array.isArray(obj) ? [] : {};\n    if(obj && typeof obj === \"object\"){\n        for(key in obj){\n            if(obj.hasOwnProperty(key)){\n                //判断ojb子元素是否为对象，如果是，递归复制\n                if(obj[key]&&typeof obj[key] ===\"object\"){\n                    objClone[key] = deepClone(obj[key]);\n                }else{\n                    //如果不是，简单复制\n                    objClone[key] = obj[key];\n                }\n            }\n        }\n    }\n    return objClone;\n}    \n```\n<!--more-->\n\n- 使用Json的stringyfy和pase方法：\n\n```\nfunction deepClone(obj){\n    let _obj = JSON.stringify(obj),\n        objClone = JSON.parse(_obj);\n    return objClone\n}    \nlet a=[0,1,[2,3],4],\n    b=deepClone(a);\na[0]=1;\na[2][0]=1;\nconsole.log(a,b);\n//a\n(4) [1, 1, Array(2), 4]\n0: 1\n1: 1\n2: (2) [1, 3]\n3: 4\nlength: 4\n__proto__: Array(0)\n//b\n(4) [0, 1, Array(2), 4]\n0: 0\n1: 1\n2: (2) [2, 3]\n3: 4\nlength: 4\n__proto__: Array(0)\n```\n- 使用Lodash的_.cloneDeep(value)\n\n  [lodash官方文档](https://lodash.com/docs/4.17.11#cloneDeep)\n\n### 关于slice()和contact()方法是不是深拷贝：\n对于数组，如果数组不存在嵌套，那么这两个方法确实能不影响原数组，实现'深拷贝'，但如果存在嵌套就会失效，所以不是真正的深拷贝，真正的深拷贝无论元素有多少层都会深度拷贝。\n\neg:\n~~~\nlet a=[0,1,[2,3],4];\nconst b=a.slice();\na[0]=1;\na[2][0]=1;\n\n//a\n(4) [1, 1, Array(2), 4]\n0: 1\n1: 1\n2: (2) [1, 3]\n3: 4\nlength: 4\n__proto__: Array(0)\n\n//b\n(4) [0, 1, Array(2), 4]\n0: 0\n1: 1\n2: (2) [1, 3]\n3: 4\nlength: 4\n__proto__: Array(0)\n\n~~~\n[参考链接](https://github.com/muwenzi/Program-Blog/issues/62)\n\n\n\n","slug":"JS中的深浅拷贝","published":1,"date":"2019-12-19T15:52:56.134Z","updated":"2019-12-19T15:52:56.134Z","_id":"ck4cwgnhm0009ckuk4gomyd91","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"如何区分JS的拷贝是深拷贝还是浅拷贝\"><a href=\"#如何区分JS的拷贝是深拷贝还是浅拷贝\" class=\"headerlink\" title=\"如何区分JS的拷贝是深拷贝还是浅拷贝\"></a>如何区分JS的拷贝是深拷贝还是浅拷贝</h3><blockquote>\n<p>浅拷贝:只对其第一层基础类型的属性进行复制开辟新空间，引用类型只存地址，指向同一块空间<br>深拷贝:则递归复制了所有层级，全部开辟新的空间，不会影响先前的对象</p>\n</blockquote>\n<h3 id=\"基本数据类型和引用数据类型\"><a href=\"#基本数据类型和引用数据类型\" class=\"headerlink\" title=\"基本数据类型和引用数据类型\"></a>基本数据类型和引用数据类型</h3><p>对于基本数据类型，变量的数据存放在栈中，数据复制后会开辟新的内存，两者互不影响。但是这不是深拷贝，深拷贝是针对引用类型来讲的。</p>\n<p>对于引用类型，数据保存在堆中，栈内存中定义的变量对应的是对堆内存的引用地址。引用类型的赋值操作，只是对引用地址的拷贝。其中一个的改变必然会影响到另一个。</p>\n<h3 id=\"实现浅拷贝的方法：\"><a href=\"#实现浅拷贝的方法：\" class=\"headerlink\" title=\"实现浅拷贝的方法：\"></a>实现浅拷贝的方法：</h3><p>首先要明确，对引用类型采用直接赋值，不是浅拷贝<br>举个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: &#123; z: 0 &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let y = x</span><br><span class=\"line\">y === x   // true，代表它们指向同一块空间</span><br><span class=\"line\">y.a === x.a   // true</span><br><span class=\"line\">y.a = 2</span><br><span class=\"line\">x.a  // 2 x的值也发生的改变</span><br><span class=\"line\">y.b === x.b   // true，代表它们指向同一块空间</span><br><span class=\"line\">x.b.z = 100</span><br><span class=\"line\">y.b.z     // 100</span><br></pre></td></tr></table></figure></p>\n<p>上述例子中，x对y的赋值操作不属于浅拷贝，浅拷贝对于a属性中的非引用类型应该开辟新的存储空间，即对<code>y.a = 2</code>的操作不应该影响到原对象x.a的值。</p>\n<p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190630101009.png\" alt=\"20190630101009.png\"></p>\n<h4 id=\"如何算浅拷贝？\"><a href=\"#如何算浅拷贝？\" class=\"headerlink\" title=\"如何算浅拷贝？\"></a>如何算浅拷贝？</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function shallowCopy(src) &#123;</span><br><span class=\"line\">  let dst = &#123;&#125;;</span><br><span class=\"line\">  for (var prop in src) &#123;</span><br><span class=\"line\">    if (src.hasOwnProperty(prop)) &#123;</span><br><span class=\"line\">      dst[prop] = src[prop];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return dst;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let obj = &#123; a:1, arr: [2,3] &#125;;</span><br><span class=\"line\">let shallowObj = shallowCopy(obj);</span><br></pre></td></tr></table></figure>\n<p>此时对于属性值是基本数据类型的会开辟新的内存空间，互不影响。对于引用类型的则是地址的拷贝。改变其中一个另一个也会改变。</p>\n<h3 id=\"实现深拷贝的方法：\"><a href=\"#实现深拷贝的方法：\" class=\"headerlink\" title=\"实现深拷贝的方法：\"></a>实现深拷贝的方法：</h3><ul>\n<li>递归操作：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(obj)&#123;</span><br><span class=\"line\">    let objClone = Array.isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">    if(obj &amp;&amp; typeof obj === &quot;object&quot;)&#123;</span><br><span class=\"line\">        for(key in obj)&#123;</span><br><span class=\"line\">            if(obj.hasOwnProperty(key))&#123;</span><br><span class=\"line\">                //判断ojb子元素是否为对象，如果是，递归复制</span><br><span class=\"line\">                if(obj[key]&amp;&amp;typeof obj[key] ===&quot;object&quot;)&#123;</span><br><span class=\"line\">                    objClone[key] = deepClone(obj[key]);</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    //如果不是，简单复制</span><br><span class=\"line\">                    objClone[key] = obj[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return objClone;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>使用Json的stringyfy和pase方法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(obj)&#123;</span><br><span class=\"line\">    let _obj = JSON.stringify(obj),</span><br><span class=\"line\">        objClone = JSON.parse(_obj);</span><br><span class=\"line\">    return objClone</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">let a=[0,1,[2,3],4],</span><br><span class=\"line\">    b=deepClone(a);</span><br><span class=\"line\">a[0]=1;</span><br><span class=\"line\">a[2][0]=1;</span><br><span class=\"line\">console.log(a,b);</span><br><span class=\"line\">//a</span><br><span class=\"line\">(4) [1, 1, Array(2), 4]</span><br><span class=\"line\">0: 1</span><br><span class=\"line\">1: 1</span><br><span class=\"line\">2: (2) [1, 3]</span><br><span class=\"line\">3: 4</span><br><span class=\"line\">length: 4</span><br><span class=\"line\">__proto__: Array(0)</span><br><span class=\"line\">//b</span><br><span class=\"line\">(4) [0, 1, Array(2), 4]</span><br><span class=\"line\">0: 0</span><br><span class=\"line\">1: 1</span><br><span class=\"line\">2: (2) [2, 3]</span><br><span class=\"line\">3: 4</span><br><span class=\"line\">length: 4</span><br><span class=\"line\">__proto__: Array(0)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用Lodash的_.cloneDeep(value)</p>\n<p><a href=\"https://lodash.com/docs/4.17.11#cloneDeep\" target=\"_blank\" rel=\"noopener\">lodash官方文档</a></p>\n</li>\n</ul>\n<h3 id=\"关于slice-和contact-方法是不是深拷贝：\"><a href=\"#关于slice-和contact-方法是不是深拷贝：\" class=\"headerlink\" title=\"关于slice()和contact()方法是不是深拷贝：\"></a>关于slice()和contact()方法是不是深拷贝：</h3><p>对于数组，如果数组不存在嵌套，那么这两个方法确实能不影响原数组，实现’深拷贝’，但如果存在嵌套就会失效，所以不是真正的深拷贝，真正的深拷贝无论元素有多少层都会深度拷贝。</p>\n<p>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a=[0,1,[2,3],4];</span><br><span class=\"line\">const b=a.slice();</span><br><span class=\"line\">a[0]=1;</span><br><span class=\"line\">a[2][0]=1;</span><br><span class=\"line\"></span><br><span class=\"line\">//a</span><br><span class=\"line\">(4) [1, 1, Array(2), 4]</span><br><span class=\"line\">0: 1</span><br><span class=\"line\">1: 1</span><br><span class=\"line\">2: (2) [1, 3]</span><br><span class=\"line\">3: 4</span><br><span class=\"line\">length: 4</span><br><span class=\"line\">__proto__: Array(0)</span><br><span class=\"line\"></span><br><span class=\"line\">//b</span><br><span class=\"line\">(4) [0, 1, Array(2), 4]</span><br><span class=\"line\">0: 0</span><br><span class=\"line\">1: 1</span><br><span class=\"line\">2: (2) [1, 3]</span><br><span class=\"line\">3: 4</span><br><span class=\"line\">length: 4</span><br><span class=\"line\">__proto__: Array(0)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/muwenzi/Program-Blog/issues/62\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"如何区分JS的拷贝是深拷贝还是浅拷贝\"><a href=\"#如何区分JS的拷贝是深拷贝还是浅拷贝\" class=\"headerlink\" title=\"如何区分JS的拷贝是深拷贝还是浅拷贝\"></a>如何区分JS的拷贝是深拷贝还是浅拷贝</h3><blockquote>\n<p>浅拷贝:只对其第一层基础类型的属性进行复制开辟新空间，引用类型只存地址，指向同一块空间<br>深拷贝:则递归复制了所有层级，全部开辟新的空间，不会影响先前的对象</p>\n</blockquote>\n<h3 id=\"基本数据类型和引用数据类型\"><a href=\"#基本数据类型和引用数据类型\" class=\"headerlink\" title=\"基本数据类型和引用数据类型\"></a>基本数据类型和引用数据类型</h3><p>对于基本数据类型，变量的数据存放在栈中，数据复制后会开辟新的内存，两者互不影响。但是这不是深拷贝，深拷贝是针对引用类型来讲的。</p>\n<p>对于引用类型，数据保存在堆中，栈内存中定义的变量对应的是对堆内存的引用地址。引用类型的赋值操作，只是对引用地址的拷贝。其中一个的改变必然会影响到另一个。</p>\n<h3 id=\"实现浅拷贝的方法：\"><a href=\"#实现浅拷贝的方法：\" class=\"headerlink\" title=\"实现浅拷贝的方法：\"></a>实现浅拷贝的方法：</h3><p>首先要明确，对引用类型采用直接赋值，不是浅拷贝<br>举个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: &#123; z: 0 &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let y = x</span><br><span class=\"line\">y === x   // true，代表它们指向同一块空间</span><br><span class=\"line\">y.a === x.a   // true</span><br><span class=\"line\">y.a = 2</span><br><span class=\"line\">x.a  // 2 x的值也发生的改变</span><br><span class=\"line\">y.b === x.b   // true，代表它们指向同一块空间</span><br><span class=\"line\">x.b.z = 100</span><br><span class=\"line\">y.b.z     // 100</span><br></pre></td></tr></table></figure></p>\n<p>上述例子中，x对y的赋值操作不属于浅拷贝，浅拷贝对于a属性中的非引用类型应该开辟新的存储空间，即对<code>y.a = 2</code>的操作不应该影响到原对象x.a的值。</p>\n<p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190630101009.png\" alt=\"20190630101009.png\"></p>\n<h4 id=\"如何算浅拷贝？\"><a href=\"#如何算浅拷贝？\" class=\"headerlink\" title=\"如何算浅拷贝？\"></a>如何算浅拷贝？</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function shallowCopy(src) &#123;</span><br><span class=\"line\">  let dst = &#123;&#125;;</span><br><span class=\"line\">  for (var prop in src) &#123;</span><br><span class=\"line\">    if (src.hasOwnProperty(prop)) &#123;</span><br><span class=\"line\">      dst[prop] = src[prop];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return dst;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let obj = &#123; a:1, arr: [2,3] &#125;;</span><br><span class=\"line\">let shallowObj = shallowCopy(obj);</span><br></pre></td></tr></table></figure>\n<p>此时对于属性值是基本数据类型的会开辟新的内存空间，互不影响。对于引用类型的则是地址的拷贝。改变其中一个另一个也会改变。</p>\n<h3 id=\"实现深拷贝的方法：\"><a href=\"#实现深拷贝的方法：\" class=\"headerlink\" title=\"实现深拷贝的方法：\"></a>实现深拷贝的方法：</h3><ul>\n<li>递归操作：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(obj)&#123;</span><br><span class=\"line\">    let objClone = Array.isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">    if(obj &amp;&amp; typeof obj === &quot;object&quot;)&#123;</span><br><span class=\"line\">        for(key in obj)&#123;</span><br><span class=\"line\">            if(obj.hasOwnProperty(key))&#123;</span><br><span class=\"line\">                //判断ojb子元素是否为对象，如果是，递归复制</span><br><span class=\"line\">                if(obj[key]&amp;&amp;typeof obj[key] ===&quot;object&quot;)&#123;</span><br><span class=\"line\">                    objClone[key] = deepClone(obj[key]);</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    //如果不是，简单复制</span><br><span class=\"line\">                    objClone[key] = obj[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return objClone;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>使用Json的stringyfy和pase方法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(obj)&#123;</span><br><span class=\"line\">    let _obj = JSON.stringify(obj),</span><br><span class=\"line\">        objClone = JSON.parse(_obj);</span><br><span class=\"line\">    return objClone</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">let a=[0,1,[2,3],4],</span><br><span class=\"line\">    b=deepClone(a);</span><br><span class=\"line\">a[0]=1;</span><br><span class=\"line\">a[2][0]=1;</span><br><span class=\"line\">console.log(a,b);</span><br><span class=\"line\">//a</span><br><span class=\"line\">(4) [1, 1, Array(2), 4]</span><br><span class=\"line\">0: 1</span><br><span class=\"line\">1: 1</span><br><span class=\"line\">2: (2) [1, 3]</span><br><span class=\"line\">3: 4</span><br><span class=\"line\">length: 4</span><br><span class=\"line\">__proto__: Array(0)</span><br><span class=\"line\">//b</span><br><span class=\"line\">(4) [0, 1, Array(2), 4]</span><br><span class=\"line\">0: 0</span><br><span class=\"line\">1: 1</span><br><span class=\"line\">2: (2) [2, 3]</span><br><span class=\"line\">3: 4</span><br><span class=\"line\">length: 4</span><br><span class=\"line\">__proto__: Array(0)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用Lodash的_.cloneDeep(value)</p>\n<p><a href=\"https://lodash.com/docs/4.17.11#cloneDeep\" target=\"_blank\" rel=\"noopener\">lodash官方文档</a></p>\n</li>\n</ul>\n<h3 id=\"关于slice-和contact-方法是不是深拷贝：\"><a href=\"#关于slice-和contact-方法是不是深拷贝：\" class=\"headerlink\" title=\"关于slice()和contact()方法是不是深拷贝：\"></a>关于slice()和contact()方法是不是深拷贝：</h3><p>对于数组，如果数组不存在嵌套，那么这两个方法确实能不影响原数组，实现’深拷贝’，但如果存在嵌套就会失效，所以不是真正的深拷贝，真正的深拷贝无论元素有多少层都会深度拷贝。</p>\n<p>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a=[0,1,[2,3],4];</span><br><span class=\"line\">const b=a.slice();</span><br><span class=\"line\">a[0]=1;</span><br><span class=\"line\">a[2][0]=1;</span><br><span class=\"line\"></span><br><span class=\"line\">//a</span><br><span class=\"line\">(4) [1, 1, Array(2), 4]</span><br><span class=\"line\">0: 1</span><br><span class=\"line\">1: 1</span><br><span class=\"line\">2: (2) [1, 3]</span><br><span class=\"line\">3: 4</span><br><span class=\"line\">length: 4</span><br><span class=\"line\">__proto__: Array(0)</span><br><span class=\"line\"></span><br><span class=\"line\">//b</span><br><span class=\"line\">(4) [0, 1, Array(2), 4]</span><br><span class=\"line\">0: 0</span><br><span class=\"line\">1: 1</span><br><span class=\"line\">2: (2) [1, 3]</span><br><span class=\"line\">3: 4</span><br><span class=\"line\">length: 4</span><br><span class=\"line\">__proto__: Array(0)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/muwenzi/Program-Blog/issues/62\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>"},{"title":"js交换两个变量","toc":true,"_content":"## 前言\n这个题目是一道大厂的面试题(我不喜欢这个题)，要求用尽量多的方式实现两个变量互换，此处做个总结。\n\n## 推荐写法\n### 中间值法\n```js\nvar t = a;\na = b;\nb = t\n```\n虽然这个写法比较累赘，但是这种写法是最易读的，无论JS开发人员，还是其它语言的使用者，都可以看懂。\n\n### ES6结构赋值\n```js\n  let a = \"one\",b = \"two\";\n  [a, b] = [b, a];\n  console.log(a, b);//two one\n```\n利用ES6语法实现两值交换相比上一种写法简单好多，也是我比较喜欢的一种写法，包括在React hook中的useState也是这种写法。\n```js\n[count, setCount] = useState(0)\n```\n<!--more-->\n## 骚操作\n### 公式法：\n```js\na=[b,b=a][0]\n```\n这种写法，现将b的值存在了数组的第一个位置，然后让在数组第二个位置做了b =a的赋值操作，让b拿到了a的值，再通过取数组的第一和值给a,让a拿到之前b的值。\n\n我不喜欢这个写法，它虽然让人看着简单，但可读性太差。\n\n### 异或法(number)\n```js\na = a^b;\nb = a^b;\na = a^b;\n```\n因为a = a^b，所以b = a^b = a^(b^b) = a\n第三步：因为a = a^b，由上步b = a，所以a = a^b = (a^b) ^ a = (a^a)^b = b\n\n其实这个很简单，利用异或的方式来实现a和b的交换\n\n### 和差法(number)\n```js\na = a+b;\nb = a - b;\na = a - b;\n```\n第二步之前好理解，第二步的时候，b = a; 第三步 a = a -b = (a+b) -a = b\n\n## 小结\n写法有很多，但是可读性第一，代码量第二，项目中最好不要使用骚操作。假如代码写错了，同事review代码可以帮我们看出来，避免不必要的bug出现。","source":"_posts/JS互换两个变量.md","raw":"---\ntitle: js交换两个变量\ntags: \n- JS\n- 变量互换\ntoc: true\n---\n## 前言\n这个题目是一道大厂的面试题(我不喜欢这个题)，要求用尽量多的方式实现两个变量互换，此处做个总结。\n\n## 推荐写法\n### 中间值法\n```js\nvar t = a;\na = b;\nb = t\n```\n虽然这个写法比较累赘，但是这种写法是最易读的，无论JS开发人员，还是其它语言的使用者，都可以看懂。\n\n### ES6结构赋值\n```js\n  let a = \"one\",b = \"two\";\n  [a, b] = [b, a];\n  console.log(a, b);//two one\n```\n利用ES6语法实现两值交换相比上一种写法简单好多，也是我比较喜欢的一种写法，包括在React hook中的useState也是这种写法。\n```js\n[count, setCount] = useState(0)\n```\n<!--more-->\n## 骚操作\n### 公式法：\n```js\na=[b,b=a][0]\n```\n这种写法，现将b的值存在了数组的第一个位置，然后让在数组第二个位置做了b =a的赋值操作，让b拿到了a的值，再通过取数组的第一和值给a,让a拿到之前b的值。\n\n我不喜欢这个写法，它虽然让人看着简单，但可读性太差。\n\n### 异或法(number)\n```js\na = a^b;\nb = a^b;\na = a^b;\n```\n因为a = a^b，所以b = a^b = a^(b^b) = a\n第三步：因为a = a^b，由上步b = a，所以a = a^b = (a^b) ^ a = (a^a)^b = b\n\n其实这个很简单，利用异或的方式来实现a和b的交换\n\n### 和差法(number)\n```js\na = a+b;\nb = a - b;\na = a - b;\n```\n第二步之前好理解，第二步的时候，b = a; 第三步 a = a -b = (a+b) -a = b\n\n## 小结\n写法有很多，但是可读性第一，代码量第二，项目中最好不要使用骚操作。假如代码写错了，同事review代码可以帮我们看出来，避免不必要的bug出现。","slug":"JS互换两个变量","published":1,"date":"2019-12-19T15:52:56.134Z","updated":"2019-12-19T15:52:56.134Z","_id":"ck4cwgnho000bckukityf2jka","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个题目是一道大厂的面试题(我不喜欢这个题)，要求用尽量多的方式实现两个变量互换，此处做个总结。</p>\n<h2 id=\"推荐写法\"><a href=\"#推荐写法\" class=\"headerlink\" title=\"推荐写法\"></a>推荐写法</h2><h3 id=\"中间值法\"><a href=\"#中间值法\" class=\"headerlink\" title=\"中间值法\"></a>中间值法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t = a;</span><br><span class=\"line\">a = b;</span><br><span class=\"line\">b = t</span><br></pre></td></tr></table></figure>\n<p>虽然这个写法比较累赘，但是这种写法是最易读的，无论JS开发人员，还是其它语言的使用者，都可以看懂。</p>\n<h3 id=\"ES6结构赋值\"><a href=\"#ES6结构赋值\" class=\"headerlink\" title=\"ES6结构赋值\"></a>ES6结构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">\"one\"</span>,b = <span class=\"string\">\"two\"</span>;</span><br><span class=\"line\">[a, b] = [b, a];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b);<span class=\"comment\">//two one</span></span><br></pre></td></tr></table></figure>\n<p>利用ES6语法实现两值交换相比上一种写法简单好多，也是我比较喜欢的一种写法，包括在React hook中的useState也是这种写法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[count, setCount] = useState(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"骚操作\"><a href=\"#骚操作\" class=\"headerlink\" title=\"骚操作\"></a>骚操作</h2><h3 id=\"公式法：\"><a href=\"#公式法：\" class=\"headerlink\" title=\"公式法：\"></a>公式法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[b,b=a][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>这种写法，现将b的值存在了数组的第一个位置，然后让在数组第二个位置做了b =a的赋值操作，让b拿到了a的值，再通过取数组的第一和值给a,让a拿到之前b的值。</p>\n<p>我不喜欢这个写法，它虽然让人看着简单，但可读性太差。</p>\n<h3 id=\"异或法-number\"><a href=\"#异或法-number\" class=\"headerlink\" title=\"异或法(number)\"></a>异或法(number)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a^b;</span><br><span class=\"line\">b = a^b;</span><br><span class=\"line\">a = a^b;</span><br></pre></td></tr></table></figure>\n<p>因为a = a^b，所以b = a^b = a^(b^b) = a<br>第三步：因为a = a^b，由上步b = a，所以a = a^b = (a^b) ^ a = (a^a)^b = b</p>\n<p>其实这个很简单，利用异或的方式来实现a和b的交换</p>\n<h3 id=\"和差法-number\"><a href=\"#和差法-number\" class=\"headerlink\" title=\"和差法(number)\"></a>和差法(number)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a+b;</span><br><span class=\"line\">b = a - b;</span><br><span class=\"line\">a = a - b;</span><br></pre></td></tr></table></figure>\n<p>第二步之前好理解，第二步的时候，b = a; 第三步 a = a -b = (a+b) -a = b</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>写法有很多，但是可读性第一，代码量第二，项目中最好不要使用骚操作。假如代码写错了，同事review代码可以帮我们看出来，避免不必要的bug出现。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个题目是一道大厂的面试题(我不喜欢这个题)，要求用尽量多的方式实现两个变量互换，此处做个总结。</p>\n<h2 id=\"推荐写法\"><a href=\"#推荐写法\" class=\"headerlink\" title=\"推荐写法\"></a>推荐写法</h2><h3 id=\"中间值法\"><a href=\"#中间值法\" class=\"headerlink\" title=\"中间值法\"></a>中间值法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t = a;</span><br><span class=\"line\">a = b;</span><br><span class=\"line\">b = t</span><br></pre></td></tr></table></figure>\n<p>虽然这个写法比较累赘，但是这种写法是最易读的，无论JS开发人员，还是其它语言的使用者，都可以看懂。</p>\n<h3 id=\"ES6结构赋值\"><a href=\"#ES6结构赋值\" class=\"headerlink\" title=\"ES6结构赋值\"></a>ES6结构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">\"one\"</span>,b = <span class=\"string\">\"two\"</span>;</span><br><span class=\"line\">[a, b] = [b, a];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b);<span class=\"comment\">//two one</span></span><br></pre></td></tr></table></figure>\n<p>利用ES6语法实现两值交换相比上一种写法简单好多，也是我比较喜欢的一种写法，包括在React hook中的useState也是这种写法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[count, setCount] = useState(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"骚操作\"><a href=\"#骚操作\" class=\"headerlink\" title=\"骚操作\"></a>骚操作</h2><h3 id=\"公式法：\"><a href=\"#公式法：\" class=\"headerlink\" title=\"公式法：\"></a>公式法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[b,b=a][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>这种写法，现将b的值存在了数组的第一个位置，然后让在数组第二个位置做了b =a的赋值操作，让b拿到了a的值，再通过取数组的第一和值给a,让a拿到之前b的值。</p>\n<p>我不喜欢这个写法，它虽然让人看着简单，但可读性太差。</p>\n<h3 id=\"异或法-number\"><a href=\"#异或法-number\" class=\"headerlink\" title=\"异或法(number)\"></a>异或法(number)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a^b;</span><br><span class=\"line\">b = a^b;</span><br><span class=\"line\">a = a^b;</span><br></pre></td></tr></table></figure>\n<p>因为a = a^b，所以b = a^b = a^(b^b) = a<br>第三步：因为a = a^b，由上步b = a，所以a = a^b = (a^b) ^ a = (a^a)^b = b</p>\n<p>其实这个很简单，利用异或的方式来实现a和b的交换</p>\n<h3 id=\"和差法-number\"><a href=\"#和差法-number\" class=\"headerlink\" title=\"和差法(number)\"></a>和差法(number)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a+b;</span><br><span class=\"line\">b = a - b;</span><br><span class=\"line\">a = a - b;</span><br></pre></td></tr></table></figure>\n<p>第二步之前好理解，第二步的时候，b = a; 第三步 a = a -b = (a+b) -a = b</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>写法有很多，但是可读性第一，代码量第二，项目中最好不要使用骚操作。假如代码写错了，同事review代码可以帮我们看出来，避免不必要的bug出现。</p>"},{"title":"Math对象常用方法","toc":true,"_content":"## 1.Math.abs(x);\n传入一个非数字形式的字符串或者 undefined/empty 变量，将返回 NaN。传入 null 将返回 0。\n```\nMath.abs('-1');     // 1\nMath.abs(-2);       // 2\nMath.abs(null);     // 0\nMath.abs(\"string\"); // NaN\nMath.abs();         // NaN\n```\n## 2.Math.ceil(x):\n函数返回大于或等于一个给定数字的最小整数。\n<!--more-->\n## 3.Math.max(value1[,value2, ...])\n```\n一组数的最大值\nMath.max(10, 20); \n\n//数组中的最大值\nvar arr = [1, 2, 3];\nvar max = Math.max(...arr);\n```\n研究了一下求数组最大值的原理\n```\nvar arr = [1, 2, 3];\nMath.max.apply(Math, arr);\n\n// => Math.max(1,2,3)\n```\n\n## 4.Math.pow(base, exponent) \nbase：基数\n\nexponent：指数\n## 5.Math.random() \n[0,1)内的随机数，没有参数\n```\n//求两个整数之间的随机整数\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //不含最大值，含最小值\n}\n//含最大值，含最小值 \nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min; //含最大值，含最小值 \n}\n```\n## 6.Math.round(num) \n四舍五入，当num为负数时，小数大于0.5则舍入到绝对值更大的数，等于0.5则舍入相邻临近正无穷的数\n```\nMath.round(-1.5) //-1\nMath.round(-1.4) //-1\nMath.round(-1.6) //-2\n```\n## 7.Math.sqrt(num)\n返回数的平方根","source":"_posts/Math.md","raw":"---\ntitle: Math对象常用方法\ntoc: true\ntags: \n- JS\n- Math\n---\n## 1.Math.abs(x);\n传入一个非数字形式的字符串或者 undefined/empty 变量，将返回 NaN。传入 null 将返回 0。\n```\nMath.abs('-1');     // 1\nMath.abs(-2);       // 2\nMath.abs(null);     // 0\nMath.abs(\"string\"); // NaN\nMath.abs();         // NaN\n```\n## 2.Math.ceil(x):\n函数返回大于或等于一个给定数字的最小整数。\n<!--more-->\n## 3.Math.max(value1[,value2, ...])\n```\n一组数的最大值\nMath.max(10, 20); \n\n//数组中的最大值\nvar arr = [1, 2, 3];\nvar max = Math.max(...arr);\n```\n研究了一下求数组最大值的原理\n```\nvar arr = [1, 2, 3];\nMath.max.apply(Math, arr);\n\n// => Math.max(1,2,3)\n```\n\n## 4.Math.pow(base, exponent) \nbase：基数\n\nexponent：指数\n## 5.Math.random() \n[0,1)内的随机数，没有参数\n```\n//求两个整数之间的随机整数\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //不含最大值，含最小值\n}\n//含最大值，含最小值 \nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min; //含最大值，含最小值 \n}\n```\n## 6.Math.round(num) \n四舍五入，当num为负数时，小数大于0.5则舍入到绝对值更大的数，等于0.5则舍入相邻临近正无穷的数\n```\nMath.round(-1.5) //-1\nMath.round(-1.4) //-1\nMath.round(-1.6) //-2\n```\n## 7.Math.sqrt(num)\n返回数的平方根","slug":"Math","published":1,"date":"2019-12-19T15:52:56.135Z","updated":"2019-12-19T15:52:56.135Z","_id":"ck4cwgnhq000dckuk6vgxua7t","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-Math-abs-x\"><a href=\"#1-Math-abs-x\" class=\"headerlink\" title=\"1.Math.abs(x);\"></a>1.Math.abs(x);</h2><p>传入一个非数字形式的字符串或者 undefined/empty 变量，将返回 NaN。传入 null 将返回 0。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.abs(&apos;-1&apos;);     // 1</span><br><span class=\"line\">Math.abs(-2);       // 2</span><br><span class=\"line\">Math.abs(null);     // 0</span><br><span class=\"line\">Math.abs(&quot;string&quot;); // NaN</span><br><span class=\"line\">Math.abs();         // NaN</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-Math-ceil-x\"><a href=\"#2-Math-ceil-x\" class=\"headerlink\" title=\"2.Math.ceil(x):\"></a>2.Math.ceil(x):</h2><p>函数返回大于或等于一个给定数字的最小整数。<br><a id=\"more\"></a></p>\n<h2 id=\"3-Math-max-value1-value2-…\"><a href=\"#3-Math-max-value1-value2-…\" class=\"headerlink\" title=\"3.Math.max(value1[,value2, …])\"></a>3.Math.max(value1[,value2, …])</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一组数的最大值</span><br><span class=\"line\">Math.max(10, 20); </span><br><span class=\"line\"></span><br><span class=\"line\">//数组中的最大值</span><br><span class=\"line\">var arr = [1, 2, 3];</span><br><span class=\"line\">var max = Math.max(...arr);</span><br></pre></td></tr></table></figure>\n<p>研究了一下求数组最大值的原理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3];</span><br><span class=\"line\">Math.max.apply(Math, arr);</span><br><span class=\"line\"></span><br><span class=\"line\">// =&gt; Math.max(1,2,3)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-Math-pow-base-exponent\"><a href=\"#4-Math-pow-base-exponent\" class=\"headerlink\" title=\"4.Math.pow(base, exponent)\"></a>4.Math.pow(base, exponent)</h2><p>base：基数</p>\n<p>exponent：指数</p>\n<h2 id=\"5-Math-random\"><a href=\"#5-Math-random\" class=\"headerlink\" title=\"5.Math.random()\"></a>5.Math.random()</h2><p>[0,1)内的随机数，没有参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//求两个整数之间的随机整数</span><br><span class=\"line\">function getRandomInt(min, max) &#123;</span><br><span class=\"line\">  min = Math.ceil(min);</span><br><span class=\"line\">  max = Math.floor(max);</span><br><span class=\"line\">  return Math.floor(Math.random() * (max - min)) + min; //不含最大值，含最小值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//含最大值，含最小值 </span><br><span class=\"line\">function getRandomIntInclusive(min, max) &#123;</span><br><span class=\"line\">  min = Math.ceil(min);</span><br><span class=\"line\">  max = Math.floor(max);</span><br><span class=\"line\">  return Math.floor(Math.random() * (max - min + 1)) + min; //含最大值，含最小值 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-Math-round-num\"><a href=\"#6-Math-round-num\" class=\"headerlink\" title=\"6.Math.round(num)\"></a>6.Math.round(num)</h2><p>四舍五入，当num为负数时，小数大于0.5则舍入到绝对值更大的数，等于0.5则舍入相邻临近正无穷的数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.round(-1.5) //-1</span><br><span class=\"line\">Math.round(-1.4) //-1</span><br><span class=\"line\">Math.round(-1.6) //-2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-Math-sqrt-num\"><a href=\"#7-Math-sqrt-num\" class=\"headerlink\" title=\"7.Math.sqrt(num)\"></a>7.Math.sqrt(num)</h2><p>返回数的平方根</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-Math-abs-x\"><a href=\"#1-Math-abs-x\" class=\"headerlink\" title=\"1.Math.abs(x);\"></a>1.Math.abs(x);</h2><p>传入一个非数字形式的字符串或者 undefined/empty 变量，将返回 NaN。传入 null 将返回 0。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.abs(&apos;-1&apos;);     // 1</span><br><span class=\"line\">Math.abs(-2);       // 2</span><br><span class=\"line\">Math.abs(null);     // 0</span><br><span class=\"line\">Math.abs(&quot;string&quot;); // NaN</span><br><span class=\"line\">Math.abs();         // NaN</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-Math-ceil-x\"><a href=\"#2-Math-ceil-x\" class=\"headerlink\" title=\"2.Math.ceil(x):\"></a>2.Math.ceil(x):</h2><p>函数返回大于或等于一个给定数字的最小整数。<br>","more":"</p>\n<h2 id=\"3-Math-max-value1-value2-…\"><a href=\"#3-Math-max-value1-value2-…\" class=\"headerlink\" title=\"3.Math.max(value1[,value2, …])\"></a>3.Math.max(value1[,value2, …])</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一组数的最大值</span><br><span class=\"line\">Math.max(10, 20); </span><br><span class=\"line\"></span><br><span class=\"line\">//数组中的最大值</span><br><span class=\"line\">var arr = [1, 2, 3];</span><br><span class=\"line\">var max = Math.max(...arr);</span><br></pre></td></tr></table></figure>\n<p>研究了一下求数组最大值的原理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3];</span><br><span class=\"line\">Math.max.apply(Math, arr);</span><br><span class=\"line\"></span><br><span class=\"line\">// =&gt; Math.max(1,2,3)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-Math-pow-base-exponent\"><a href=\"#4-Math-pow-base-exponent\" class=\"headerlink\" title=\"4.Math.pow(base, exponent)\"></a>4.Math.pow(base, exponent)</h2><p>base：基数</p>\n<p>exponent：指数</p>\n<h2 id=\"5-Math-random\"><a href=\"#5-Math-random\" class=\"headerlink\" title=\"5.Math.random()\"></a>5.Math.random()</h2><p>[0,1)内的随机数，没有参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//求两个整数之间的随机整数</span><br><span class=\"line\">function getRandomInt(min, max) &#123;</span><br><span class=\"line\">  min = Math.ceil(min);</span><br><span class=\"line\">  max = Math.floor(max);</span><br><span class=\"line\">  return Math.floor(Math.random() * (max - min)) + min; //不含最大值，含最小值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//含最大值，含最小值 </span><br><span class=\"line\">function getRandomIntInclusive(min, max) &#123;</span><br><span class=\"line\">  min = Math.ceil(min);</span><br><span class=\"line\">  max = Math.floor(max);</span><br><span class=\"line\">  return Math.floor(Math.random() * (max - min + 1)) + min; //含最大值，含最小值 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-Math-round-num\"><a href=\"#6-Math-round-num\" class=\"headerlink\" title=\"6.Math.round(num)\"></a>6.Math.round(num)</h2><p>四舍五入，当num为负数时，小数大于0.5则舍入到绝对值更大的数，等于0.5则舍入相邻临近正无穷的数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.round(-1.5) //-1</span><br><span class=\"line\">Math.round(-1.4) //-1</span><br><span class=\"line\">Math.round(-1.6) //-2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-Math-sqrt-num\"><a href=\"#7-Math-sqrt-num\" class=\"headerlink\" title=\"7.Math.sqrt(num)\"></a>7.Math.sqrt(num)</h2><p>返回数的平方根</p>"},{"title":"DOMContentLoaded和load","_content":"\n## DOMContentLoaded和load\n\n- 当初始的 HTML 文档被完全加载和解析完成之后，**DOMContentLoaded 事件**被触发，而无需等待样式表、图像和子框架的完成加载。\n\n- **load事件**，当整个页面加载后会触发该事件，包括所有相关资源，如样式表、图像。\n\n在下图中，在控制台中展示了DOMContentLoaded、load的执行时间，其中蓝色线代表的是DOMContentLoaded，红色的线代表load的时间。\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/L5hJR0.png)\n<!--more-->\n通过这个[链接](https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html)，可以直观感受下两者的不同。\n<!--more-->\n## 两者的意义\n\n对于load来说，它代表了访问页面所需要的所有资源已经全部加载完毕。\n\n但是如果拿load事件来衡量网页加载速度其实并不准确，因为我们访问网页时可能并不需要文档的所有信息。打个比方，对于官方文档来说，你所需要关注的可能只有文档的文字是否已经加载完毕，并不需要等待页面上广告和图片的加载。而DOMContentLoaded则是来衡量网页从白屏到出现内容所需要的时间。\n\n## JS脚本与DOMContentLoaded\n\nDOMContentLoaded事件的触发代表**HTML文档被加载和解析完成**，由[页面渲染](https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/page-rendering)这一节可知，JS脚本的加载、解析和执行会会影响DOM树的构建，那么两者之间到底是什么关系呢？本节将对两者的关系进行详细的介绍。\n\n## 1. JS脚本都在CSS引入前\n\n如果CSS的引入都在JS脚本后，DOMContentLoaded事件的触发不需要等到css加载完毕。\n\n测试代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>JS脚本都在CSS引入前</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        console.log('DOMContentLoaded');\n      })\n    </script>\n    <script>\n      console.log('hello world');\n    </script>\n\n    <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" rel=\"stylesheet\">\n\n  </head>\n  <body>\n  </body>\n</html>\n```\n测试截图：\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/2ysZtE.png)\n\n## 2. 存在JS脚本在CSS引入后\n\n如果存在JS脚本在CSS引入后，那么该脚本的执行必须等到CSSOM树构建完才能执行，而DOM树的构建会因为js脚本加载或执行而暂停，直到脚本执行完，才会继续构建DOM树。所以DOMContentLoaded事件的触发要等待CSSOM构建完后触发。\n\n关于GUI渲染线程与JS线程之间的关系可以参考：[浏览器内核](https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine)\n\n测试代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>JS脚本都在CSS引入前</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        console.log('DOMContentLoaded');\n      })\n    </script>\n    <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n  </body>\n  <script>\n    console.log('hello world');\n  </script>\n</html>\n```\n\n测试截图：\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/cdZQTk.png)\n\n## async和defer与DOMContentLoaded\n\n由[async和defer](https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer)这一节可知，当外联的script添加了async或defer时，会影响页面DOM树的构建。那么这两个属性和DOMContentLoaded是什么关系呢？\n\n### 1. async和DOMContentLoaded\n\n对于设置了async属性的外链JS脚本，DOMContentLoaded事件的触发无需等待样式表加载，当DOM构建完成后就可以触发。\n\n由[async和defer](https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer)中可知，设置async的脚本加载不影响DOM的构建，执行的时候会影响。也就是说如果DOM的构建快于JS脚本的加载速度，那么DOMContentLoaded和外联脚本无关。如果DOM构建的速度慢于JS脚本的加载时间，那脚本的执行会影响DOMContentLoaded的触发时间。\n\n测试脚本：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>css阻塞</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        console.log('DOMContentLoaded');\n      })\n    </script>\n    <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js\" async></script>\n  </head>\n  <body>\n  </body>\n</html>\n\n```\n测试截图：\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/bh7fCd.png)\n\n### 2. defer和DOMContentLoaded\n> defer 这个布尔属性被设定用来通知浏览器该脚本将在文档完成解析后，触发 DOMContentLoaded 事件前执行\n\n从[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script)上可以看出,当defer对应的脚本执行完成且DOM构建完成后，DOMContentLoaded事件触发。\n\n测试代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>css阻塞</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        console.log('DOMContentLoaded');\n      })\n    </script>\n    <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js\" defer></script>\n  </head>\n  <body>\n  </body>\n</html>\n```\n\n测试截图：\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/uY4AEb.png)\n\n## 参考链接\n\n[参考链接1](https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-0)\n\n[参考链接2](https://zhuanlan.zhihu.com/p/25876048)\n","source":"_posts/DOMContentLoaded.md","raw":"---\ntitle: DOMContentLoaded和load\ntags: \n- Web\n- 页面渲染\n- DOMContentLoaded\n- load\n---\n\n## DOMContentLoaded和load\n\n- 当初始的 HTML 文档被完全加载和解析完成之后，**DOMContentLoaded 事件**被触发，而无需等待样式表、图像和子框架的完成加载。\n\n- **load事件**，当整个页面加载后会触发该事件，包括所有相关资源，如样式表、图像。\n\n在下图中，在控制台中展示了DOMContentLoaded、load的执行时间，其中蓝色线代表的是DOMContentLoaded，红色的线代表load的时间。\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/L5hJR0.png)\n<!--more-->\n通过这个[链接](https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html)，可以直观感受下两者的不同。\n<!--more-->\n## 两者的意义\n\n对于load来说，它代表了访问页面所需要的所有资源已经全部加载完毕。\n\n但是如果拿load事件来衡量网页加载速度其实并不准确，因为我们访问网页时可能并不需要文档的所有信息。打个比方，对于官方文档来说，你所需要关注的可能只有文档的文字是否已经加载完毕，并不需要等待页面上广告和图片的加载。而DOMContentLoaded则是来衡量网页从白屏到出现内容所需要的时间。\n\n## JS脚本与DOMContentLoaded\n\nDOMContentLoaded事件的触发代表**HTML文档被加载和解析完成**，由[页面渲染](https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/page-rendering)这一节可知，JS脚本的加载、解析和执行会会影响DOM树的构建，那么两者之间到底是什么关系呢？本节将对两者的关系进行详细的介绍。\n\n## 1. JS脚本都在CSS引入前\n\n如果CSS的引入都在JS脚本后，DOMContentLoaded事件的触发不需要等到css加载完毕。\n\n测试代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>JS脚本都在CSS引入前</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        console.log('DOMContentLoaded');\n      })\n    </script>\n    <script>\n      console.log('hello world');\n    </script>\n\n    <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" rel=\"stylesheet\">\n\n  </head>\n  <body>\n  </body>\n</html>\n```\n测试截图：\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/2ysZtE.png)\n\n## 2. 存在JS脚本在CSS引入后\n\n如果存在JS脚本在CSS引入后，那么该脚本的执行必须等到CSSOM树构建完才能执行，而DOM树的构建会因为js脚本加载或执行而暂停，直到脚本执行完，才会继续构建DOM树。所以DOMContentLoaded事件的触发要等待CSSOM构建完后触发。\n\n关于GUI渲染线程与JS线程之间的关系可以参考：[浏览器内核](https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine)\n\n测试代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>JS脚本都在CSS引入前</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        console.log('DOMContentLoaded');\n      })\n    </script>\n    <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n  </body>\n  <script>\n    console.log('hello world');\n  </script>\n</html>\n```\n\n测试截图：\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/cdZQTk.png)\n\n## async和defer与DOMContentLoaded\n\n由[async和defer](https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer)这一节可知，当外联的script添加了async或defer时，会影响页面DOM树的构建。那么这两个属性和DOMContentLoaded是什么关系呢？\n\n### 1. async和DOMContentLoaded\n\n对于设置了async属性的外链JS脚本，DOMContentLoaded事件的触发无需等待样式表加载，当DOM构建完成后就可以触发。\n\n由[async和defer](https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer)中可知，设置async的脚本加载不影响DOM的构建，执行的时候会影响。也就是说如果DOM的构建快于JS脚本的加载速度，那么DOMContentLoaded和外联脚本无关。如果DOM构建的速度慢于JS脚本的加载时间，那脚本的执行会影响DOMContentLoaded的触发时间。\n\n测试脚本：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>css阻塞</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        console.log('DOMContentLoaded');\n      })\n    </script>\n    <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js\" async></script>\n  </head>\n  <body>\n  </body>\n</html>\n\n```\n测试截图：\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/bh7fCd.png)\n\n### 2. defer和DOMContentLoaded\n> defer 这个布尔属性被设定用来通知浏览器该脚本将在文档完成解析后，触发 DOMContentLoaded 事件前执行\n\n从[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script)上可以看出,当defer对应的脚本执行完成且DOM构建完成后，DOMContentLoaded事件触发。\n\n测试代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>css阻塞</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        console.log('DOMContentLoaded');\n      })\n    </script>\n    <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js\" defer></script>\n  </head>\n  <body>\n  </body>\n</html>\n```\n\n测试截图：\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/uY4AEb.png)\n\n## 参考链接\n\n[参考链接1](https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-0)\n\n[参考链接2](https://zhuanlan.zhihu.com/p/25876048)\n","slug":"DOMContentLoaded","published":1,"date":"2019-12-19T15:52:56.133Z","updated":"2019-12-19T15:52:56.133Z","_id":"ck4cwgnhr000gckuka5cutydo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"DOMContentLoaded和load\"><a href=\"#DOMContentLoaded和load\" class=\"headerlink\" title=\"DOMContentLoaded和load\"></a>DOMContentLoaded和load</h2><ul>\n<li><p>当初始的 HTML 文档被完全加载和解析完成之后，<strong>DOMContentLoaded 事件</strong>被触发，而无需等待样式表、图像和子框架的完成加载。</p>\n</li>\n<li><p><strong>load事件</strong>，当整个页面加载后会触发该事件，包括所有相关资源，如样式表、图像。</p>\n</li>\n</ul>\n<p>在下图中，在控制台中展示了DOMContentLoaded、load的执行时间，其中蓝色线代表的是DOMContentLoaded，红色的线代表load的时间。</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/L5hJR0.png\" alt><br><a id=\"more\"></a><br>通过这个<a href=\"https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html\" target=\"_blank\" rel=\"noopener\">链接</a>，可以直观感受下两者的不同。<br><!--more--></p>\n<h2 id=\"两者的意义\"><a href=\"#两者的意义\" class=\"headerlink\" title=\"两者的意义\"></a>两者的意义</h2><p>对于load来说，它代表了访问页面所需要的所有资源已经全部加载完毕。</p>\n<p>但是如果拿load事件来衡量网页加载速度其实并不准确，因为我们访问网页时可能并不需要文档的所有信息。打个比方，对于官方文档来说，你所需要关注的可能只有文档的文字是否已经加载完毕，并不需要等待页面上广告和图片的加载。而DOMContentLoaded则是来衡量网页从白屏到出现内容所需要的时间。</p>\n<h2 id=\"JS脚本与DOMContentLoaded\"><a href=\"#JS脚本与DOMContentLoaded\" class=\"headerlink\" title=\"JS脚本与DOMContentLoaded\"></a>JS脚本与DOMContentLoaded</h2><p>DOMContentLoaded事件的触发代表<strong>HTML文档被加载和解析完成</strong>，由<a href=\"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/page-rendering\" target=\"_blank\" rel=\"noopener\">页面渲染</a>这一节可知，JS脚本的加载、解析和执行会会影响DOM树的构建，那么两者之间到底是什么关系呢？本节将对两者的关系进行详细的介绍。</p>\n<h2 id=\"1-JS脚本都在CSS引入前\"><a href=\"#1-JS脚本都在CSS引入前\" class=\"headerlink\" title=\"1. JS脚本都在CSS引入前\"></a>1. JS脚本都在CSS引入前</h2><p>如果CSS的引入都在JS脚本后，DOMContentLoaded事件的触发不需要等到css加载完毕。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;JS脚本都在CSS引入前&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;DOMContentLoaded&apos;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      console.log(&apos;hello world&apos;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/2ysZtE.png\" alt></p>\n<h2 id=\"2-存在JS脚本在CSS引入后\"><a href=\"#2-存在JS脚本在CSS引入后\" class=\"headerlink\" title=\"2. 存在JS脚本在CSS引入后\"></a>2. 存在JS脚本在CSS引入后</h2><p>如果存在JS脚本在CSS引入后，那么该脚本的执行必须等到CSSOM树构建完才能执行，而DOM树的构建会因为js脚本加载或执行而暂停，直到脚本执行完，才会继续构建DOM树。所以DOMContentLoaded事件的触发要等待CSSOM构建完后触发。</p>\n<p>关于GUI渲染线程与JS线程之间的关系可以参考：<a href=\"https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine\" target=\"_blank\" rel=\"noopener\">浏览器内核</a></p>\n<p>测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;JS脚本都在CSS引入前&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;DOMContentLoaded&apos;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    console.log(&apos;hello world&apos;);</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/cdZQTk.png\" alt></p>\n<h2 id=\"async和defer与DOMContentLoaded\"><a href=\"#async和defer与DOMContentLoaded\" class=\"headerlink\" title=\"async和defer与DOMContentLoaded\"></a>async和defer与DOMContentLoaded</h2><p>由<a href=\"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer\" target=\"_blank\" rel=\"noopener\">async和defer</a>这一节可知，当外联的script添加了async或defer时，会影响页面DOM树的构建。那么这两个属性和DOMContentLoaded是什么关系呢？</p>\n<h3 id=\"1-async和DOMContentLoaded\"><a href=\"#1-async和DOMContentLoaded\" class=\"headerlink\" title=\"1. async和DOMContentLoaded\"></a>1. async和DOMContentLoaded</h3><p>对于设置了async属性的外链JS脚本，DOMContentLoaded事件的触发无需等待样式表加载，当DOM构建完成后就可以触发。</p>\n<p>由<a href=\"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer\" target=\"_blank\" rel=\"noopener\">async和defer</a>中可知，设置async的脚本加载不影响DOM的构建，执行的时候会影响。也就是说如果DOM的构建快于JS脚本的加载速度，那么DOMContentLoaded和外联脚本无关。如果DOM构建的速度慢于JS脚本的加载时间，那脚本的执行会影响DOMContentLoaded的触发时间。</p>\n<p>测试脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;css阻塞&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;DOMContentLoaded&apos;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js&quot; async&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>测试截图：<br><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/bh7fCd.png\" alt></p>\n<h3 id=\"2-defer和DOMContentLoaded\"><a href=\"#2-defer和DOMContentLoaded\" class=\"headerlink\" title=\"2. defer和DOMContentLoaded\"></a>2. defer和DOMContentLoaded</h3><blockquote>\n<p>defer 这个布尔属性被设定用来通知浏览器该脚本将在文档完成解析后，触发 DOMContentLoaded 事件前执行</p>\n</blockquote>\n<p>从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script\" target=\"_blank\" rel=\"noopener\">MDN</a>上可以看出,当defer对应的脚本执行完成且DOM构建完成后，DOMContentLoaded事件触发。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;css阻塞&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;DOMContentLoaded&apos;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js&quot; defer&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/uY4AEb.png\" alt></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-0\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/25876048\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"DOMContentLoaded和load\"><a href=\"#DOMContentLoaded和load\" class=\"headerlink\" title=\"DOMContentLoaded和load\"></a>DOMContentLoaded和load</h2><ul>\n<li><p>当初始的 HTML 文档被完全加载和解析完成之后，<strong>DOMContentLoaded 事件</strong>被触发，而无需等待样式表、图像和子框架的完成加载。</p>\n</li>\n<li><p><strong>load事件</strong>，当整个页面加载后会触发该事件，包括所有相关资源，如样式表、图像。</p>\n</li>\n</ul>\n<p>在下图中，在控制台中展示了DOMContentLoaded、load的执行时间，其中蓝色线代表的是DOMContentLoaded，红色的线代表load的时间。</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/L5hJR0.png\" alt><br>","more":"<br>通过这个<a href=\"https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html\" target=\"_blank\" rel=\"noopener\">链接</a>，可以直观感受下两者的不同。<br><!--more--></p>\n<h2 id=\"两者的意义\"><a href=\"#两者的意义\" class=\"headerlink\" title=\"两者的意义\"></a>两者的意义</h2><p>对于load来说，它代表了访问页面所需要的所有资源已经全部加载完毕。</p>\n<p>但是如果拿load事件来衡量网页加载速度其实并不准确，因为我们访问网页时可能并不需要文档的所有信息。打个比方，对于官方文档来说，你所需要关注的可能只有文档的文字是否已经加载完毕，并不需要等待页面上广告和图片的加载。而DOMContentLoaded则是来衡量网页从白屏到出现内容所需要的时间。</p>\n<h2 id=\"JS脚本与DOMContentLoaded\"><a href=\"#JS脚本与DOMContentLoaded\" class=\"headerlink\" title=\"JS脚本与DOMContentLoaded\"></a>JS脚本与DOMContentLoaded</h2><p>DOMContentLoaded事件的触发代表<strong>HTML文档被加载和解析完成</strong>，由<a href=\"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/page-rendering\" target=\"_blank\" rel=\"noopener\">页面渲染</a>这一节可知，JS脚本的加载、解析和执行会会影响DOM树的构建，那么两者之间到底是什么关系呢？本节将对两者的关系进行详细的介绍。</p>\n<h2 id=\"1-JS脚本都在CSS引入前\"><a href=\"#1-JS脚本都在CSS引入前\" class=\"headerlink\" title=\"1. JS脚本都在CSS引入前\"></a>1. JS脚本都在CSS引入前</h2><p>如果CSS的引入都在JS脚本后，DOMContentLoaded事件的触发不需要等到css加载完毕。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;JS脚本都在CSS引入前&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;DOMContentLoaded&apos;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      console.log(&apos;hello world&apos;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/2ysZtE.png\" alt></p>\n<h2 id=\"2-存在JS脚本在CSS引入后\"><a href=\"#2-存在JS脚本在CSS引入后\" class=\"headerlink\" title=\"2. 存在JS脚本在CSS引入后\"></a>2. 存在JS脚本在CSS引入后</h2><p>如果存在JS脚本在CSS引入后，那么该脚本的执行必须等到CSSOM树构建完才能执行，而DOM树的构建会因为js脚本加载或执行而暂停，直到脚本执行完，才会继续构建DOM树。所以DOMContentLoaded事件的触发要等待CSSOM构建完后触发。</p>\n<p>关于GUI渲染线程与JS线程之间的关系可以参考：<a href=\"https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine\" target=\"_blank\" rel=\"noopener\">浏览器内核</a></p>\n<p>测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;JS脚本都在CSS引入前&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;DOMContentLoaded&apos;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    console.log(&apos;hello world&apos;);</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/cdZQTk.png\" alt></p>\n<h2 id=\"async和defer与DOMContentLoaded\"><a href=\"#async和defer与DOMContentLoaded\" class=\"headerlink\" title=\"async和defer与DOMContentLoaded\"></a>async和defer与DOMContentLoaded</h2><p>由<a href=\"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer\" target=\"_blank\" rel=\"noopener\">async和defer</a>这一节可知，当外联的script添加了async或defer时，会影响页面DOM树的构建。那么这两个属性和DOMContentLoaded是什么关系呢？</p>\n<h3 id=\"1-async和DOMContentLoaded\"><a href=\"#1-async和DOMContentLoaded\" class=\"headerlink\" title=\"1. async和DOMContentLoaded\"></a>1. async和DOMContentLoaded</h3><p>对于设置了async属性的外链JS脚本，DOMContentLoaded事件的触发无需等待样式表加载，当DOM构建完成后就可以触发。</p>\n<p>由<a href=\"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer\" target=\"_blank\" rel=\"noopener\">async和defer</a>中可知，设置async的脚本加载不影响DOM的构建，执行的时候会影响。也就是说如果DOM的构建快于JS脚本的加载速度，那么DOMContentLoaded和外联脚本无关。如果DOM构建的速度慢于JS脚本的加载时间，那脚本的执行会影响DOMContentLoaded的触发时间。</p>\n<p>测试脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;css阻塞&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;DOMContentLoaded&apos;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js&quot; async&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>测试截图：<br><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/bh7fCd.png\" alt></p>\n<h3 id=\"2-defer和DOMContentLoaded\"><a href=\"#2-defer和DOMContentLoaded\" class=\"headerlink\" title=\"2. defer和DOMContentLoaded\"></a>2. defer和DOMContentLoaded</h3><blockquote>\n<p>defer 这个布尔属性被设定用来通知浏览器该脚本将在文档完成解析后，触发 DOMContentLoaded 事件前执行</p>\n</blockquote>\n<p>从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script\" target=\"_blank\" rel=\"noopener\">MDN</a>上可以看出,当defer对应的脚本执行完成且DOM构建完成后，DOMContentLoaded事件触发。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;css阻塞&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</span><br><span class=\"line\">        console.log(&apos;DOMContentLoaded&apos;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js&quot; defer&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>测试截图：</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/uY4AEb.png\" alt></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-0\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/25876048\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>"},{"title":"Object.create()和new Object()的区别","toc":true,"_content":"# 1.Object.create()\nObject.create()方法创建一个`新对象`，使用现有的对象来提供新创建的对象的__proto__。\n## 1.1 语法\n ```\n Object.create(proto, [propertiesObject])\n ```\n`proto`: 新创建的对象的原型对象\n\n` [propertiesObject]`: 默认是undefined,当为对象的时候，将对象添加到原型上。\n<!--more-->\n## 1.2 Object.create() 和 new Object()\nObject.create()是将它里面的参数添加到对象的原型上，而不是添加到对象本身。\n```\nconst person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n  }\n};\n\nconst me = Object.create(person);\n\nme.name = \"Matthew\"; // \"name\" is a property set on \"me\", but not on \"person\"\nme.isHuman = true; // inherited properties can be overwritten\n\nme.printIntroduction();·\n// expected output: \"My name is Matthew. Am I human? true\"\n\n```\n![20190708102318.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190708102318.png)\n\n由上图可以看出 Object.create()是将它里面的参数添加到对象的原型上，而不是添加到对象本身。\n\n使用Object.create()创建的对象会把person的内容添加到me的原型上，而不是添加到me的构造函数上。\n```\nconst person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n  }\n};\n\nconst me = new Object(person);\n```\n![20190708103210.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190708103210.png)\n此时person中的内容将加到me的构造函数中。\n## 1.3 {} 和 new Object() 和 Object.create(Object.prototype)\n```\nvar newObj = {}\nnewObj.__proto__ === new Object().__proto__ ===  Object.create(Object.prototype).__proto__\n```\n## 1.4 Object.create()在继承中的使用\n```js\nfunction User(name,age){\n    this.name = name;\n    this.age = age;        \n}\n\nUser.prototype.showName=function(){\n    console.log(this.name);\n}\nUser.prototype.showAge=function(){\n    console.log(this.age);\n}\n\nfunction Vipuser(name,age,level){\n    User.call(this,name,age);\n    this.level = level;\n}\nVipuser.prototype = Object.create(User.prototype);\nVipuser.prototype.constructor = Vipuser;\n\nVipuser.prototype.showLevel=function(){\n    console.log(this.level);\n}\n\nvar v1 = new Vipuser('hum',12,3);\nv1.showName();\nv1.showAge();\nv1.showLevel();\n```\n```Vipuser.prototype = Object.create(User.prototype);和 Vipuser.prototype = new User();```这两个的区别在于，前者的子集只会继承父集中原型中的属性和方法，而后者子集的原型中包含父集原型中的属性、方法以及`构造函数中的属性和方法`，可以复制到控制台查看。\n","source":"_posts/Object.create()和new Object().md","raw":"---\ntitle: Object.create()和new Object()的区别\ntags:  \n- JS\n- Object.create()\n- new Object()\ntoc: true\n---\n# 1.Object.create()\nObject.create()方法创建一个`新对象`，使用现有的对象来提供新创建的对象的__proto__。\n## 1.1 语法\n ```\n Object.create(proto, [propertiesObject])\n ```\n`proto`: 新创建的对象的原型对象\n\n` [propertiesObject]`: 默认是undefined,当为对象的时候，将对象添加到原型上。\n<!--more-->\n## 1.2 Object.create() 和 new Object()\nObject.create()是将它里面的参数添加到对象的原型上，而不是添加到对象本身。\n```\nconst person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n  }\n};\n\nconst me = Object.create(person);\n\nme.name = \"Matthew\"; // \"name\" is a property set on \"me\", but not on \"person\"\nme.isHuman = true; // inherited properties can be overwritten\n\nme.printIntroduction();·\n// expected output: \"My name is Matthew. Am I human? true\"\n\n```\n![20190708102318.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190708102318.png)\n\n由上图可以看出 Object.create()是将它里面的参数添加到对象的原型上，而不是添加到对象本身。\n\n使用Object.create()创建的对象会把person的内容添加到me的原型上，而不是添加到me的构造函数上。\n```\nconst person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n  }\n};\n\nconst me = new Object(person);\n```\n![20190708103210.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190708103210.png)\n此时person中的内容将加到me的构造函数中。\n## 1.3 {} 和 new Object() 和 Object.create(Object.prototype)\n```\nvar newObj = {}\nnewObj.__proto__ === new Object().__proto__ ===  Object.create(Object.prototype).__proto__\n```\n## 1.4 Object.create()在继承中的使用\n```js\nfunction User(name,age){\n    this.name = name;\n    this.age = age;        \n}\n\nUser.prototype.showName=function(){\n    console.log(this.name);\n}\nUser.prototype.showAge=function(){\n    console.log(this.age);\n}\n\nfunction Vipuser(name,age,level){\n    User.call(this,name,age);\n    this.level = level;\n}\nVipuser.prototype = Object.create(User.prototype);\nVipuser.prototype.constructor = Vipuser;\n\nVipuser.prototype.showLevel=function(){\n    console.log(this.level);\n}\n\nvar v1 = new Vipuser('hum',12,3);\nv1.showName();\nv1.showAge();\nv1.showLevel();\n```\n```Vipuser.prototype = Object.create(User.prototype);和 Vipuser.prototype = new User();```这两个的区别在于，前者的子集只会继承父集中原型中的属性和方法，而后者子集的原型中包含父集原型中的属性、方法以及`构造函数中的属性和方法`，可以复制到控制台查看。\n","slug":"Object.create()和new Object()","published":1,"date":"2019-12-19T15:52:56.135Z","updated":"2019-12-19T15:52:56.135Z","_id":"ck4cwgnhs000hckuk1g74auht","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-Object-create\"><a href=\"#1-Object-create\" class=\"headerlink\" title=\"1.Object.create()\"></a>1.Object.create()</h1><p>Object.create()方法创建一个<code>新对象</code>，使用现有的对象来提供新创建的对象的<strong>proto</strong>。</p>\n<h2 id=\"1-1-语法\"><a href=\"#1-1-语法\" class=\"headerlink\" title=\"1.1 语法\"></a>1.1 语法</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.create(proto, [propertiesObject])</span><br></pre></td></tr></table></figure>\n<p><code>proto</code>: 新创建的对象的原型对象</p>\n<p><code>[propertiesObject]</code>: 默认是undefined,当为对象的时候，将对象添加到原型上。<br><a id=\"more\"></a></p>\n<h2 id=\"1-2-Object-create-和-new-Object\"><a href=\"#1-2-Object-create-和-new-Object\" class=\"headerlink\" title=\"1.2 Object.create() 和 new Object()\"></a>1.2 Object.create() 和 new Object()</h2><p>Object.create()是将它里面的参数添加到对象的原型上，而不是添加到对象本身。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const person = &#123;</span><br><span class=\"line\">  isHuman: false,</span><br><span class=\"line\">  printIntroduction: function () &#123;</span><br><span class=\"line\">    console.log(`My name is $&#123;this.name&#125;. Am I human? $&#123;this.isHuman&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const me = Object.create(person);</span><br><span class=\"line\"></span><br><span class=\"line\">me.name = &quot;Matthew&quot;; // &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span><br><span class=\"line\">me.isHuman = true; // inherited properties can be overwritten</span><br><span class=\"line\"></span><br><span class=\"line\">me.printIntroduction();·</span><br><span class=\"line\">// expected output: &quot;My name is Matthew. Am I human? true&quot;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190708102318.png\" alt=\"20190708102318.png\"></p>\n<p>由上图可以看出 Object.create()是将它里面的参数添加到对象的原型上，而不是添加到对象本身。</p>\n<p>使用Object.create()创建的对象会把person的内容添加到me的原型上，而不是添加到me的构造函数上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const person = &#123;</span><br><span class=\"line\">  isHuman: false,</span><br><span class=\"line\">  printIntroduction: function () &#123;</span><br><span class=\"line\">    console.log(`My name is $&#123;this.name&#125;. Am I human? $&#123;this.isHuman&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const me = new Object(person);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190708103210.png\" alt=\"20190708103210.png\"><br>此时person中的内容将加到me的构造函数中。</p>\n<h2 id=\"1-3-和-new-Object-和-Object-create-Object-prototype\"><a href=\"#1-3-和-new-Object-和-Object-create-Object-prototype\" class=\"headerlink\" title=\"1.3 {} 和 new Object() 和 Object.create(Object.prototype)\"></a>1.3 {} 和 new Object() 和 Object.create(Object.prototype)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newObj = &#123;&#125;</span><br><span class=\"line\">newObj.__proto__ === new Object().__proto__ ===  Object.create(Object.prototype).__proto__</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4-Object-create-在继承中的使用\"><a href=\"#1-4-Object-create-在继承中的使用\" class=\"headerlink\" title=\"1.4 Object.create()在继承中的使用\"></a>1.4 Object.create()在继承中的使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.prototype.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">User.prototype.showAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vipuser</span>(<span class=\"params\">name,age,level</span>)</span>&#123;</span><br><span class=\"line\">    User.call(<span class=\"keyword\">this</span>,name,age);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vipuser.prototype = <span class=\"built_in\">Object</span>.create(User.prototype);</span><br><span class=\"line\">Vipuser.prototype.constructor = Vipuser;</span><br><span class=\"line\"></span><br><span class=\"line\">Vipuser.prototype.showLevel=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.level);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"keyword\">new</span> Vipuser(<span class=\"string\">'hum'</span>,<span class=\"number\">12</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">v1.showName();</span><br><span class=\"line\">v1.showAge();</span><br><span class=\"line\">v1.showLevel();</span><br></pre></td></tr></table></figure>\n<p><code>Vipuser.prototype = Object.create(User.prototype);和 Vipuser.prototype = new User();</code>这两个的区别在于，前者的子集只会继承父集中原型中的属性和方法，而后者子集的原型中包含父集原型中的属性、方法以及<code>构造函数中的属性和方法</code>，可以复制到控制台查看。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-Object-create\"><a href=\"#1-Object-create\" class=\"headerlink\" title=\"1.Object.create()\"></a>1.Object.create()</h1><p>Object.create()方法创建一个<code>新对象</code>，使用现有的对象来提供新创建的对象的<strong>proto</strong>。</p>\n<h2 id=\"1-1-语法\"><a href=\"#1-1-语法\" class=\"headerlink\" title=\"1.1 语法\"></a>1.1 语法</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.create(proto, [propertiesObject])</span><br></pre></td></tr></table></figure>\n<p><code>proto</code>: 新创建的对象的原型对象</p>\n<p><code>[propertiesObject]</code>: 默认是undefined,当为对象的时候，将对象添加到原型上。<br>","more":"</p>\n<h2 id=\"1-2-Object-create-和-new-Object\"><a href=\"#1-2-Object-create-和-new-Object\" class=\"headerlink\" title=\"1.2 Object.create() 和 new Object()\"></a>1.2 Object.create() 和 new Object()</h2><p>Object.create()是将它里面的参数添加到对象的原型上，而不是添加到对象本身。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const person = &#123;</span><br><span class=\"line\">  isHuman: false,</span><br><span class=\"line\">  printIntroduction: function () &#123;</span><br><span class=\"line\">    console.log(`My name is $&#123;this.name&#125;. Am I human? $&#123;this.isHuman&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const me = Object.create(person);</span><br><span class=\"line\"></span><br><span class=\"line\">me.name = &quot;Matthew&quot;; // &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span><br><span class=\"line\">me.isHuman = true; // inherited properties can be overwritten</span><br><span class=\"line\"></span><br><span class=\"line\">me.printIntroduction();·</span><br><span class=\"line\">// expected output: &quot;My name is Matthew. Am I human? true&quot;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190708102318.png\" alt=\"20190708102318.png\"></p>\n<p>由上图可以看出 Object.create()是将它里面的参数添加到对象的原型上，而不是添加到对象本身。</p>\n<p>使用Object.create()创建的对象会把person的内容添加到me的原型上，而不是添加到me的构造函数上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const person = &#123;</span><br><span class=\"line\">  isHuman: false,</span><br><span class=\"line\">  printIntroduction: function () &#123;</span><br><span class=\"line\">    console.log(`My name is $&#123;this.name&#125;. Am I human? $&#123;this.isHuman&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const me = new Object(person);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190708103210.png\" alt=\"20190708103210.png\"><br>此时person中的内容将加到me的构造函数中。</p>\n<h2 id=\"1-3-和-new-Object-和-Object-create-Object-prototype\"><a href=\"#1-3-和-new-Object-和-Object-create-Object-prototype\" class=\"headerlink\" title=\"1.3 {} 和 new Object() 和 Object.create(Object.prototype)\"></a>1.3 {} 和 new Object() 和 Object.create(Object.prototype)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newObj = &#123;&#125;</span><br><span class=\"line\">newObj.__proto__ === new Object().__proto__ ===  Object.create(Object.prototype).__proto__</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4-Object-create-在继承中的使用\"><a href=\"#1-4-Object-create-在继承中的使用\" class=\"headerlink\" title=\"1.4 Object.create()在继承中的使用\"></a>1.4 Object.create()在继承中的使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.prototype.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">User.prototype.showAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vipuser</span>(<span class=\"params\">name,age,level</span>)</span>&#123;</span><br><span class=\"line\">    User.call(<span class=\"keyword\">this</span>,name,age);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vipuser.prototype = <span class=\"built_in\">Object</span>.create(User.prototype);</span><br><span class=\"line\">Vipuser.prototype.constructor = Vipuser;</span><br><span class=\"line\"></span><br><span class=\"line\">Vipuser.prototype.showLevel=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.level);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"keyword\">new</span> Vipuser(<span class=\"string\">'hum'</span>,<span class=\"number\">12</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">v1.showName();</span><br><span class=\"line\">v1.showAge();</span><br><span class=\"line\">v1.showLevel();</span><br></pre></td></tr></table></figure>\n<p><code>Vipuser.prototype = Object.create(User.prototype);和 Vipuser.prototype = new User();</code>这两个的区别在于，前者的子集只会继承父集中原型中的属性和方法，而后者子集的原型中包含父集原型中的属性、方法以及<code>构造函数中的属性和方法</code>，可以复制到控制台查看。</p>"},{"title":"Promise 详解","toc":true,"_content":"### 1、使用promise的原因\n解决回调函数多层嵌套，让异步方法可以像同步方法那样返回值，使代码更易读。\n\n### 2、promise的三种状态\npending: 初始状态，既不是成功，也不是失败状态。\n\nfulfilled: 意味着操作成功完成。\n\nrejected: 意味着操作失败。\n\n### 3、promise语法：\n\n```js\nnew Promise( function(resolve, reject) {...} /* executor */  );\n```\npromise参数 executor\n\nexecutor执行器函数包括两个参数resolve 和 reject，`Promise构造函数执行时会立即调用exector函数（宏任务同步操作）`，resolve 和 reject函数会被当作参数传给exector函数。exector函数一般会执行一些异步函数，异步函数调用的成功和失败分别调用resolve函数和reject函数，将promise状态分别转为fulfiled和rejected状态。\n\n**eg:**\n```js\nfunction myAsyncFunction(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url); // 通过url建立链接\n    xhr.onload = () => resolve(xhr.responseText); //接收到完整响应数据时触发\n    xhr.onerror = () => reject(xhr.statusText); //请求发生错误的时候触发。\n    xhr.send();\n  });\n};\n```\n\n> 代码中的onload，onerror属于W3C规范中进度事件.进度事件规范定义了与客户端与服务器通信相关的一系列事件，这些事件监听了通信进程中的各个关键节点，使我们能够以更细的颗粒度掌控数据传输过程中的细节。\n<!--more-->\n#### 3.1、promise在事件轮循的注意事项：\n\n```js\nnew Promise(function(resolve, reject){\n    console.log('hello');\n    resolve(24);\n    console.log('world');\n}).then(value => console.log(value));\nconsole.log('number');\n/*\nhello\nworld\nnumber\n24\n*/\n```\n`Promise本身是同步的立即执行函数`，在执行到resolve()的时候属于异步操作，会把参数传给.then(),并将它放到微任务异步队列里。所以当executor函数中执行完同步操作后，console.log('number')被放到函数调用栈，调用栈的宏观同步任务执行完后，会去微任务队列里取微任务到调用栈。\n\n### 4、Promise.prototype.then(onFulfilled, onRejected)\n当new Promise((resolve,reject) => resolve())的时候对应执行then操作，代表Promise的成功状态(fulfilled)。\n\n当Promise变成接受状态（fulfilled）时，onFulfilled参数作为回调函数被调用。\n\n当Promise变成拒绝状态（rejected ）时，onRejected参数作为回调函数被调用。此时等价与.catch()功能\n\n\n```js\nvar p = new Promise((resolve, reject) => {\n    resolve('foo')\n})\n\n// 'bar' 不是函数，会在内部被替换为 (x) => x\np.then('bar').then((value) => {\n    console.log(value) // 'foo'\n})\n```\n.then()的参数如果只有一个字符串的话，此时可以忽略这个参数。\n.then(String) <=> .then((value) => value) 其中value代表Promise的返回值。\n\n#### 4.1、promise.then()的注意事项：\n\n```js\nPromise.resolve()\n  .then( () => {\n    // 使 .then() 返回一个 rejected promise\n    throw 'Oh no!';\n  })\n  .catch( reason => {\n    console.error( 'onRejected function called: ', reason );\n  })\n  .then( () => {\n    console.log( \"I am always called even if the prior then's promise rejects\" );\n  });\n```\n当promise.then()返回的状态是rejected promise 的时候这个时候会被catch()捕获，\n这时候只要catch中不返回rejected。此时都会执行后面的then操作。\n\n#### 4.2 注意promise和setTimeOut()的优先级：\n```js\nPromise.resolve(\"foo\")\n  // 1. 接收 \"foo\" 并与 \"bar\" 拼接，并将其结果做为下一个resolve返回。\n  .then(function(string) {\n    return new Promise(function(resolve, reject) {\n      setTimeout(function() {\n        string += 'bar';\n        resolve(string);\n      }, 1);\n    });\n  })\n  // 2. 接收 \"foobar\", 放入一个异步函数中处理该字符串\n  // 并将其打印到控制台中, 但是不将处理后的字符串返回到下一个。\n  .then(function(string) {\n    setTimeout(function() {\n      string += 'baz';\n      console.log(string);\n    }, 1)\n    return string;\n  })\n  // 3. 打印本节中代码将如何运行的帮助消息，\n  // 字符串实际上是由上一个回调函数之前的那块异步代码处理的。\n  .then(function(string) {\n    console.log(\"Last Then:  oops... didn't bother to instantiate and return \" +\n                \"a promise in the prior then so the sequence may be a bit \" +\n                \"surprising\");\n\n    // 注意 `string` 这时不会存在 'baz'。\n    // 因为这是发生在我们通过setTimeout模拟的异步函数中。\n    console.log(string);\n});\n```\n第一个then()方法中返回了一个新定义的Promise对象，等待1ms后返回一个promiseValue为foobar的值和fulfiled状态。此时执行下一个then(),把foobar传给浏览器定时器API，然后将它放入宏任务异步队列中，return string进入函数调用栈，将值传给下一个then(),此时将then()中的onFulfilled函数放入微任务队列中，此时调用栈为空。微任务队列中只有第三个.then()的内容，将微任务队列清空，将其中的同步代码放入调用栈，打印两个console.log()语句到控制台。最后执行宏任务队列中的setTimeOut()的回调函数。\n\n### 5、Promise.prototype.catch(onRejected)\n\n当返回一个rejected promise的时候，或者throw出一个错，此时会被catch()捕获\n```js\nvar p1 = new Promise(function(resolve, reject) {\n  throw 'Uh-oh!';\n}).catch();\n<=>\nvar p1 = new Promise(function(resolve, reject) {\n return Promise.reject('Uh-oh!');\n}).catch();\n```\n#### 5.1、catch()的注意事项；\n```js\n// 在异步函数中抛出的错误不会被catch捕获到\nvar p2 = new Promise(function(resolve, reject) {\n  setTimeout(function() {\n    throw 'Uncaught Exception!';\n  }, 1000);\n});\n\np2.catch(function(e) {\n  console.log(e); // 不会执行\n});\n\n// 在resolve()后面抛出的错误会被忽略\nvar p3 = new Promise(function(resolve, reject) {\n  resolve();\n  throw 'Silenced Exception!';\n});\n\np3.catch(function(e) {\n   console.log(e); // 不会执行\n});\n\n\n```\n在异步函数中抛错之所以无法被catch到的原因是：new Promise是同步的立即执行函数，执行到setTimeout函数，将它放到宏任务异步队列中，宏任务异步队列的执行优先级最低。只有当微任务异步队列和函数调用栈队列为空时才会调用。当setTimeout函数执行时，外部已经没有代码可以接到它所抛出的错误。所以异步回调函数抛出的错总是因为函数调用栈为空，没有代码可以承接错误而导致无法被捕获到。\n\n### 6、Promise.prototype.all(iterable)\n\n当promise.all()内没有参数的时候，返回一个已完成状态的promise。\n\n如果所有传入的 promise 都变为完成状态，或者传入的可迭代对象内没有 promise，Promise.all 返回的 promise 异步地变为完成。\n\n在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个数组\n\n\n如果传入的 promise 中有一个失败（rejected），promise.all 异步地将失败的那个结果给失败状态的回调函数，而不管其它 promise 是否完成。\n#### 6.1 Promise.all()的注意事项\n```js\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n\n```\n当p1执行成功状态变为resolved，p2执行的时候会出错跳到catch()，执行完状态也会变为resolved，所以Promise.all()可以正常执行。\n\n如果p2没有catch的化，状态还是rejected，此时的Promise.all()不会执行。\n\nPromise.all()代码实现: https://ustc-han.github.io/2019/04/22/promise.all()%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/\n\n### 7、Promise.prototype.race(iterable)\n\nPromise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，就会返回一个解决状态或拒绝状态的promise。简言之，以最先返回结果的promise的状态为准。\n\n```js\nvar p3 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 100, \"three\");\n});\nvar p4 = new Promise(function(resolve, reject) { \n    setTimeout(reject, 500, \"four\"); \n});\n\nPromise.race([p3, p4]).then(function(value) {\n  console.log(value); // \"three\"\n  // p3 更快，所以它完成了              \n}, function(reason) {\n  // 未被调用\n});\n```\n\n\n```js\nvar promise1 = new Promise(function(resolve, reject) {\n    setTimeout(resolve, 500, 'one');\n});\n\nvar promise2 = new Promise(function(resolve, reject) {\n    setTimeout(resolve, 100, 'two');\n});\n\nPromise.race([promise1, promise2]).then(function(value) {\n  console.log(value);\n  // Both resolve, but promise2 is faster\n});\n// expected output: \"two\"\n\n```\n### 8、创建已处理的Promise\n\n#### 8.1 Promise.resolve(value)\n\nvalue的值分多种情况，当value的值是Promise，此时Promise.resolve()不起作用，返回的promise状态和value的最后状态保持一致。当value是thenable（带有then方法），返回的promise会“跟随”这个thenable的对象，采用它的最终状态。其它情况返回成功状态的promise。\n\n```js\nPromise.resolve(value);\nPromise.resolve(promise);\nPromise.resolve(thenable);\n```\nthenable函数使用第一参数函数返回一个成功状态的promise,使用第二个参数函数返回一个失败的promise。\n\n```js\nvar p1 = Promise.resolve({ \n  then: function(test, rej) { rej(\"rejected!\"); }\n});\nconsole.log(p1 instanceof Promise) // true, 这是一个Promise对象\n\np1.then(function(v) {\n    console.log(v); \n  }, function(e) {\n    console.log(e) //rejected\n})\n```\n\n#### 8.2 Promise.reject(reason)\nPromise.reject返回一个被拒绝的Promise对象，\n参数代表被拒绝的原因。\n\nPromise.reject(reason).catch((reason) => ...);\n\n\n\n\n\n","source":"_posts/Promise整理.md","raw":"---\ntitle: Promise 详解\ntags: \n- JS\n- Promise\ntoc: true\n---\n### 1、使用promise的原因\n解决回调函数多层嵌套，让异步方法可以像同步方法那样返回值，使代码更易读。\n\n### 2、promise的三种状态\npending: 初始状态，既不是成功，也不是失败状态。\n\nfulfilled: 意味着操作成功完成。\n\nrejected: 意味着操作失败。\n\n### 3、promise语法：\n\n```js\nnew Promise( function(resolve, reject) {...} /* executor */  );\n```\npromise参数 executor\n\nexecutor执行器函数包括两个参数resolve 和 reject，`Promise构造函数执行时会立即调用exector函数（宏任务同步操作）`，resolve 和 reject函数会被当作参数传给exector函数。exector函数一般会执行一些异步函数，异步函数调用的成功和失败分别调用resolve函数和reject函数，将promise状态分别转为fulfiled和rejected状态。\n\n**eg:**\n```js\nfunction myAsyncFunction(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url); // 通过url建立链接\n    xhr.onload = () => resolve(xhr.responseText); //接收到完整响应数据时触发\n    xhr.onerror = () => reject(xhr.statusText); //请求发生错误的时候触发。\n    xhr.send();\n  });\n};\n```\n\n> 代码中的onload，onerror属于W3C规范中进度事件.进度事件规范定义了与客户端与服务器通信相关的一系列事件，这些事件监听了通信进程中的各个关键节点，使我们能够以更细的颗粒度掌控数据传输过程中的细节。\n<!--more-->\n#### 3.1、promise在事件轮循的注意事项：\n\n```js\nnew Promise(function(resolve, reject){\n    console.log('hello');\n    resolve(24);\n    console.log('world');\n}).then(value => console.log(value));\nconsole.log('number');\n/*\nhello\nworld\nnumber\n24\n*/\n```\n`Promise本身是同步的立即执行函数`，在执行到resolve()的时候属于异步操作，会把参数传给.then(),并将它放到微任务异步队列里。所以当executor函数中执行完同步操作后，console.log('number')被放到函数调用栈，调用栈的宏观同步任务执行完后，会去微任务队列里取微任务到调用栈。\n\n### 4、Promise.prototype.then(onFulfilled, onRejected)\n当new Promise((resolve,reject) => resolve())的时候对应执行then操作，代表Promise的成功状态(fulfilled)。\n\n当Promise变成接受状态（fulfilled）时，onFulfilled参数作为回调函数被调用。\n\n当Promise变成拒绝状态（rejected ）时，onRejected参数作为回调函数被调用。此时等价与.catch()功能\n\n\n```js\nvar p = new Promise((resolve, reject) => {\n    resolve('foo')\n})\n\n// 'bar' 不是函数，会在内部被替换为 (x) => x\np.then('bar').then((value) => {\n    console.log(value) // 'foo'\n})\n```\n.then()的参数如果只有一个字符串的话，此时可以忽略这个参数。\n.then(String) <=> .then((value) => value) 其中value代表Promise的返回值。\n\n#### 4.1、promise.then()的注意事项：\n\n```js\nPromise.resolve()\n  .then( () => {\n    // 使 .then() 返回一个 rejected promise\n    throw 'Oh no!';\n  })\n  .catch( reason => {\n    console.error( 'onRejected function called: ', reason );\n  })\n  .then( () => {\n    console.log( \"I am always called even if the prior then's promise rejects\" );\n  });\n```\n当promise.then()返回的状态是rejected promise 的时候这个时候会被catch()捕获，\n这时候只要catch中不返回rejected。此时都会执行后面的then操作。\n\n#### 4.2 注意promise和setTimeOut()的优先级：\n```js\nPromise.resolve(\"foo\")\n  // 1. 接收 \"foo\" 并与 \"bar\" 拼接，并将其结果做为下一个resolve返回。\n  .then(function(string) {\n    return new Promise(function(resolve, reject) {\n      setTimeout(function() {\n        string += 'bar';\n        resolve(string);\n      }, 1);\n    });\n  })\n  // 2. 接收 \"foobar\", 放入一个异步函数中处理该字符串\n  // 并将其打印到控制台中, 但是不将处理后的字符串返回到下一个。\n  .then(function(string) {\n    setTimeout(function() {\n      string += 'baz';\n      console.log(string);\n    }, 1)\n    return string;\n  })\n  // 3. 打印本节中代码将如何运行的帮助消息，\n  // 字符串实际上是由上一个回调函数之前的那块异步代码处理的。\n  .then(function(string) {\n    console.log(\"Last Then:  oops... didn't bother to instantiate and return \" +\n                \"a promise in the prior then so the sequence may be a bit \" +\n                \"surprising\");\n\n    // 注意 `string` 这时不会存在 'baz'。\n    // 因为这是发生在我们通过setTimeout模拟的异步函数中。\n    console.log(string);\n});\n```\n第一个then()方法中返回了一个新定义的Promise对象，等待1ms后返回一个promiseValue为foobar的值和fulfiled状态。此时执行下一个then(),把foobar传给浏览器定时器API，然后将它放入宏任务异步队列中，return string进入函数调用栈，将值传给下一个then(),此时将then()中的onFulfilled函数放入微任务队列中，此时调用栈为空。微任务队列中只有第三个.then()的内容，将微任务队列清空，将其中的同步代码放入调用栈，打印两个console.log()语句到控制台。最后执行宏任务队列中的setTimeOut()的回调函数。\n\n### 5、Promise.prototype.catch(onRejected)\n\n当返回一个rejected promise的时候，或者throw出一个错，此时会被catch()捕获\n```js\nvar p1 = new Promise(function(resolve, reject) {\n  throw 'Uh-oh!';\n}).catch();\n<=>\nvar p1 = new Promise(function(resolve, reject) {\n return Promise.reject('Uh-oh!');\n}).catch();\n```\n#### 5.1、catch()的注意事项；\n```js\n// 在异步函数中抛出的错误不会被catch捕获到\nvar p2 = new Promise(function(resolve, reject) {\n  setTimeout(function() {\n    throw 'Uncaught Exception!';\n  }, 1000);\n});\n\np2.catch(function(e) {\n  console.log(e); // 不会执行\n});\n\n// 在resolve()后面抛出的错误会被忽略\nvar p3 = new Promise(function(resolve, reject) {\n  resolve();\n  throw 'Silenced Exception!';\n});\n\np3.catch(function(e) {\n   console.log(e); // 不会执行\n});\n\n\n```\n在异步函数中抛错之所以无法被catch到的原因是：new Promise是同步的立即执行函数，执行到setTimeout函数，将它放到宏任务异步队列中，宏任务异步队列的执行优先级最低。只有当微任务异步队列和函数调用栈队列为空时才会调用。当setTimeout函数执行时，外部已经没有代码可以接到它所抛出的错误。所以异步回调函数抛出的错总是因为函数调用栈为空，没有代码可以承接错误而导致无法被捕获到。\n\n### 6、Promise.prototype.all(iterable)\n\n当promise.all()内没有参数的时候，返回一个已完成状态的promise。\n\n如果所有传入的 promise 都变为完成状态，或者传入的可迭代对象内没有 promise，Promise.all 返回的 promise 异步地变为完成。\n\n在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个数组\n\n\n如果传入的 promise 中有一个失败（rejected），promise.all 异步地将失败的那个结果给失败状态的回调函数，而不管其它 promise 是否完成。\n#### 6.1 Promise.all()的注意事项\n```js\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n\n```\n当p1执行成功状态变为resolved，p2执行的时候会出错跳到catch()，执行完状态也会变为resolved，所以Promise.all()可以正常执行。\n\n如果p2没有catch的化，状态还是rejected，此时的Promise.all()不会执行。\n\nPromise.all()代码实现: https://ustc-han.github.io/2019/04/22/promise.all()%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/\n\n### 7、Promise.prototype.race(iterable)\n\nPromise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，就会返回一个解决状态或拒绝状态的promise。简言之，以最先返回结果的promise的状态为准。\n\n```js\nvar p3 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 100, \"three\");\n});\nvar p4 = new Promise(function(resolve, reject) { \n    setTimeout(reject, 500, \"four\"); \n});\n\nPromise.race([p3, p4]).then(function(value) {\n  console.log(value); // \"three\"\n  // p3 更快，所以它完成了              \n}, function(reason) {\n  // 未被调用\n});\n```\n\n\n```js\nvar promise1 = new Promise(function(resolve, reject) {\n    setTimeout(resolve, 500, 'one');\n});\n\nvar promise2 = new Promise(function(resolve, reject) {\n    setTimeout(resolve, 100, 'two');\n});\n\nPromise.race([promise1, promise2]).then(function(value) {\n  console.log(value);\n  // Both resolve, but promise2 is faster\n});\n// expected output: \"two\"\n\n```\n### 8、创建已处理的Promise\n\n#### 8.1 Promise.resolve(value)\n\nvalue的值分多种情况，当value的值是Promise，此时Promise.resolve()不起作用，返回的promise状态和value的最后状态保持一致。当value是thenable（带有then方法），返回的promise会“跟随”这个thenable的对象，采用它的最终状态。其它情况返回成功状态的promise。\n\n```js\nPromise.resolve(value);\nPromise.resolve(promise);\nPromise.resolve(thenable);\n```\nthenable函数使用第一参数函数返回一个成功状态的promise,使用第二个参数函数返回一个失败的promise。\n\n```js\nvar p1 = Promise.resolve({ \n  then: function(test, rej) { rej(\"rejected!\"); }\n});\nconsole.log(p1 instanceof Promise) // true, 这是一个Promise对象\n\np1.then(function(v) {\n    console.log(v); \n  }, function(e) {\n    console.log(e) //rejected\n})\n```\n\n#### 8.2 Promise.reject(reason)\nPromise.reject返回一个被拒绝的Promise对象，\n参数代表被拒绝的原因。\n\nPromise.reject(reason).catch((reason) => ...);\n\n\n\n\n\n","slug":"Promise整理","published":1,"date":"2019-12-19T15:52:56.136Z","updated":"2019-12-19T15:52:56.136Z","_id":"ck4cwgnht000jckukkbau7452","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、使用promise的原因\"><a href=\"#1、使用promise的原因\" class=\"headerlink\" title=\"1、使用promise的原因\"></a>1、使用promise的原因</h3><p>解决回调函数多层嵌套，让异步方法可以像同步方法那样返回值，使代码更易读。</p>\n<h3 id=\"2、promise的三种状态\"><a href=\"#2、promise的三种状态\" class=\"headerlink\" title=\"2、promise的三种状态\"></a>2、promise的三种状态</h3><p>pending: 初始状态，既不是成功，也不是失败状态。</p>\n<p>fulfilled: 意味着操作成功完成。</p>\n<p>rejected: 意味着操作失败。</p>\n<h3 id=\"3、promise语法：\"><a href=\"#3、promise语法：\" class=\"headerlink\" title=\"3、promise语法：\"></a>3、promise语法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;...&#125; <span class=\"comment\">/* executor */</span>  );</span><br></pre></td></tr></table></figure>\n<p>promise参数 executor</p>\n<p>executor执行器函数包括两个参数resolve 和 reject，<code>Promise构造函数执行时会立即调用exector函数（宏任务同步操作）</code>，resolve 和 reject函数会被当作参数传给exector函数。exector函数一般会执行一些异步函数，异步函数调用的成功和失败分别调用resolve函数和reject函数，将promise状态分别转为fulfiled和rejected状态。</p>\n<p><strong>eg:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAsyncFunction</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"GET\"</span>, url); <span class=\"comment\">// 通过url建立链接</span></span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(xhr.responseText); <span class=\"comment\">//接收到完整响应数据时触发</span></span><br><span class=\"line\">    xhr.onerror = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(xhr.statusText); <span class=\"comment\">//请求发生错误的时候触发。</span></span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>代码中的onload，onerror属于W3C规范中进度事件.进度事件规范定义了与客户端与服务器通信相关的一系列事件，这些事件监听了通信进程中的各个关键节点，使我们能够以更细的颗粒度掌控数据传输过程中的细节。<br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"3-1、promise在事件轮循的注意事项：\"><a href=\"#3-1、promise在事件轮循的注意事项：\" class=\"headerlink\" title=\"3.1、promise在事件轮循的注意事项：\"></a>3.1、promise在事件轮循的注意事项：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">    resolve(<span class=\"number\">24</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'number'</span>);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">hello</span></span><br><span class=\"line\"><span class=\"comment\">world</span></span><br><span class=\"line\"><span class=\"comment\">number</span></span><br><span class=\"line\"><span class=\"comment\">24</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><code>Promise本身是同步的立即执行函数</code>，在执行到resolve()的时候属于异步操作，会把参数传给.then(),并将它放到微任务异步队列里。所以当executor函数中执行完同步操作后，console.log(‘number’)被放到函数调用栈，调用栈的宏观同步任务执行完后，会去微任务队列里取微任务到调用栈。</p>\n<h3 id=\"4、Promise-prototype-then-onFulfilled-onRejected\"><a href=\"#4、Promise-prototype-then-onFulfilled-onRejected\" class=\"headerlink\" title=\"4、Promise.prototype.then(onFulfilled, onRejected)\"></a>4、Promise.prototype.then(onFulfilled, onRejected)</h3><p>当new Promise((resolve,reject) =&gt; resolve())的时候对应执行then操作，代表Promise的成功状态(fulfilled)。</p>\n<p>当Promise变成接受状态（fulfilled）时，onFulfilled参数作为回调函数被调用。</p>\n<p>当Promise变成拒绝状态（rejected ）时，onRejected参数作为回调函数被调用。此时等价与.catch()功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 'bar' 不是函数，会在内部被替换为 (x) =&gt; x</span></span><br><span class=\"line\">p.then(<span class=\"string\">'bar'</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value) <span class=\"comment\">// 'foo'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>.then()的参数如果只有一个字符串的话，此时可以忽略这个参数。<br>.then(String) &lt;=&gt; .then((value) =&gt; value) 其中value代表Promise的返回值。</p>\n<h4 id=\"4-1、promise-then-的注意事项：\"><a href=\"#4-1、promise-then-的注意事项：\" class=\"headerlink\" title=\"4.1、promise.then()的注意事项：\"></a>4.1、promise.then()的注意事项：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使 .then() 返回一个 rejected promise</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'Oh no!'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch( <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error( <span class=\"string\">'onRejected function called: '</span>, reason );</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"I am always called even if the prior then's promise rejects\"</span> );</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>当promise.then()返回的状态是rejected promise 的时候这个时候会被catch()捕获，<br>这时候只要catch中不返回rejected。此时都会执行后面的then操作。</p>\n<h4 id=\"4-2-注意promise和setTimeOut-的优先级：\"><a href=\"#4-2-注意promise和setTimeOut-的优先级：\" class=\"headerlink\" title=\"4.2 注意promise和setTimeOut()的优先级：\"></a>4.2 注意promise和setTimeOut()的优先级：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">\"foo\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 1. 接收 \"foo\" 并与 \"bar\" 拼接，并将其结果做为下一个resolve返回。</span></span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        string += <span class=\"string\">'bar'</span>;</span><br><span class=\"line\">        resolve(string);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 2. 接收 \"foobar\", 放入一个异步函数中处理该字符串</span></span><br><span class=\"line\">  <span class=\"comment\">// 并将其打印到控制台中, 但是不将处理后的字符串返回到下一个。</span></span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      string += <span class=\"string\">'baz'</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(string);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> string;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 3. 打印本节中代码将如何运行的帮助消息，</span></span><br><span class=\"line\">  <span class=\"comment\">// 字符串实际上是由上一个回调函数之前的那块异步代码处理的。</span></span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Last Then:  oops... didn't bother to instantiate and return \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"a promise in the prior then so the sequence may be a bit \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"surprising\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意 `string` 这时不会存在 'baz'。</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为这是发生在我们通过setTimeout模拟的异步函数中。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(string);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>第一个then()方法中返回了一个新定义的Promise对象，等待1ms后返回一个promiseValue为foobar的值和fulfiled状态。此时执行下一个then(),把foobar传给浏览器定时器API，然后将它放入宏任务异步队列中，return string进入函数调用栈，将值传给下一个then(),此时将then()中的onFulfilled函数放入微任务队列中，此时调用栈为空。微任务队列中只有第三个.then()的内容，将微任务队列清空，将其中的同步代码放入调用栈，打印两个console.log()语句到控制台。最后执行宏任务队列中的setTimeOut()的回调函数。</p>\n<h3 id=\"5、Promise-prototype-catch-onRejected\"><a href=\"#5、Promise-prototype-catch-onRejected\" class=\"headerlink\" title=\"5、Promise.prototype.catch(onRejected)\"></a>5、Promise.prototype.catch(onRejected)</h3><p>当返回一个rejected promise的时候，或者throw出一个错，此时会被catch()捕获<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'Uh-oh!'</span>;</span><br><span class=\"line\">&#125;).catch();</span><br><span class=\"line\">&lt;=&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'Uh-oh!'</span>);</span><br><span class=\"line\">&#125;).catch();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-1、catch-的注意事项；\"><a href=\"#5-1、catch-的注意事项；\" class=\"headerlink\" title=\"5.1、catch()的注意事项；\"></a>5.1、catch()的注意事项；</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在异步函数中抛出的错误不会被catch捕获到</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'Uncaught Exception!'</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p2.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 不会执行</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在resolve()后面抛出的错误会被忽略</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'Silenced Exception!'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p3.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 不会执行</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在异步函数中抛错之所以无法被catch到的原因是：new Promise是同步的立即执行函数，执行到setTimeout函数，将它放到宏任务异步队列中，宏任务异步队列的执行优先级最低。只有当微任务异步队列和函数调用栈队列为空时才会调用。当setTimeout函数执行时，外部已经没有代码可以接到它所抛出的错误。所以异步回调函数抛出的错总是因为函数调用栈为空，没有代码可以承接错误而导致无法被捕获到。</p>\n<h3 id=\"6、Promise-prototype-all-iterable\"><a href=\"#6、Promise-prototype-all-iterable\" class=\"headerlink\" title=\"6、Promise.prototype.all(iterable)\"></a>6、Promise.prototype.all(iterable)</h3><p>当promise.all()内没有参数的时候，返回一个已完成状态的promise。</p>\n<p>如果所有传入的 promise 都变为完成状态，或者传入的可迭代对象内没有 promise，Promise.all 返回的 promise 异步地变为完成。</p>\n<p>在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个数组</p>\n<p>如果传入的 promise 中有一个失败（rejected），promise.all 异步地将失败的那个结果给失败状态的回调函数，而不管其它 promise 是否完成。</p>\n<h4 id=\"6-1-Promise-all-的注意事项\"><a href=\"#6-1-Promise-all-的注意事项\" class=\"headerlink\" title=\"6.1 Promise.all()的注意事项\"></a>6.1 Promise.all()的注意事项</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'报错了'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"built_in\">console</span>.log(result))</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br><span class=\"line\"><span class=\"comment\">// [\"hello\", Error: 报错了]</span></span><br></pre></td></tr></table></figure>\n<p>当p1执行成功状态变为resolved，p2执行的时候会出错跳到catch()，执行完状态也会变为resolved，所以Promise.all()可以正常执行。</p>\n<p>如果p2没有catch的化，状态还是rejected，此时的Promise.all()不会执行。</p>\n<p>Promise.all()代码实现: <a href=\"https://ustc-han.github.io/2019/04/22/promise.all()%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/\">https://ustc-han.github.io/2019/04/22/promise.all()%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</a></p>\n<h3 id=\"7、Promise-prototype-race-iterable\"><a href=\"#7、Promise-prototype-race-iterable\" class=\"headerlink\" title=\"7、Promise.prototype.race(iterable)\"></a>7、Promise.prototype.race(iterable)</h3><p>Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，就会返回一个解决状态或拒绝状态的promise。简言之，以最先返回结果的promise的状态为准。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"three\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(reject, <span class=\"number\">500</span>, <span class=\"string\">\"four\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p3, p4]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"three\"</span></span><br><span class=\"line\">  <span class=\"comment\">// p3 更快，所以它完成了              </span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 未被调用</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">'one'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">'two'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([promise1, promise2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">  <span class=\"comment\">// Both resolve, but promise2 is faster</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// expected output: \"two\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8、创建已处理的Promise\"><a href=\"#8、创建已处理的Promise\" class=\"headerlink\" title=\"8、创建已处理的Promise\"></a>8、创建已处理的Promise</h3><h4 id=\"8-1-Promise-resolve-value\"><a href=\"#8-1-Promise-resolve-value\" class=\"headerlink\" title=\"8.1 Promise.resolve(value)\"></a>8.1 Promise.resolve(value)</h4><p>value的值分多种情况，当value的值是Promise，此时Promise.resolve()不起作用，返回的promise状态和value的最后状态保持一致。当value是thenable（带有then方法），返回的promise会“跟随”这个thenable的对象，采用它的最终状态。其它情况返回成功状态的promise。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(value);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(promise);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(thenable);</span><br></pre></td></tr></table></figure>\n<p>thenable函数使用第一参数函数返回一个成功状态的promise,使用第二个参数函数返回一个失败的promise。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(&#123; </span><br><span class=\"line\">  then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test, rej</span>) </span>&#123; rej(<span class=\"string\">\"rejected!\"</span>); &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) <span class=\"comment\">// true, 这是一个Promise对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v); </span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e) <span class=\"comment\">//rejected</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-2-Promise-reject-reason\"><a href=\"#8-2-Promise-reject-reason\" class=\"headerlink\" title=\"8.2 Promise.reject(reason)\"></a>8.2 Promise.reject(reason)</h4><p>Promise.reject返回一个被拒绝的Promise对象，<br>参数代表被拒绝的原因。</p>\n<p>Promise.reject(reason).catch((reason) =&gt; …);</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、使用promise的原因\"><a href=\"#1、使用promise的原因\" class=\"headerlink\" title=\"1、使用promise的原因\"></a>1、使用promise的原因</h3><p>解决回调函数多层嵌套，让异步方法可以像同步方法那样返回值，使代码更易读。</p>\n<h3 id=\"2、promise的三种状态\"><a href=\"#2、promise的三种状态\" class=\"headerlink\" title=\"2、promise的三种状态\"></a>2、promise的三种状态</h3><p>pending: 初始状态，既不是成功，也不是失败状态。</p>\n<p>fulfilled: 意味着操作成功完成。</p>\n<p>rejected: 意味着操作失败。</p>\n<h3 id=\"3、promise语法：\"><a href=\"#3、promise语法：\" class=\"headerlink\" title=\"3、promise语法：\"></a>3、promise语法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;...&#125; <span class=\"comment\">/* executor */</span>  );</span><br></pre></td></tr></table></figure>\n<p>promise参数 executor</p>\n<p>executor执行器函数包括两个参数resolve 和 reject，<code>Promise构造函数执行时会立即调用exector函数（宏任务同步操作）</code>，resolve 和 reject函数会被当作参数传给exector函数。exector函数一般会执行一些异步函数，异步函数调用的成功和失败分别调用resolve函数和reject函数，将promise状态分别转为fulfiled和rejected状态。</p>\n<p><strong>eg:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAsyncFunction</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"GET\"</span>, url); <span class=\"comment\">// 通过url建立链接</span></span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(xhr.responseText); <span class=\"comment\">//接收到完整响应数据时触发</span></span><br><span class=\"line\">    xhr.onerror = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(xhr.statusText); <span class=\"comment\">//请求发生错误的时候触发。</span></span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>代码中的onload，onerror属于W3C规范中进度事件.进度事件规范定义了与客户端与服务器通信相关的一系列事件，这些事件监听了通信进程中的各个关键节点，使我们能够以更细的颗粒度掌控数据传输过程中的细节。<br>","more":"</p>\n</blockquote>\n<h4 id=\"3-1、promise在事件轮循的注意事项：\"><a href=\"#3-1、promise在事件轮循的注意事项：\" class=\"headerlink\" title=\"3.1、promise在事件轮循的注意事项：\"></a>3.1、promise在事件轮循的注意事项：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">    resolve(<span class=\"number\">24</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'number'</span>);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">hello</span></span><br><span class=\"line\"><span class=\"comment\">world</span></span><br><span class=\"line\"><span class=\"comment\">number</span></span><br><span class=\"line\"><span class=\"comment\">24</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><code>Promise本身是同步的立即执行函数</code>，在执行到resolve()的时候属于异步操作，会把参数传给.then(),并将它放到微任务异步队列里。所以当executor函数中执行完同步操作后，console.log(‘number’)被放到函数调用栈，调用栈的宏观同步任务执行完后，会去微任务队列里取微任务到调用栈。</p>\n<h3 id=\"4、Promise-prototype-then-onFulfilled-onRejected\"><a href=\"#4、Promise-prototype-then-onFulfilled-onRejected\" class=\"headerlink\" title=\"4、Promise.prototype.then(onFulfilled, onRejected)\"></a>4、Promise.prototype.then(onFulfilled, onRejected)</h3><p>当new Promise((resolve,reject) =&gt; resolve())的时候对应执行then操作，代表Promise的成功状态(fulfilled)。</p>\n<p>当Promise变成接受状态（fulfilled）时，onFulfilled参数作为回调函数被调用。</p>\n<p>当Promise变成拒绝状态（rejected ）时，onRejected参数作为回调函数被调用。此时等价与.catch()功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 'bar' 不是函数，会在内部被替换为 (x) =&gt; x</span></span><br><span class=\"line\">p.then(<span class=\"string\">'bar'</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value) <span class=\"comment\">// 'foo'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>.then()的参数如果只有一个字符串的话，此时可以忽略这个参数。<br>.then(String) &lt;=&gt; .then((value) =&gt; value) 其中value代表Promise的返回值。</p>\n<h4 id=\"4-1、promise-then-的注意事项：\"><a href=\"#4-1、promise-then-的注意事项：\" class=\"headerlink\" title=\"4.1、promise.then()的注意事项：\"></a>4.1、promise.then()的注意事项：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使 .then() 返回一个 rejected promise</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'Oh no!'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch( <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error( <span class=\"string\">'onRejected function called: '</span>, reason );</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">\"I am always called even if the prior then's promise rejects\"</span> );</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>当promise.then()返回的状态是rejected promise 的时候这个时候会被catch()捕获，<br>这时候只要catch中不返回rejected。此时都会执行后面的then操作。</p>\n<h4 id=\"4-2-注意promise和setTimeOut-的优先级：\"><a href=\"#4-2-注意promise和setTimeOut-的优先级：\" class=\"headerlink\" title=\"4.2 注意promise和setTimeOut()的优先级：\"></a>4.2 注意promise和setTimeOut()的优先级：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">\"foo\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 1. 接收 \"foo\" 并与 \"bar\" 拼接，并将其结果做为下一个resolve返回。</span></span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        string += <span class=\"string\">'bar'</span>;</span><br><span class=\"line\">        resolve(string);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 2. 接收 \"foobar\", 放入一个异步函数中处理该字符串</span></span><br><span class=\"line\">  <span class=\"comment\">// 并将其打印到控制台中, 但是不将处理后的字符串返回到下一个。</span></span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      string += <span class=\"string\">'baz'</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(string);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> string;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 3. 打印本节中代码将如何运行的帮助消息，</span></span><br><span class=\"line\">  <span class=\"comment\">// 字符串实际上是由上一个回调函数之前的那块异步代码处理的。</span></span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Last Then:  oops... didn't bother to instantiate and return \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"a promise in the prior then so the sequence may be a bit \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"surprising\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意 `string` 这时不会存在 'baz'。</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为这是发生在我们通过setTimeout模拟的异步函数中。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(string);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>第一个then()方法中返回了一个新定义的Promise对象，等待1ms后返回一个promiseValue为foobar的值和fulfiled状态。此时执行下一个then(),把foobar传给浏览器定时器API，然后将它放入宏任务异步队列中，return string进入函数调用栈，将值传给下一个then(),此时将then()中的onFulfilled函数放入微任务队列中，此时调用栈为空。微任务队列中只有第三个.then()的内容，将微任务队列清空，将其中的同步代码放入调用栈，打印两个console.log()语句到控制台。最后执行宏任务队列中的setTimeOut()的回调函数。</p>\n<h3 id=\"5、Promise-prototype-catch-onRejected\"><a href=\"#5、Promise-prototype-catch-onRejected\" class=\"headerlink\" title=\"5、Promise.prototype.catch(onRejected)\"></a>5、Promise.prototype.catch(onRejected)</h3><p>当返回一个rejected promise的时候，或者throw出一个错，此时会被catch()捕获<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'Uh-oh!'</span>;</span><br><span class=\"line\">&#125;).catch();</span><br><span class=\"line\">&lt;=&gt;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'Uh-oh!'</span>);</span><br><span class=\"line\">&#125;).catch();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-1、catch-的注意事项；\"><a href=\"#5-1、catch-的注意事项；\" class=\"headerlink\" title=\"5.1、catch()的注意事项；\"></a>5.1、catch()的注意事项；</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在异步函数中抛出的错误不会被catch捕获到</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'Uncaught Exception!'</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p2.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 不会执行</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在resolve()后面抛出的错误会被忽略</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'Silenced Exception!'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p3.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 不会执行</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在异步函数中抛错之所以无法被catch到的原因是：new Promise是同步的立即执行函数，执行到setTimeout函数，将它放到宏任务异步队列中，宏任务异步队列的执行优先级最低。只有当微任务异步队列和函数调用栈队列为空时才会调用。当setTimeout函数执行时，外部已经没有代码可以接到它所抛出的错误。所以异步回调函数抛出的错总是因为函数调用栈为空，没有代码可以承接错误而导致无法被捕获到。</p>\n<h3 id=\"6、Promise-prototype-all-iterable\"><a href=\"#6、Promise-prototype-all-iterable\" class=\"headerlink\" title=\"6、Promise.prototype.all(iterable)\"></a>6、Promise.prototype.all(iterable)</h3><p>当promise.all()内没有参数的时候，返回一个已完成状态的promise。</p>\n<p>如果所有传入的 promise 都变为完成状态，或者传入的可迭代对象内没有 promise，Promise.all 返回的 promise 异步地变为完成。</p>\n<p>在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个数组</p>\n<p>如果传入的 promise 中有一个失败（rejected），promise.all 异步地将失败的那个结果给失败状态的回调函数，而不管其它 promise 是否完成。</p>\n<h4 id=\"6-1-Promise-all-的注意事项\"><a href=\"#6-1-Promise-all-的注意事项\" class=\"headerlink\" title=\"6.1 Promise.all()的注意事项\"></a>6.1 Promise.all()的注意事项</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'报错了'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"built_in\">console</span>.log(result))</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br><span class=\"line\"><span class=\"comment\">// [\"hello\", Error: 报错了]</span></span><br></pre></td></tr></table></figure>\n<p>当p1执行成功状态变为resolved，p2执行的时候会出错跳到catch()，执行完状态也会变为resolved，所以Promise.all()可以正常执行。</p>\n<p>如果p2没有catch的化，状态还是rejected，此时的Promise.all()不会执行。</p>\n<p>Promise.all()代码实现: <a href=\"https://ustc-han.github.io/2019/04/22/promise.all()%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/\">https://ustc-han.github.io/2019/04/22/promise.all()%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</a></p>\n<h3 id=\"7、Promise-prototype-race-iterable\"><a href=\"#7、Promise-prototype-race-iterable\" class=\"headerlink\" title=\"7、Promise.prototype.race(iterable)\"></a>7、Promise.prototype.race(iterable)</h3><p>Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，就会返回一个解决状态或拒绝状态的promise。简言之，以最先返回结果的promise的状态为准。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"three\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </span><br><span class=\"line\">    setTimeout(reject, <span class=\"number\">500</span>, <span class=\"string\">\"four\"</span>); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p3, p4]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"three\"</span></span><br><span class=\"line\">  <span class=\"comment\">// p3 更快，所以它完成了              </span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 未被调用</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">'one'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">'two'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([promise1, promise2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">  <span class=\"comment\">// Both resolve, but promise2 is faster</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// expected output: \"two\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8、创建已处理的Promise\"><a href=\"#8、创建已处理的Promise\" class=\"headerlink\" title=\"8、创建已处理的Promise\"></a>8、创建已处理的Promise</h3><h4 id=\"8-1-Promise-resolve-value\"><a href=\"#8-1-Promise-resolve-value\" class=\"headerlink\" title=\"8.1 Promise.resolve(value)\"></a>8.1 Promise.resolve(value)</h4><p>value的值分多种情况，当value的值是Promise，此时Promise.resolve()不起作用，返回的promise状态和value的最后状态保持一致。当value是thenable（带有then方法），返回的promise会“跟随”这个thenable的对象，采用它的最终状态。其它情况返回成功状态的promise。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(value);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(promise);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(thenable);</span><br></pre></td></tr></table></figure>\n<p>thenable函数使用第一参数函数返回一个成功状态的promise,使用第二个参数函数返回一个失败的promise。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(&#123; </span><br><span class=\"line\">  then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test, rej</span>) </span>&#123; rej(<span class=\"string\">\"rejected!\"</span>); &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) <span class=\"comment\">// true, 这是一个Promise对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v); </span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e) <span class=\"comment\">//rejected</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-2-Promise-reject-reason\"><a href=\"#8-2-Promise-reject-reason\" class=\"headerlink\" title=\"8.2 Promise.reject(reason)\"></a>8.2 Promise.reject(reason)</h4><p>Promise.reject返回一个被拒绝的Promise对象，<br>参数代表被拒绝的原因。</p>\n<p>Promise.reject(reason).catch((reason) =&gt; …);</p>"},{"title":"VSCode-PicGo插件","_content":"\n## picGo插件\n  使用VSCode编写MarkDown文档的时候，插入图片一般比较困难，现在使用VSCode的picGo的插件可以解决这个问题。\n### 使用gitHub图床\n 1、新建一个gitHub仓库，命名随意：\n 2、进入settings -> Develop settings -> personal access tokens\n -> generate new token -> 输入仓库名勾选repo -> 生成tokens\n ![20190612122116.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612122116.png)\n3、进入VSCode的设置页面，填入如下信息：\n![20190612122350.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612122350.png)\n\n4、重新启动VSCode，新建.md文件\n截图后使用快捷键 cmd+opt+u,图片会自动上传到gitHub并生成MarkDown图片链接。\n\n生成的链接：\n![20190612123205.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612123205.png)\n\ngitHub仓库：\n![20190612123139.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612123139.png)\n\n\n[参考链接](https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A)\n","source":"_posts/Picgo.md","raw":"---\ntitle: VSCode-PicGo插件\ntags: \n- 开发工具\n- PicGo\n- Markdown\n---\n\n## picGo插件\n  使用VSCode编写MarkDown文档的时候，插入图片一般比较困难，现在使用VSCode的picGo的插件可以解决这个问题。\n### 使用gitHub图床\n 1、新建一个gitHub仓库，命名随意：\n 2、进入settings -> Develop settings -> personal access tokens\n -> generate new token -> 输入仓库名勾选repo -> 生成tokens\n ![20190612122116.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612122116.png)\n3、进入VSCode的设置页面，填入如下信息：\n![20190612122350.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612122350.png)\n\n4、重新启动VSCode，新建.md文件\n截图后使用快捷键 cmd+opt+u,图片会自动上传到gitHub并生成MarkDown图片链接。\n\n生成的链接：\n![20190612123205.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612123205.png)\n\ngitHub仓库：\n![20190612123139.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612123139.png)\n\n\n[参考链接](https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A)\n","slug":"Picgo","published":1,"date":"2019-12-19T15:52:56.135Z","updated":"2019-12-19T15:52:56.135Z","_id":"ck4cwgnhu000kckukawdfb1ai","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"picGo插件\"><a href=\"#picGo插件\" class=\"headerlink\" title=\"picGo插件\"></a>picGo插件</h2><p>  使用VSCode编写MarkDown文档的时候，插入图片一般比较困难，现在使用VSCode的picGo的插件可以解决这个问题。</p>\n<h3 id=\"使用gitHub图床\"><a href=\"#使用gitHub图床\" class=\"headerlink\" title=\"使用gitHub图床\"></a>使用gitHub图床</h3><p> 1、新建一个gitHub仓库，命名随意：<br> 2、进入settings -&gt; Develop settings -&gt; personal access tokens<br> -&gt; generate new token -&gt; 输入仓库名勾选repo -&gt; 生成tokens<br> <img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612122116.png\" alt=\"20190612122116.png\"><br>3、进入VSCode的设置页面，填入如下信息：<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612122350.png\" alt=\"20190612122350.png\"></p>\n<p>4、重新启动VSCode，新建.md文件<br>截图后使用快捷键 cmd+opt+u,图片会自动上传到gitHub并生成MarkDown图片链接。</p>\n<p>生成的链接：<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612123205.png\" alt=\"20190612123205.png\"></p>\n<p>gitHub仓库：<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612123139.png\" alt=\"20190612123139.png\"></p>\n<p><a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"picGo插件\"><a href=\"#picGo插件\" class=\"headerlink\" title=\"picGo插件\"></a>picGo插件</h2><p>  使用VSCode编写MarkDown文档的时候，插入图片一般比较困难，现在使用VSCode的picGo的插件可以解决这个问题。</p>\n<h3 id=\"使用gitHub图床\"><a href=\"#使用gitHub图床\" class=\"headerlink\" title=\"使用gitHub图床\"></a>使用gitHub图床</h3><p> 1、新建一个gitHub仓库，命名随意：<br> 2、进入settings -&gt; Develop settings -&gt; personal access tokens<br> -&gt; generate new token -&gt; 输入仓库名勾选repo -&gt; 生成tokens<br> <img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612122116.png\" alt=\"20190612122116.png\"><br>3、进入VSCode的设置页面，填入如下信息：<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612122350.png\" alt=\"20190612122350.png\"></p>\n<p>4、重新启动VSCode，新建.md文件<br>截图后使用快捷键 cmd+opt+u,图片会自动上传到gitHub并生成MarkDown图片链接。</p>\n<p>生成的链接：<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612123205.png\" alt=\"20190612123205.png\"></p>\n<p>gitHub仓库：<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190612123139.png\" alt=\"20190612123139.png\"></p>\n<p><a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n"},{"title":"webSocket 和 webWorker","toc":true,"_content":"## WebSocket\n  WebSocket是html5中提出的一个新的应用层通信协议，位于OSI模型的应用层，建立在TCP链接上。\n\n  HTTP存在缺陷，请求只能客户端发起。如果要实时的更新的服务器的状态变化需要使用Ajax轮询，轮询的效率比较低，浪费资源。\n\n  WebSocket最大的特点是服务器可以主动向客户端推送消息，客户端也可以向服务端推送消息，实现了全双工通信。可以将WebSocket看成HTTP协议的补充，\n  在之前HTTP协议中使用Keep-alice connection是在一次TCP链接中可以传输多次HTTP请求，但是依旧采用轮询的方式。WebSocket 解决的第一个问题是，\n  通过第一个 HTTP request 建立了 TCP 连接之后，之后的交换数据都不需要再发 HTTP request了。\n\n## Web Worker\n\njs采用的是单线程模式，也就是说所有任务只能在同一个线程上运行，随着多核CPU的普及，单线程无法充分发挥计算机的计算能力。\n\nWeb Worker的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。\n\nWorker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。\n\nWeb worker的几个重要的特点：\n1、传给worker中的脚本需要与主线程的脚本文件同源。\n2、Worker 线程与主线程不在同一个上下文中，不能执行Dom操作，如果需要可以通过消息传递将数据传递给主线程。\n3、worker线程无法运行本地文件，只能执行线上文件。\n\n常用API：\n主线程：\n- 创建worker:\n    var worker = new Worker('js脚本')；\n- 消息传递：\n    worker.postMessage()：向 Worker 线程发送消息。\n    worker.onmessage：message 事件的监听函数，发送过来的数据在event.data属性中\n- worker错误监听：\n    worker.onerror：worker内部运行出错的时候，调用主线程onerror\n- 终止worker：\n    worker.terminate()：立即终止 Worker 线程。\n\nworker：\n- 消息传递：\n    postMessage()：向 Worker 线程发送消息。\n    onmessage：message 事件的监听函数，发送过来的数据在event.data属性中\n- 加载脚本：\n    importScripts()\n- 关闭worker: \n    close()：关闭 Worker 线程\n\n\n\n[参考链接1](http://www.ruanyifeng.com/blog/2017/05/websocket.html)\n\n[参考链接2](https://blog.csdn.net/lldouble/article/details/80742082)\n\n[参考链接3](http://www.ruanyifeng.com/blog/2018/07/web-worker.html)\n\n[参考链接4](https://www.zhihu.com/question/20215561/answer/40250050)\n","source":"_posts/WebSocket和WebWorker.md","raw":"---\ntitle: webSocket 和 webWorker\ntags: \n- Web\n- H5\n- webSocket\n- web Worker\ntoc: true\n---\n## WebSocket\n  WebSocket是html5中提出的一个新的应用层通信协议，位于OSI模型的应用层，建立在TCP链接上。\n\n  HTTP存在缺陷，请求只能客户端发起。如果要实时的更新的服务器的状态变化需要使用Ajax轮询，轮询的效率比较低，浪费资源。\n\n  WebSocket最大的特点是服务器可以主动向客户端推送消息，客户端也可以向服务端推送消息，实现了全双工通信。可以将WebSocket看成HTTP协议的补充，\n  在之前HTTP协议中使用Keep-alice connection是在一次TCP链接中可以传输多次HTTP请求，但是依旧采用轮询的方式。WebSocket 解决的第一个问题是，\n  通过第一个 HTTP request 建立了 TCP 连接之后，之后的交换数据都不需要再发 HTTP request了。\n\n## Web Worker\n\njs采用的是单线程模式，也就是说所有任务只能在同一个线程上运行，随着多核CPU的普及，单线程无法充分发挥计算机的计算能力。\n\nWeb Worker的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。\n\nWorker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。\n\nWeb worker的几个重要的特点：\n1、传给worker中的脚本需要与主线程的脚本文件同源。\n2、Worker 线程与主线程不在同一个上下文中，不能执行Dom操作，如果需要可以通过消息传递将数据传递给主线程。\n3、worker线程无法运行本地文件，只能执行线上文件。\n\n常用API：\n主线程：\n- 创建worker:\n    var worker = new Worker('js脚本')；\n- 消息传递：\n    worker.postMessage()：向 Worker 线程发送消息。\n    worker.onmessage：message 事件的监听函数，发送过来的数据在event.data属性中\n- worker错误监听：\n    worker.onerror：worker内部运行出错的时候，调用主线程onerror\n- 终止worker：\n    worker.terminate()：立即终止 Worker 线程。\n\nworker：\n- 消息传递：\n    postMessage()：向 Worker 线程发送消息。\n    onmessage：message 事件的监听函数，发送过来的数据在event.data属性中\n- 加载脚本：\n    importScripts()\n- 关闭worker: \n    close()：关闭 Worker 线程\n\n\n\n[参考链接1](http://www.ruanyifeng.com/blog/2017/05/websocket.html)\n\n[参考链接2](https://blog.csdn.net/lldouble/article/details/80742082)\n\n[参考链接3](http://www.ruanyifeng.com/blog/2018/07/web-worker.html)\n\n[参考链接4](https://www.zhihu.com/question/20215561/answer/40250050)\n","slug":"WebSocket和WebWorker","published":1,"date":"2019-12-19T15:52:56.137Z","updated":"2019-12-19T15:52:56.137Z","_id":"ck4cwgnhv000mckuk4yvvpkkk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h2><p>  WebSocket是html5中提出的一个新的应用层通信协议，位于OSI模型的应用层，建立在TCP链接上。</p>\n<p>  HTTP存在缺陷，请求只能客户端发起。如果要实时的更新的服务器的状态变化需要使用Ajax轮询，轮询的效率比较低，浪费资源。</p>\n<p>  WebSocket最大的特点是服务器可以主动向客户端推送消息，客户端也可以向服务端推送消息，实现了全双工通信。可以将WebSocket看成HTTP协议的补充，<br>  在之前HTTP协议中使用Keep-alice connection是在一次TCP链接中可以传输多次HTTP请求，但是依旧采用轮询的方式。WebSocket 解决的第一个问题是，<br>  通过第一个 HTTP request 建立了 TCP 连接之后，之后的交换数据都不需要再发 HTTP request了。</p>\n<h2 id=\"Web-Worker\"><a href=\"#Web-Worker\" class=\"headerlink\" title=\"Web Worker\"></a>Web Worker</h2><p>js采用的是单线程模式，也就是说所有任务只能在同一个线程上运行，随着多核CPU的普及，单线程无法充分发挥计算机的计算能力。</p>\n<p>Web Worker的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p>\n<p>Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</p>\n<p>Web worker的几个重要的特点：<br>1、传给worker中的脚本需要与主线程的脚本文件同源。<br>2、Worker 线程与主线程不在同一个上下文中，不能执行Dom操作，如果需要可以通过消息传递将数据传递给主线程。<br>3、worker线程无法运行本地文件，只能执行线上文件。</p>\n<p>常用API：<br>主线程：</p>\n<ul>\n<li>创建worker:<br>  var worker = new Worker(‘js脚本’)；</li>\n<li>消息传递：<br>  worker.postMessage()：向 Worker 线程发送消息。<br>  worker.onmessage：message 事件的监听函数，发送过来的数据在event.data属性中</li>\n<li>worker错误监听：<br>  worker.onerror：worker内部运行出错的时候，调用主线程onerror</li>\n<li>终止worker：<br>  worker.terminate()：立即终止 Worker 线程。</li>\n</ul>\n<p>worker：</p>\n<ul>\n<li>消息传递：<br>  postMessage()：向 Worker 线程发送消息。<br>  onmessage：message 事件的监听函数，发送过来的数据在event.data属性中</li>\n<li>加载脚本：<br>  importScripts()</li>\n<li>关闭worker:<br>  close()：关闭 Worker 线程</li>\n</ul>\n<p><a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n<p><a href=\"https://blog.csdn.net/lldouble/article/details/80742082\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/07/web-worker.html\" target=\"_blank\" rel=\"noopener\">参考链接3</a></p>\n<p><a href=\"https://www.zhihu.com/question/20215561/answer/40250050\" target=\"_blank\" rel=\"noopener\">参考链接4</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h2><p>  WebSocket是html5中提出的一个新的应用层通信协议，位于OSI模型的应用层，建立在TCP链接上。</p>\n<p>  HTTP存在缺陷，请求只能客户端发起。如果要实时的更新的服务器的状态变化需要使用Ajax轮询，轮询的效率比较低，浪费资源。</p>\n<p>  WebSocket最大的特点是服务器可以主动向客户端推送消息，客户端也可以向服务端推送消息，实现了全双工通信。可以将WebSocket看成HTTP协议的补充，<br>  在之前HTTP协议中使用Keep-alice connection是在一次TCP链接中可以传输多次HTTP请求，但是依旧采用轮询的方式。WebSocket 解决的第一个问题是，<br>  通过第一个 HTTP request 建立了 TCP 连接之后，之后的交换数据都不需要再发 HTTP request了。</p>\n<h2 id=\"Web-Worker\"><a href=\"#Web-Worker\" class=\"headerlink\" title=\"Web Worker\"></a>Web Worker</h2><p>js采用的是单线程模式，也就是说所有任务只能在同一个线程上运行，随着多核CPU的普及，单线程无法充分发挥计算机的计算能力。</p>\n<p>Web Worker的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p>\n<p>Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</p>\n<p>Web worker的几个重要的特点：<br>1、传给worker中的脚本需要与主线程的脚本文件同源。<br>2、Worker 线程与主线程不在同一个上下文中，不能执行Dom操作，如果需要可以通过消息传递将数据传递给主线程。<br>3、worker线程无法运行本地文件，只能执行线上文件。</p>\n<p>常用API：<br>主线程：</p>\n<ul>\n<li>创建worker:<br>  var worker = new Worker(‘js脚本’)；</li>\n<li>消息传递：<br>  worker.postMessage()：向 Worker 线程发送消息。<br>  worker.onmessage：message 事件的监听函数，发送过来的数据在event.data属性中</li>\n<li>worker错误监听：<br>  worker.onerror：worker内部运行出错的时候，调用主线程onerror</li>\n<li>终止worker：<br>  worker.terminate()：立即终止 Worker 线程。</li>\n</ul>\n<p>worker：</p>\n<ul>\n<li>消息传递：<br>  postMessage()：向 Worker 线程发送消息。<br>  onmessage：message 事件的监听函数，发送过来的数据在event.data属性中</li>\n<li>加载脚本：<br>  importScripts()</li>\n<li>关闭worker:<br>  close()：关闭 Worker 线程</li>\n</ul>\n<p><a href=\"http://www.ruanyifeng.com/blog/2017/05/websocket.html\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n<p><a href=\"https://blog.csdn.net/lldouble/article/details/80742082\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/07/web-worker.html\" target=\"_blank\" rel=\"noopener\">参考链接3</a></p>\n<p><a href=\"https://www.zhihu.com/question/20215561/answer/40250050\" target=\"_blank\" rel=\"noopener\">参考链接4</a></p>\n"},{"title":"VSCode 快捷键","_content":"# VSCode 快捷键\n### 打开控制台： cmd + shift + y\n### 文件名搜索： cmd + p\n### 打开新的窗口: cmd + shift + n\n### 关闭当前文件：cmd + W\n<!--more-->\n\n### 移动当前行：opt + 上/下\n### 复制当前行：opt + shift + 上/下\n### 在当前行下添加一行：cmd + enter\n### 跳到匹配的括号处：cmd + shift + \\\n### 跳到页尾：cmd + 下\n### 选中当前行： cmd + i\n### 注释块： opt + shit + a\n### 替换：cmd + opt + f\n### 移除光标：cmd + U\n","source":"_posts/VSCode 快捷键.md","raw":"---\ntitle: VSCode 快捷键\ntags: \n- 开发工具\n---\n# VSCode 快捷键\n### 打开控制台： cmd + shift + y\n### 文件名搜索： cmd + p\n### 打开新的窗口: cmd + shift + n\n### 关闭当前文件：cmd + W\n<!--more-->\n\n### 移动当前行：opt + 上/下\n### 复制当前行：opt + shift + 上/下\n### 在当前行下添加一行：cmd + enter\n### 跳到匹配的括号处：cmd + shift + \\\n### 跳到页尾：cmd + 下\n### 选中当前行： cmd + i\n### 注释块： opt + shit + a\n### 替换：cmd + opt + f\n### 移除光标：cmd + U\n","slug":"VSCode 快捷键","published":1,"date":"2019-12-19T15:52:56.137Z","updated":"2019-12-19T15:52:56.137Z","_id":"ck4cwgnhx000ockuk95nmt34q","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"VSCode-快捷键\"><a href=\"#VSCode-快捷键\" class=\"headerlink\" title=\"VSCode 快捷键\"></a>VSCode 快捷键</h1><h3 id=\"打开控制台：-cmd-shift-y\"><a href=\"#打开控制台：-cmd-shift-y\" class=\"headerlink\" title=\"打开控制台： cmd + shift + y\"></a>打开控制台： cmd + shift + y</h3><h3 id=\"文件名搜索：-cmd-p\"><a href=\"#文件名搜索：-cmd-p\" class=\"headerlink\" title=\"文件名搜索： cmd + p\"></a>文件名搜索： cmd + p</h3><h3 id=\"打开新的窗口-cmd-shift-n\"><a href=\"#打开新的窗口-cmd-shift-n\" class=\"headerlink\" title=\"打开新的窗口: cmd + shift + n\"></a>打开新的窗口: cmd + shift + n</h3><h3 id=\"关闭当前文件：cmd-W\"><a href=\"#关闭当前文件：cmd-W\" class=\"headerlink\" title=\"关闭当前文件：cmd + W\"></a>关闭当前文件：cmd + W</h3><a id=\"more\"></a>\n<h3 id=\"移动当前行：opt-上-下\"><a href=\"#移动当前行：opt-上-下\" class=\"headerlink\" title=\"移动当前行：opt + 上/下\"></a>移动当前行：opt + 上/下</h3><h3 id=\"复制当前行：opt-shift-上-下\"><a href=\"#复制当前行：opt-shift-上-下\" class=\"headerlink\" title=\"复制当前行：opt + shift + 上/下\"></a>复制当前行：opt + shift + 上/下</h3><h3 id=\"在当前行下添加一行：cmd-enter\"><a href=\"#在当前行下添加一行：cmd-enter\" class=\"headerlink\" title=\"在当前行下添加一行：cmd + enter\"></a>在当前行下添加一行：cmd + enter</h3><h3 id=\"跳到匹配的括号处：cmd-shift\"><a href=\"#跳到匹配的括号处：cmd-shift\" class=\"headerlink\" title=\"跳到匹配的括号处：cmd + shift + \\\"></a>跳到匹配的括号处：cmd + shift + \\</h3><h3 id=\"跳到页尾：cmd-下\"><a href=\"#跳到页尾：cmd-下\" class=\"headerlink\" title=\"跳到页尾：cmd + 下\"></a>跳到页尾：cmd + 下</h3><h3 id=\"选中当前行：-cmd-i\"><a href=\"#选中当前行：-cmd-i\" class=\"headerlink\" title=\"选中当前行： cmd + i\"></a>选中当前行： cmd + i</h3><h3 id=\"注释块：-opt-shit-a\"><a href=\"#注释块：-opt-shit-a\" class=\"headerlink\" title=\"注释块： opt + shit + a\"></a>注释块： opt + shit + a</h3><h3 id=\"替换：cmd-opt-f\"><a href=\"#替换：cmd-opt-f\" class=\"headerlink\" title=\"替换：cmd + opt + f\"></a>替换：cmd + opt + f</h3><h3 id=\"移除光标：cmd-U\"><a href=\"#移除光标：cmd-U\" class=\"headerlink\" title=\"移除光标：cmd + U\"></a>移除光标：cmd + U</h3>","site":{"data":{}},"excerpt":"<h1 id=\"VSCode-快捷键\"><a href=\"#VSCode-快捷键\" class=\"headerlink\" title=\"VSCode 快捷键\"></a>VSCode 快捷键</h1><h3 id=\"打开控制台：-cmd-shift-y\"><a href=\"#打开控制台：-cmd-shift-y\" class=\"headerlink\" title=\"打开控制台： cmd + shift + y\"></a>打开控制台： cmd + shift + y</h3><h3 id=\"文件名搜索：-cmd-p\"><a href=\"#文件名搜索：-cmd-p\" class=\"headerlink\" title=\"文件名搜索： cmd + p\"></a>文件名搜索： cmd + p</h3><h3 id=\"打开新的窗口-cmd-shift-n\"><a href=\"#打开新的窗口-cmd-shift-n\" class=\"headerlink\" title=\"打开新的窗口: cmd + shift + n\"></a>打开新的窗口: cmd + shift + n</h3><h3 id=\"关闭当前文件：cmd-W\"><a href=\"#关闭当前文件：cmd-W\" class=\"headerlink\" title=\"关闭当前文件：cmd + W\"></a>关闭当前文件：cmd + W</h3>","more":"<h3 id=\"移动当前行：opt-上-下\"><a href=\"#移动当前行：opt-上-下\" class=\"headerlink\" title=\"移动当前行：opt + 上/下\"></a>移动当前行：opt + 上/下</h3><h3 id=\"复制当前行：opt-shift-上-下\"><a href=\"#复制当前行：opt-shift-上-下\" class=\"headerlink\" title=\"复制当前行：opt + shift + 上/下\"></a>复制当前行：opt + shift + 上/下</h3><h3 id=\"在当前行下添加一行：cmd-enter\"><a href=\"#在当前行下添加一行：cmd-enter\" class=\"headerlink\" title=\"在当前行下添加一行：cmd + enter\"></a>在当前行下添加一行：cmd + enter</h3><h3 id=\"跳到匹配的括号处：cmd-shift\"><a href=\"#跳到匹配的括号处：cmd-shift\" class=\"headerlink\" title=\"跳到匹配的括号处：cmd + shift + \\\"></a>跳到匹配的括号处：cmd + shift + \\</h3><h3 id=\"跳到页尾：cmd-下\"><a href=\"#跳到页尾：cmd-下\" class=\"headerlink\" title=\"跳到页尾：cmd + 下\"></a>跳到页尾：cmd + 下</h3><h3 id=\"选中当前行：-cmd-i\"><a href=\"#选中当前行：-cmd-i\" class=\"headerlink\" title=\"选中当前行： cmd + i\"></a>选中当前行： cmd + i</h3><h3 id=\"注释块：-opt-shit-a\"><a href=\"#注释块：-opt-shit-a\" class=\"headerlink\" title=\"注释块： opt + shit + a\"></a>注释块： opt + shit + a</h3><h3 id=\"替换：cmd-opt-f\"><a href=\"#替换：cmd-opt-f\" class=\"headerlink\" title=\"替换：cmd + opt + f\"></a>替换：cmd + opt + f</h3><h3 id=\"移除光标：cmd-U\"><a href=\"#移除光标：cmd-U\" class=\"headerlink\" title=\"移除光标：cmd + U\"></a>移除光标：cmd + U</h3>"},{"title":"关于align-items:center和align-content:center的思考","toc":true,"_content":"\n## 前言\nflex布局中可以通过flex-direction来设置主轴和交叉轴，其中align-items则是用来操作在交叉轴方向的布局方式的。关于flex的基础讲解推荐这篇[文章](https://www.cnblogs.com/qcloud1001/p/9848619.html)。\n\n## align-items\nalign-items定义了元素在交叉轴上的对齐方式。\n\n单行的center情况不用细说，多行的时候使用align-items的表现会是怎么样呢？\n\n![20190825165139.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190825165139.png)\n\n当align-items设置多行元素center的时候，有点类似于space-around的感觉。每两个块中间的高度是外侧高度的两倍。每行元素的中线在自己所分空间的交叉轴方向居中。\n\n## align-content\n对于align-content，它会吧所有元素看成一个整体，在交叉轴居中。\n![20190825165710.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190825165710.png)\n\n---\n代码演示链接：https://codepen.io/ustc-han/pen/bGbBYOa?editors=1100\n","source":"_posts/align-items和align-content区别.md","raw":"---\ntitle: 关于align-items:center和align-content:center的思考\ntags: \n- CSS\n- flex\n- align-items\n- align-content\ntoc: true\n---\n\n## 前言\nflex布局中可以通过flex-direction来设置主轴和交叉轴，其中align-items则是用来操作在交叉轴方向的布局方式的。关于flex的基础讲解推荐这篇[文章](https://www.cnblogs.com/qcloud1001/p/9848619.html)。\n\n## align-items\nalign-items定义了元素在交叉轴上的对齐方式。\n\n单行的center情况不用细说，多行的时候使用align-items的表现会是怎么样呢？\n\n![20190825165139.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190825165139.png)\n\n当align-items设置多行元素center的时候，有点类似于space-around的感觉。每两个块中间的高度是外侧高度的两倍。每行元素的中线在自己所分空间的交叉轴方向居中。\n\n## align-content\n对于align-content，它会吧所有元素看成一个整体，在交叉轴居中。\n![20190825165710.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190825165710.png)\n\n---\n代码演示链接：https://codepen.io/ustc-han/pen/bGbBYOa?editors=1100\n","slug":"align-items和align-content区别","published":1,"date":"2019-12-19T15:52:56.137Z","updated":"2019-12-19T15:52:56.138Z","_id":"ck4cwgnhy000rckukiiiu48et","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>flex布局中可以通过flex-direction来设置主轴和交叉轴，其中align-items则是用来操作在交叉轴方向的布局方式的。关于flex的基础讲解推荐这篇<a href=\"https://www.cnblogs.com/qcloud1001/p/9848619.html\" target=\"_blank\" rel=\"noopener\">文章</a>。</p>\n<h2 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h2><p>align-items定义了元素在交叉轴上的对齐方式。</p>\n<p>单行的center情况不用细说，多行的时候使用align-items的表现会是怎么样呢？</p>\n<p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190825165139.png\" alt=\"20190825165139.png\"></p>\n<p>当align-items设置多行元素center的时候，有点类似于space-around的感觉。每两个块中间的高度是外侧高度的两倍。每行元素的中线在自己所分空间的交叉轴方向居中。</p>\n<h2 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h2><p>对于align-content，它会吧所有元素看成一个整体，在交叉轴居中。<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190825165710.png\" alt=\"20190825165710.png\"></p>\n<hr>\n<p>代码演示链接：<a href=\"https://codepen.io/ustc-han/pen/bGbBYOa?editors=1100\" target=\"_blank\" rel=\"noopener\">https://codepen.io/ustc-han/pen/bGbBYOa?editors=1100</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>flex布局中可以通过flex-direction来设置主轴和交叉轴，其中align-items则是用来操作在交叉轴方向的布局方式的。关于flex的基础讲解推荐这篇<a href=\"https://www.cnblogs.com/qcloud1001/p/9848619.html\" target=\"_blank\" rel=\"noopener\">文章</a>。</p>\n<h2 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h2><p>align-items定义了元素在交叉轴上的对齐方式。</p>\n<p>单行的center情况不用细说，多行的时候使用align-items的表现会是怎么样呢？</p>\n<p><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190825165139.png\" alt=\"20190825165139.png\"></p>\n<p>当align-items设置多行元素center的时候，有点类似于space-around的感觉。每两个块中间的高度是外侧高度的两倍。每行元素的中线在自己所分空间的交叉轴方向居中。</p>\n<h2 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h2><p>对于align-content，它会吧所有元素看成一个整体，在交叉轴居中。<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190825165710.png\" alt=\"20190825165710.png\"></p>\n<hr>\n<p>代码演示链接：<a href=\"https://codepen.io/ustc-han/pen/bGbBYOa?editors=1100\" target=\"_blank\" rel=\"noopener\">https://codepen.io/ustc-han/pen/bGbBYOa?editors=1100</a></p>\n"},{"title":"async函数","toc":true,"_content":"### 1、什么是async函数：\n\nasync函数是js处理异步函数的最终解决方案，它的语法看起来是用同步的代码结构来描述异步的代码。async函数返回值是一个成功或者失败状态的Promise，但必须等到内部所有的Promise执行完以后，才会发生状态改变。\n\n#### 1.1、 async函数的优点\nasync/await是Generator函数的语法糖，相比之下会有如下优点：\n\n##### 1、内置执行器：\n\nasync函数自带执行器，不需要调用next()方法。\n\n##### 2、更好的语义：\n\nasync/await相对与*/yield来说有更好的语义\n\n##### 3、更好的适用性：\n对于yield，后面只能是thunk或者promise函数。而await后面可以是promise和原始类型值，如果不是Promise的话，会将其默认转化为Promise\n\n##### 4、返回值是promise\nasync函数返回值是promise类型，而Generator函数必须是Iterator 对象\n<!--more-->\n### 2、async函数的语法\n#### 2.1 async函数结构表达式：\n\n```\nasync function name([param[, param[, ... param]]]) {\n   statements\n}\n```\neg:\n\n```js\nfunction resolveAfter2Seconds() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('resolved');\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log('calling');\n  var result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: 'resolved'\n}\n\nasyncCall();\n// 'calling'\n// after 2 second\n//resolved \n```\n#### 2.2、async函数的注意事项\nasync函数中await可以暂停函数的执行，等到异步函数返回执行结果的时候再继续执行函数。\n\nawait关键字只能用在async函数中，用在其它地方会抛错。\n\nasync函数不同于promise函数，函数中使用return不是必须的，如果含有return，则返回的Promise中的promiseValue的值不为undefide。否则依旧会返回一个promiseValue为空的Promise。\n\n#### 3、async函数的错误处理机制\n\n在async函数中，如果await后面的异步函数中抛出错，则async函数剩余的函数都将不会执行。\n\n如下所示：\n```\nasync function f() {\n  await Promise.reject('出错了');\n  await Promise.resolve('hello world'); // 不会执行\n}\n```\n有时候我们希望一个await函数执行失败后，不要影响其它函数的执行。可以将await用try{}catch(){}包起来。\n\n如下所示：\n```js\nasync function f() {\n  try {\n    await Promise.reject('出错了');\n  } catch(e) {\n  console.log(e)\n  }\n  return await Promise.resolve('hello world');\n}\n\nf()\n.then(v => console.log(v))\n// hello world\n\n```\n#### 4、async函数并发执行\n当多个await命令后的函数之间没有依赖关系的时候，可以考虑让它们并发的执行：\n\n```js\nvar resolveAfter2Seconds = function() {\n  console.log(\"starting slow promise\");\n  return new Promise(resolve => {\n    setTimeout(function() {\n      resolve(\"slow\");\n      console.log(\"slow promise is done\");\n    }, 2000);\n  });\n};\n\nvar resolveAfter1Second = function() {\n  console.log(\"starting fast promise\");\n  return new Promise(resolve => {\n    setTimeout(function() {\n      resolve(\"fast\");\n      console.log(\"fast promise is done\");\n    }, 1000);\n  });\n};\n```\n\n```js\nvar sequentialStart = async function() {\n  console.log('==SEQUENTIAL START==');\n\n  // 1. Execution gets here almost instantly\n  const slow = await resolveAfter2Seconds();\n  console.log(slow); // 2. this runs 2 seconds after 1.\n\n  const fast = await resolveAfter1Second();\n  console.log(fast); // 3. this runs 3 seconds after 1.\n}\n// sequentialStart函数执行完需要三秒，两个无关的函数顺序执行\n```\n\n```\nvar concurrentStart = async function() {\n  console.log('==CONCURRENT START with await==');\n  const slow = resolveAfter2Seconds(); // starts timer immediately\n  const fast = resolveAfter1Second(); // starts timer immediately\n\n  // 1. Execution gets here almost instantly\n  console.log(await slow); // 2. this runs 2 seconds after 1.\n  console.log(await fast); // 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved\n}\n```\n```\nvar concurrentPromise = function() {\n  console.log('==CONCURRENT START with Promise.all==');\n  return Promise.all([resolveAfter2Seconds(), resolveAfter1Second()]).then((messages) => {\n    console.log(messages[0]); // slow\n    console.log(messages[1]); // fast\n  });\n}\n```\n`concurrentStart和concurrentPromise是两种异步函数无耦合的情况的下并发执行的方式\n`\n\n\n\n","source":"_posts/async函数整理.md","raw":"---\ntitle: async函数\ntoc: true\ntags: \n- JS\n- Async\n---\n### 1、什么是async函数：\n\nasync函数是js处理异步函数的最终解决方案，它的语法看起来是用同步的代码结构来描述异步的代码。async函数返回值是一个成功或者失败状态的Promise，但必须等到内部所有的Promise执行完以后，才会发生状态改变。\n\n#### 1.1、 async函数的优点\nasync/await是Generator函数的语法糖，相比之下会有如下优点：\n\n##### 1、内置执行器：\n\nasync函数自带执行器，不需要调用next()方法。\n\n##### 2、更好的语义：\n\nasync/await相对与*/yield来说有更好的语义\n\n##### 3、更好的适用性：\n对于yield，后面只能是thunk或者promise函数。而await后面可以是promise和原始类型值，如果不是Promise的话，会将其默认转化为Promise\n\n##### 4、返回值是promise\nasync函数返回值是promise类型，而Generator函数必须是Iterator 对象\n<!--more-->\n### 2、async函数的语法\n#### 2.1 async函数结构表达式：\n\n```\nasync function name([param[, param[, ... param]]]) {\n   statements\n}\n```\neg:\n\n```js\nfunction resolveAfter2Seconds() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('resolved');\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log('calling');\n  var result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: 'resolved'\n}\n\nasyncCall();\n// 'calling'\n// after 2 second\n//resolved \n```\n#### 2.2、async函数的注意事项\nasync函数中await可以暂停函数的执行，等到异步函数返回执行结果的时候再继续执行函数。\n\nawait关键字只能用在async函数中，用在其它地方会抛错。\n\nasync函数不同于promise函数，函数中使用return不是必须的，如果含有return，则返回的Promise中的promiseValue的值不为undefide。否则依旧会返回一个promiseValue为空的Promise。\n\n#### 3、async函数的错误处理机制\n\n在async函数中，如果await后面的异步函数中抛出错，则async函数剩余的函数都将不会执行。\n\n如下所示：\n```\nasync function f() {\n  await Promise.reject('出错了');\n  await Promise.resolve('hello world'); // 不会执行\n}\n```\n有时候我们希望一个await函数执行失败后，不要影响其它函数的执行。可以将await用try{}catch(){}包起来。\n\n如下所示：\n```js\nasync function f() {\n  try {\n    await Promise.reject('出错了');\n  } catch(e) {\n  console.log(e)\n  }\n  return await Promise.resolve('hello world');\n}\n\nf()\n.then(v => console.log(v))\n// hello world\n\n```\n#### 4、async函数并发执行\n当多个await命令后的函数之间没有依赖关系的时候，可以考虑让它们并发的执行：\n\n```js\nvar resolveAfter2Seconds = function() {\n  console.log(\"starting slow promise\");\n  return new Promise(resolve => {\n    setTimeout(function() {\n      resolve(\"slow\");\n      console.log(\"slow promise is done\");\n    }, 2000);\n  });\n};\n\nvar resolveAfter1Second = function() {\n  console.log(\"starting fast promise\");\n  return new Promise(resolve => {\n    setTimeout(function() {\n      resolve(\"fast\");\n      console.log(\"fast promise is done\");\n    }, 1000);\n  });\n};\n```\n\n```js\nvar sequentialStart = async function() {\n  console.log('==SEQUENTIAL START==');\n\n  // 1. Execution gets here almost instantly\n  const slow = await resolveAfter2Seconds();\n  console.log(slow); // 2. this runs 2 seconds after 1.\n\n  const fast = await resolveAfter1Second();\n  console.log(fast); // 3. this runs 3 seconds after 1.\n}\n// sequentialStart函数执行完需要三秒，两个无关的函数顺序执行\n```\n\n```\nvar concurrentStart = async function() {\n  console.log('==CONCURRENT START with await==');\n  const slow = resolveAfter2Seconds(); // starts timer immediately\n  const fast = resolveAfter1Second(); // starts timer immediately\n\n  // 1. Execution gets here almost instantly\n  console.log(await slow); // 2. this runs 2 seconds after 1.\n  console.log(await fast); // 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved\n}\n```\n```\nvar concurrentPromise = function() {\n  console.log('==CONCURRENT START with Promise.all==');\n  return Promise.all([resolveAfter2Seconds(), resolveAfter1Second()]).then((messages) => {\n    console.log(messages[0]); // slow\n    console.log(messages[1]); // fast\n  });\n}\n```\n`concurrentStart和concurrentPromise是两种异步函数无耦合的情况的下并发执行的方式\n`\n\n\n\n","slug":"async函数整理","published":1,"date":"2019-12-19T15:52:56.138Z","updated":"2019-12-19T15:52:56.138Z","_id":"ck4cwgnhy000tckuk5x3fy592","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、什么是async函数：\"><a href=\"#1、什么是async函数：\" class=\"headerlink\" title=\"1、什么是async函数：\"></a>1、什么是async函数：</h3><p>async函数是js处理异步函数的最终解决方案，它的语法看起来是用同步的代码结构来描述异步的代码。async函数返回值是一个成功或者失败状态的Promise，但必须等到内部所有的Promise执行完以后，才会发生状态改变。</p>\n<h4 id=\"1-1、-async函数的优点\"><a href=\"#1-1、-async函数的优点\" class=\"headerlink\" title=\"1.1、 async函数的优点\"></a>1.1、 async函数的优点</h4><p>async/await是Generator函数的语法糖，相比之下会有如下优点：</p>\n<h5 id=\"1、内置执行器：\"><a href=\"#1、内置执行器：\" class=\"headerlink\" title=\"1、内置执行器：\"></a>1、内置执行器：</h5><p>async函数自带执行器，不需要调用next()方法。</p>\n<h5 id=\"2、更好的语义：\"><a href=\"#2、更好的语义：\" class=\"headerlink\" title=\"2、更好的语义：\"></a>2、更好的语义：</h5><p>async/await相对与*/yield来说有更好的语义</p>\n<h5 id=\"3、更好的适用性：\"><a href=\"#3、更好的适用性：\" class=\"headerlink\" title=\"3、更好的适用性：\"></a>3、更好的适用性：</h5><p>对于yield，后面只能是thunk或者promise函数。而await后面可以是promise和原始类型值，如果不是Promise的话，会将其默认转化为Promise</p>\n<h5 id=\"4、返回值是promise\"><a href=\"#4、返回值是promise\" class=\"headerlink\" title=\"4、返回值是promise\"></a>4、返回值是promise</h5><p>async函数返回值是promise类型，而Generator函数必须是Iterator 对象<br><a id=\"more\"></a></p>\n<h3 id=\"2、async函数的语法\"><a href=\"#2、async函数的语法\" class=\"headerlink\" title=\"2、async函数的语法\"></a>2、async函数的语法</h3><h4 id=\"2-1-async函数结构表达式：\"><a href=\"#2-1-async函数结构表达式：\" class=\"headerlink\" title=\"2.1 async函数结构表达式：\"></a>2.1 async函数结构表达式：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function name([param[, param[, ... param]]]) &#123;</span><br><span class=\"line\">   statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>eg:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAfter2Seconds</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">'resolved'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncCall</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'calling'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> resolveAfter2Seconds();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"comment\">// expected output: 'resolved'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">asyncCall();</span><br><span class=\"line\"><span class=\"comment\">// 'calling'</span></span><br><span class=\"line\"><span class=\"comment\">// after 2 second</span></span><br><span class=\"line\"><span class=\"comment\">//resolved</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2、async函数的注意事项\"><a href=\"#2-2、async函数的注意事项\" class=\"headerlink\" title=\"2.2、async函数的注意事项\"></a>2.2、async函数的注意事项</h4><p>async函数中await可以暂停函数的执行，等到异步函数返回执行结果的时候再继续执行函数。</p>\n<p>await关键字只能用在async函数中，用在其它地方会抛错。</p>\n<p>async函数不同于promise函数，函数中使用return不是必须的，如果含有return，则返回的Promise中的promiseValue的值不为undefide。否则依旧会返回一个promiseValue为空的Promise。</p>\n<h4 id=\"3、async函数的错误处理机制\"><a href=\"#3、async函数的错误处理机制\" class=\"headerlink\" title=\"3、async函数的错误处理机制\"></a>3、async函数的错误处理机制</h4><p>在async函数中，如果await后面的异步函数中抛出错，则async函数剩余的函数都将不会执行。</p>\n<p>如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function f() &#123;</span><br><span class=\"line\">  await Promise.reject(&apos;出错了&apos;);</span><br><span class=\"line\">  await Promise.resolve(&apos;hello world&apos;); // 不会执行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有时候我们希望一个await函数执行失败后，不要影响其它函数的执行。可以将await用try{}catch(){}包起来。</p>\n<p>如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"built_in\">console</span>.log(v))</span><br><span class=\"line\"><span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4、async函数并发执行\"><a href=\"#4、async函数并发执行\" class=\"headerlink\" title=\"4、async函数并发执行\"></a>4、async函数并发执行</h4><p>当多个await命令后的函数之间没有依赖关系的时候，可以考虑让它们并发的执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> resolveAfter2Seconds = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"starting slow promise\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">\"slow\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"slow promise is done\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> resolveAfter1Second = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"starting fast promise\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">\"fast\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fast promise is done\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sequentialStart = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'==SEQUENTIAL START=='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1. Execution gets here almost instantly</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> slow = <span class=\"keyword\">await</span> resolveAfter2Seconds();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(slow); <span class=\"comment\">// 2. this runs 2 seconds after 1.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fast = <span class=\"keyword\">await</span> resolveAfter1Second();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fast); <span class=\"comment\">// 3. this runs 3 seconds after 1.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// sequentialStart函数执行完需要三秒，两个无关的函数顺序执行</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var concurrentStart = async function() &#123;</span><br><span class=\"line\">  console.log(&apos;==CONCURRENT START with await==&apos;);</span><br><span class=\"line\">  const slow = resolveAfter2Seconds(); // starts timer immediately</span><br><span class=\"line\">  const fast = resolveAfter1Second(); // starts timer immediately</span><br><span class=\"line\"></span><br><span class=\"line\">  // 1. Execution gets here almost instantly</span><br><span class=\"line\">  console.log(await slow); // 2. this runs 2 seconds after 1.</span><br><span class=\"line\">  console.log(await fast); // 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var concurrentPromise = function() &#123;</span><br><span class=\"line\">  console.log(&apos;==CONCURRENT START with Promise.all==&apos;);</span><br><span class=\"line\">  return Promise.all([resolveAfter2Seconds(), resolveAfter1Second()]).then((messages) =&gt; &#123;</span><br><span class=\"line\">    console.log(messages[0]); // slow</span><br><span class=\"line\">    console.log(messages[1]); // fast</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>concurrentStart和concurrentPromise是两种异步函数无耦合的情况的下并发执行的方式</code></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、什么是async函数：\"><a href=\"#1、什么是async函数：\" class=\"headerlink\" title=\"1、什么是async函数：\"></a>1、什么是async函数：</h3><p>async函数是js处理异步函数的最终解决方案，它的语法看起来是用同步的代码结构来描述异步的代码。async函数返回值是一个成功或者失败状态的Promise，但必须等到内部所有的Promise执行完以后，才会发生状态改变。</p>\n<h4 id=\"1-1、-async函数的优点\"><a href=\"#1-1、-async函数的优点\" class=\"headerlink\" title=\"1.1、 async函数的优点\"></a>1.1、 async函数的优点</h4><p>async/await是Generator函数的语法糖，相比之下会有如下优点：</p>\n<h5 id=\"1、内置执行器：\"><a href=\"#1、内置执行器：\" class=\"headerlink\" title=\"1、内置执行器：\"></a>1、内置执行器：</h5><p>async函数自带执行器，不需要调用next()方法。</p>\n<h5 id=\"2、更好的语义：\"><a href=\"#2、更好的语义：\" class=\"headerlink\" title=\"2、更好的语义：\"></a>2、更好的语义：</h5><p>async/await相对与*/yield来说有更好的语义</p>\n<h5 id=\"3、更好的适用性：\"><a href=\"#3、更好的适用性：\" class=\"headerlink\" title=\"3、更好的适用性：\"></a>3、更好的适用性：</h5><p>对于yield，后面只能是thunk或者promise函数。而await后面可以是promise和原始类型值，如果不是Promise的话，会将其默认转化为Promise</p>\n<h5 id=\"4、返回值是promise\"><a href=\"#4、返回值是promise\" class=\"headerlink\" title=\"4、返回值是promise\"></a>4、返回值是promise</h5><p>async函数返回值是promise类型，而Generator函数必须是Iterator 对象<br>","more":"</p>\n<h3 id=\"2、async函数的语法\"><a href=\"#2、async函数的语法\" class=\"headerlink\" title=\"2、async函数的语法\"></a>2、async函数的语法</h3><h4 id=\"2-1-async函数结构表达式：\"><a href=\"#2-1-async函数结构表达式：\" class=\"headerlink\" title=\"2.1 async函数结构表达式：\"></a>2.1 async函数结构表达式：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function name([param[, param[, ... param]]]) &#123;</span><br><span class=\"line\">   statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>eg:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolveAfter2Seconds</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">'resolved'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncCall</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'calling'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> resolveAfter2Seconds();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"comment\">// expected output: 'resolved'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">asyncCall();</span><br><span class=\"line\"><span class=\"comment\">// 'calling'</span></span><br><span class=\"line\"><span class=\"comment\">// after 2 second</span></span><br><span class=\"line\"><span class=\"comment\">//resolved</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2、async函数的注意事项\"><a href=\"#2-2、async函数的注意事项\" class=\"headerlink\" title=\"2.2、async函数的注意事项\"></a>2.2、async函数的注意事项</h4><p>async函数中await可以暂停函数的执行，等到异步函数返回执行结果的时候再继续执行函数。</p>\n<p>await关键字只能用在async函数中，用在其它地方会抛错。</p>\n<p>async函数不同于promise函数，函数中使用return不是必须的，如果含有return，则返回的Promise中的promiseValue的值不为undefide。否则依旧会返回一个promiseValue为空的Promise。</p>\n<h4 id=\"3、async函数的错误处理机制\"><a href=\"#3、async函数的错误处理机制\" class=\"headerlink\" title=\"3、async函数的错误处理机制\"></a>3、async函数的错误处理机制</h4><p>在async函数中，如果await后面的异步函数中抛出错，则async函数剩余的函数都将不会执行。</p>\n<p>如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function f() &#123;</span><br><span class=\"line\">  await Promise.reject(&apos;出错了&apos;);</span><br><span class=\"line\">  await Promise.resolve(&apos;hello world&apos;); // 不会执行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有时候我们希望一个await函数执行失败后，不要影响其它函数的执行。可以将await用try{}catch(){}包起来。</p>\n<p>如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"built_in\">console</span>.log(v))</span><br><span class=\"line\"><span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4、async函数并发执行\"><a href=\"#4、async函数并发执行\" class=\"headerlink\" title=\"4、async函数并发执行\"></a>4、async函数并发执行</h4><p>当多个await命令后的函数之间没有依赖关系的时候，可以考虑让它们并发的执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> resolveAfter2Seconds = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"starting slow promise\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">\"slow\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"slow promise is done\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> resolveAfter1Second = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"starting fast promise\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">\"fast\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fast promise is done\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sequentialStart = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'==SEQUENTIAL START=='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1. Execution gets here almost instantly</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> slow = <span class=\"keyword\">await</span> resolveAfter2Seconds();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(slow); <span class=\"comment\">// 2. this runs 2 seconds after 1.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fast = <span class=\"keyword\">await</span> resolveAfter1Second();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fast); <span class=\"comment\">// 3. this runs 3 seconds after 1.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// sequentialStart函数执行完需要三秒，两个无关的函数顺序执行</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var concurrentStart = async function() &#123;</span><br><span class=\"line\">  console.log(&apos;==CONCURRENT START with await==&apos;);</span><br><span class=\"line\">  const slow = resolveAfter2Seconds(); // starts timer immediately</span><br><span class=\"line\">  const fast = resolveAfter1Second(); // starts timer immediately</span><br><span class=\"line\"></span><br><span class=\"line\">  // 1. Execution gets here almost instantly</span><br><span class=\"line\">  console.log(await slow); // 2. this runs 2 seconds after 1.</span><br><span class=\"line\">  console.log(await fast); // 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var concurrentPromise = function() &#123;</span><br><span class=\"line\">  console.log(&apos;==CONCURRENT START with Promise.all==&apos;);</span><br><span class=\"line\">  return Promise.all([resolveAfter2Seconds(), resolveAfter1Second()]).then((messages) =&gt; &#123;</span><br><span class=\"line\">    console.log(messages[0]); // slow</span><br><span class=\"line\">    console.log(messages[1]); // fast</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>concurrentStart和concurrentPromise是两种异步函数无耦合的情况的下并发执行的方式</code></p>"},{"title":"background","toc":true,"_content":"\n## background-color\n盒子的背景色\n## background-image:url();\n元素的背景图片\n\n默认平铺满整个盒子，如果X或Y方向铺到最后一个放不下，也会铺一部分。配合background-repeat使用\n## background-repeat\n平铺方向\n\nbackground-repeat: repeat-x;横向平铺\n\nbackground-repeat: repeat-y;纵向平铺\n\nbackground-repeat: no-repeat;只显示单个不平铺\n<!--more-->\n## background-position\n[MDN关于这部分的链接](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position)\n\n使用这个属性，默认左上角是原点，向下y，向右x轴。\n\nbackground-position: 25%，75%;代表据顶部75%的高度，据左侧25%的宽度\n\ntop, left, bottom, right 代表的是在盒子边缘的位置，如只写一个，另外一个值默认50%；\n\nbackground-position:right top;代表位置在盒子的左上。\n\nbackground-position:right;盒子右边缘中部。\n\n## background-attachment\n背景默认是随文档流滑动的。\nbackground-attachment：fixed;固定到某个位置，不随文档滚动。\n","source":"_posts/background.md","raw":"---\ntitle: background\ntags: \n- CSS\ntoc: true\n---\n\n## background-color\n盒子的背景色\n## background-image:url();\n元素的背景图片\n\n默认平铺满整个盒子，如果X或Y方向铺到最后一个放不下，也会铺一部分。配合background-repeat使用\n## background-repeat\n平铺方向\n\nbackground-repeat: repeat-x;横向平铺\n\nbackground-repeat: repeat-y;纵向平铺\n\nbackground-repeat: no-repeat;只显示单个不平铺\n<!--more-->\n## background-position\n[MDN关于这部分的链接](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position)\n\n使用这个属性，默认左上角是原点，向下y，向右x轴。\n\nbackground-position: 25%，75%;代表据顶部75%的高度，据左侧25%的宽度\n\ntop, left, bottom, right 代表的是在盒子边缘的位置，如只写一个，另外一个值默认50%；\n\nbackground-position:right top;代表位置在盒子的左上。\n\nbackground-position:right;盒子右边缘中部。\n\n## background-attachment\n背景默认是随文档流滑动的。\nbackground-attachment：fixed;固定到某个位置，不随文档滚动。\n","slug":"background","published":1,"date":"2019-12-19T15:52:56.139Z","updated":"2019-12-19T15:52:56.139Z","_id":"ck4cwgnhz000uckukucywlvsr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"background-color\"><a href=\"#background-color\" class=\"headerlink\" title=\"background-color\"></a>background-color</h2><p>盒子的背景色</p>\n<h2 id=\"background-image-url\"><a href=\"#background-image-url\" class=\"headerlink\" title=\"background-image:url();\"></a>background-image:url();</h2><p>元素的背景图片</p>\n<p>默认平铺满整个盒子，如果X或Y方向铺到最后一个放不下，也会铺一部分。配合background-repeat使用</p>\n<h2 id=\"background-repeat\"><a href=\"#background-repeat\" class=\"headerlink\" title=\"background-repeat\"></a>background-repeat</h2><p>平铺方向</p>\n<p>background-repeat: repeat-x;横向平铺</p>\n<p>background-repeat: repeat-y;纵向平铺</p>\n<p>background-repeat: no-repeat;只显示单个不平铺<br><a id=\"more\"></a></p>\n<h2 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a>background-position</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\" target=\"_blank\" rel=\"noopener\">MDN关于这部分的链接</a></p>\n<p>使用这个属性，默认左上角是原点，向下y，向右x轴。</p>\n<p>background-position: 25%，75%;代表据顶部75%的高度，据左侧25%的宽度</p>\n<p>top, left, bottom, right 代表的是在盒子边缘的位置，如只写一个，另外一个值默认50%；</p>\n<p>background-position:right top;代表位置在盒子的左上。</p>\n<p>background-position:right;盒子右边缘中部。</p>\n<h2 id=\"background-attachment\"><a href=\"#background-attachment\" class=\"headerlink\" title=\"background-attachment\"></a>background-attachment</h2><p>背景默认是随文档流滑动的。<br>background-attachment：fixed;固定到某个位置，不随文档滚动。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"background-color\"><a href=\"#background-color\" class=\"headerlink\" title=\"background-color\"></a>background-color</h2><p>盒子的背景色</p>\n<h2 id=\"background-image-url\"><a href=\"#background-image-url\" class=\"headerlink\" title=\"background-image:url();\"></a>background-image:url();</h2><p>元素的背景图片</p>\n<p>默认平铺满整个盒子，如果X或Y方向铺到最后一个放不下，也会铺一部分。配合background-repeat使用</p>\n<h2 id=\"background-repeat\"><a href=\"#background-repeat\" class=\"headerlink\" title=\"background-repeat\"></a>background-repeat</h2><p>平铺方向</p>\n<p>background-repeat: repeat-x;横向平铺</p>\n<p>background-repeat: repeat-y;纵向平铺</p>\n<p>background-repeat: no-repeat;只显示单个不平铺<br>","more":"</p>\n<h2 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a>background-position</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position\" target=\"_blank\" rel=\"noopener\">MDN关于这部分的链接</a></p>\n<p>使用这个属性，默认左上角是原点，向下y，向右x轴。</p>\n<p>background-position: 25%，75%;代表据顶部75%的高度，据左侧25%的宽度</p>\n<p>top, left, bottom, right 代表的是在盒子边缘的位置，如只写一个，另外一个值默认50%；</p>\n<p>background-position:right top;代表位置在盒子的左上。</p>\n<p>background-position:right;盒子右边缘中部。</p>\n<h2 id=\"background-attachment\"><a href=\"#background-attachment\" class=\"headerlink\" title=\"background-attachment\"></a>background-attachment</h2><p>背景默认是随文档流滑动的。<br>background-attachment：fixed;固定到某个位置，不随文档滚动。</p>"},{"title":"Reducer的整合者combineReducers","_content":"\n### 前言\n在公司的项目中我们可以发现我们代码中的reducer并不是都写在一个reducer.js中，而是被划分了代表特殊功能的小的reducer。然后在同级目录会创建一个index.js,里面引入了所有的reducer,并通过combineReducers整合在一起。例如：`combineReducers({lines: lines,document: document})`;我们的state对象里面也会做同样的划分`state = {lines: {}, document: {}};`。\n\n### combineReducers\n前言中我们提到，系统会将state和更新state的reducer进行划分，每个可以表示特定功能的数据。然后通过combineReducers将它们组合在一起。此处我们就举例说明一下combineReducers怎么使用\n\n#### 举例说明\n```js\n// reducers.js\nexport default (theDefaultReducer = (state = {a: 1}, action) => state)\n\nexport const firstNamedReducer = (state = {b: 2}, action) => state\n\nexport const secondNamedReducer = (state = {c:3}, action) => state\n```\n<!--more-->\n```js\n// rootReducer.js\nimport { combineReducers, createStore } from 'redux' //从redux中引入combineReducers方法\n\nimport theDefaultReducer, {\n  firstNamedReducer,\n  secondNamedReducer\n} from './reducers'  // 引入各个reducers.js\n\n// 整合所有reducer\nconst rootReducer = combineReducers({\n  default: theDefaultReducer,\n  first: firstNamedReducer,\n  second: secondNamedReducer\n})\n// combineReducers 返回的结果传给createStore\nconst store = createStore(rootReducer)\nconsole.log(store.getState())\n\n//state：{default: {a: 1}, first: {b: 2}, second: {c:3}}\n\n```\n由例子可知，此时的reducer实际上combineReducers的返回值。combineReducers通过整合所有reducer。然后返回的结果rootReducer传给createStore生成store。\n\n此处的createStore函数我们没有initialState和enhancer参数。enhancer代表的是applyMiddleWares(middlewares),此处不讨论中间件，所以省略。那么initialState的参数呢？initialState的参数其实在项目中可以省去的。只要在reducer函数的参数上 `function reducer(state = initialState, action){return state}`将同文件的initialState传给state当默认值就行。此时当creatStore函数执行时，内部会有一次的dispatch初始action，此时会将\ninitialState传给currentState；此时在外层执行store.getState()会返回系统的状态树。\n\n简写版creatStore.js\n```js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  var currentState = preloadedState;//得到初始init，没有传递则为undefined;\n  var currentReducer = reducer;\n  function getState() {\n    return currentState\n  }\n  function dispatch(action) {\n    //执行传入的reducer函数，该函数返回一个新的state对象，并赋值给currentState变量\n    currentState = currentReducer(currentState, action)\n  }\n  dispatch({ type: ActionTypes.INIT }) //执行dispatch函数，初始化state\n}\n```\n## combineReducers源码\n在讨论combineReducers源码的时候我们首先要明确这个函数的输入和期望的输出。首先输入是一个对象，对象的属性key对应的是一个function类型的子reducer。输出是一个整合过的rootReducer,既然是reducer那它的函数参数就是(state, action),返回的是state。这个state是整个app整合过的store;\n\n```js\nexport default function combineReducers(reducers) {\n  // 取得对象的key，组成数组\n  const reducerKeys = Object.keys(reducers)\n  const finalReducers = {}\n// 遍历对象，将reducers中value为函数的值存在finalReducers对象中\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n\n  const finalReducerKeys = Object.keys(finalReducers)\n  // 返回的是一个reducer。函数是一个闭包，保存对finalReducers的引用，所以将返回值传给createStore后依旧可以调到被切分的reducer和state。\n  return function combination(state = {}, action) {\n    // 设置标记state是否更新\n    let hasChanged = false\n    // 保存返回的新的state;\n    const nextState = {}\n    // 遍历每个被切分的reducer，如果找到对应的actionType就返回新state并把haschange改为true。没有与之对应的返回传入的state,state不变。\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    // 通过hasChange判断状态是否修改\n    return hasChanged ? nextState : state\n  }\n}\n```\n此处的state初始默认为空，当createStore函数执行的时候会出发初始化action，通过遍历每个reducer生成初始的State。\n\n参考链接一：https://github.com/Aaaaash/blog/issues/2\n参考链接二：https://segmentfault.com/a/1190000009479302\n源码： https://github.com/reduxjs/redux/blob/ab5cafdd50ee740261032cef94935c1f99354173/src/combineReducers.js\n\n","source":"_posts/combineReducer.md","raw":"---\ntitle: Reducer的整合者combineReducers\ntags: \n- React\n- Redux\n- toc: true\n---\n\n### 前言\n在公司的项目中我们可以发现我们代码中的reducer并不是都写在一个reducer.js中，而是被划分了代表特殊功能的小的reducer。然后在同级目录会创建一个index.js,里面引入了所有的reducer,并通过combineReducers整合在一起。例如：`combineReducers({lines: lines,document: document})`;我们的state对象里面也会做同样的划分`state = {lines: {}, document: {}};`。\n\n### combineReducers\n前言中我们提到，系统会将state和更新state的reducer进行划分，每个可以表示特定功能的数据。然后通过combineReducers将它们组合在一起。此处我们就举例说明一下combineReducers怎么使用\n\n#### 举例说明\n```js\n// reducers.js\nexport default (theDefaultReducer = (state = {a: 1}, action) => state)\n\nexport const firstNamedReducer = (state = {b: 2}, action) => state\n\nexport const secondNamedReducer = (state = {c:3}, action) => state\n```\n<!--more-->\n```js\n// rootReducer.js\nimport { combineReducers, createStore } from 'redux' //从redux中引入combineReducers方法\n\nimport theDefaultReducer, {\n  firstNamedReducer,\n  secondNamedReducer\n} from './reducers'  // 引入各个reducers.js\n\n// 整合所有reducer\nconst rootReducer = combineReducers({\n  default: theDefaultReducer,\n  first: firstNamedReducer,\n  second: secondNamedReducer\n})\n// combineReducers 返回的结果传给createStore\nconst store = createStore(rootReducer)\nconsole.log(store.getState())\n\n//state：{default: {a: 1}, first: {b: 2}, second: {c:3}}\n\n```\n由例子可知，此时的reducer实际上combineReducers的返回值。combineReducers通过整合所有reducer。然后返回的结果rootReducer传给createStore生成store。\n\n此处的createStore函数我们没有initialState和enhancer参数。enhancer代表的是applyMiddleWares(middlewares),此处不讨论中间件，所以省略。那么initialState的参数呢？initialState的参数其实在项目中可以省去的。只要在reducer函数的参数上 `function reducer(state = initialState, action){return state}`将同文件的initialState传给state当默认值就行。此时当creatStore函数执行时，内部会有一次的dispatch初始action，此时会将\ninitialState传给currentState；此时在外层执行store.getState()会返回系统的状态树。\n\n简写版creatStore.js\n```js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  var currentState = preloadedState;//得到初始init，没有传递则为undefined;\n  var currentReducer = reducer;\n  function getState() {\n    return currentState\n  }\n  function dispatch(action) {\n    //执行传入的reducer函数，该函数返回一个新的state对象，并赋值给currentState变量\n    currentState = currentReducer(currentState, action)\n  }\n  dispatch({ type: ActionTypes.INIT }) //执行dispatch函数，初始化state\n}\n```\n## combineReducers源码\n在讨论combineReducers源码的时候我们首先要明确这个函数的输入和期望的输出。首先输入是一个对象，对象的属性key对应的是一个function类型的子reducer。输出是一个整合过的rootReducer,既然是reducer那它的函数参数就是(state, action),返回的是state。这个state是整个app整合过的store;\n\n```js\nexport default function combineReducers(reducers) {\n  // 取得对象的key，组成数组\n  const reducerKeys = Object.keys(reducers)\n  const finalReducers = {}\n// 遍历对象，将reducers中value为函数的值存在finalReducers对象中\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n\n  const finalReducerKeys = Object.keys(finalReducers)\n  // 返回的是一个reducer。函数是一个闭包，保存对finalReducers的引用，所以将返回值传给createStore后依旧可以调到被切分的reducer和state。\n  return function combination(state = {}, action) {\n    // 设置标记state是否更新\n    let hasChanged = false\n    // 保存返回的新的state;\n    const nextState = {}\n    // 遍历每个被切分的reducer，如果找到对应的actionType就返回新state并把haschange改为true。没有与之对应的返回传入的state,state不变。\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    // 通过hasChange判断状态是否修改\n    return hasChanged ? nextState : state\n  }\n}\n```\n此处的state初始默认为空，当createStore函数执行的时候会出发初始化action，通过遍历每个reducer生成初始的State。\n\n参考链接一：https://github.com/Aaaaash/blog/issues/2\n参考链接二：https://segmentfault.com/a/1190000009479302\n源码： https://github.com/reduxjs/redux/blob/ab5cafdd50ee740261032cef94935c1f99354173/src/combineReducers.js\n\n","slug":"combineReducer","published":1,"date":"2019-12-19T15:52:56.139Z","updated":"2019-12-19T15:52:56.139Z","_id":"ck4cwgni0000wckukc0g26lp3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在公司的项目中我们可以发现我们代码中的reducer并不是都写在一个reducer.js中，而是被划分了代表特殊功能的小的reducer。然后在同级目录会创建一个index.js,里面引入了所有的reducer,并通过combineReducers整合在一起。例如：<code>combineReducers({lines: lines,document: document})</code>;我们的state对象里面也会做同样的划分<code>state = {lines: {}, document: {}};</code>。</p>\n<h3 id=\"combineReducers\"><a href=\"#combineReducers\" class=\"headerlink\" title=\"combineReducers\"></a>combineReducers</h3><p>前言中我们提到，系统会将state和更新state的reducer进行划分，每个可以表示特定功能的数据。然后通过combineReducers将它们组合在一起。此处我们就举例说明一下combineReducers怎么使用</p>\n<h4 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reducers.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (theDefaultReducer = <span class=\"function\">(<span class=\"params\">state = &#123;a: <span class=\"number\">1</span>&#125;, action</span>) =&gt;</span> state)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> firstNamedReducer = <span class=\"function\">(<span class=\"params\">state = &#123;b: <span class=\"number\">2</span>&#125;, action</span>) =&gt;</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> secondNamedReducer = <span class=\"function\">(<span class=\"params\">state = &#123;c:<span class=\"number\">3</span>&#125;, action</span>) =&gt;</span> state</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rootReducer.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers, createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span> <span class=\"comment\">//从redux中引入combineReducers方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> theDefaultReducer, &#123;</span><br><span class=\"line\">  firstNamedReducer,</span><br><span class=\"line\">  secondNamedReducer</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span>  <span class=\"comment\">// 引入各个reducers.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 整合所有reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootReducer = combineReducers(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>: theDefaultReducer,</span><br><span class=\"line\">  first: firstNamedReducer,</span><br><span class=\"line\">  second: secondNamedReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// combineReducers 返回的结果传给createStore</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(rootReducer)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(store.getState())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//state：&#123;default: &#123;a: 1&#125;, first: &#123;b: 2&#125;, second: &#123;c:3&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>由例子可知，此时的reducer实际上combineReducers的返回值。combineReducers通过整合所有reducer。然后返回的结果rootReducer传给createStore生成store。</p>\n<p>此处的createStore函数我们没有initialState和enhancer参数。enhancer代表的是applyMiddleWares(middlewares),此处不讨论中间件，所以省略。那么initialState的参数呢？initialState的参数其实在项目中可以省去的。只要在reducer函数的参数上 <code>function reducer(state = initialState, action){return state}</code>将同文件的initialState传给state当默认值就行。此时当creatStore函数执行时，内部会有一次的dispatch初始action，此时会将<br>initialState传给currentState；此时在外层执行store.getState()会返回系统的状态树。</p>\n<p>简写版creatStore.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> currentState = preloadedState;<span class=\"comment\">//得到初始init，没有传递则为undefined;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> currentReducer = reducer;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行传入的reducer函数，该函数返回一个新的state对象，并赋值给currentState变量</span></span><br><span class=\"line\">    currentState = currentReducer(currentState, action)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;) <span class=\"comment\">//执行dispatch函数，初始化state</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"combineReducers源码\"><a href=\"#combineReducers源码\" class=\"headerlink\" title=\"combineReducers源码\"></a>combineReducers源码</h2><p>在讨论combineReducers源码的时候我们首先要明确这个函数的输入和期望的输出。首先输入是一个对象，对象的属性key对应的是一个function类型的子reducer。输出是一个整合过的rootReducer,既然是reducer那它的函数参数就是(state, action),返回的是state。这个state是整个app整合过的store;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combineReducers</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 取得对象的key，组成数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducers = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历对象，将reducers中value为函数的值存在finalReducers对象中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = reducerKeys[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      finalReducers[key] = reducers[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducerKeys = <span class=\"built_in\">Object</span>.keys(finalReducers)</span><br><span class=\"line\">  <span class=\"comment\">// 返回的是一个reducer。函数是一个闭包，保存对finalReducers的引用，所以将返回值传给createStore后依旧可以调到被切分的reducer和state。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置标记state是否更新</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存返回的新的state;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历每个被切分的reducer，如果找到对应的actionType就返回新state并把haschange改为true。没有与之对应的返回传入的state,state不变。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通过hasChange判断状态是否修改</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处的state初始默认为空，当createStore函数执行的时候会出发初始化action，通过遍历每个reducer生成初始的State。</p>\n<p>参考链接一：<a href=\"https://github.com/Aaaaash/blog/issues/2\" target=\"_blank\" rel=\"noopener\">https://github.com/Aaaaash/blog/issues/2</a><br>参考链接二：<a href=\"https://segmentfault.com/a/1190000009479302\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000009479302</a><br>源码： <a href=\"https://github.com/reduxjs/redux/blob/ab5cafdd50ee740261032cef94935c1f99354173/src/combineReducers.js\" target=\"_blank\" rel=\"noopener\">https://github.com/reduxjs/redux/blob/ab5cafdd50ee740261032cef94935c1f99354173/src/combineReducers.js</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在公司的项目中我们可以发现我们代码中的reducer并不是都写在一个reducer.js中，而是被划分了代表特殊功能的小的reducer。然后在同级目录会创建一个index.js,里面引入了所有的reducer,并通过combineReducers整合在一起。例如：<code>combineReducers({lines: lines,document: document})</code>;我们的state对象里面也会做同样的划分<code>state = {lines: {}, document: {}};</code>。</p>\n<h3 id=\"combineReducers\"><a href=\"#combineReducers\" class=\"headerlink\" title=\"combineReducers\"></a>combineReducers</h3><p>前言中我们提到，系统会将state和更新state的reducer进行划分，每个可以表示特定功能的数据。然后通过combineReducers将它们组合在一起。此处我们就举例说明一下combineReducers怎么使用</p>\n<h4 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reducers.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (theDefaultReducer = <span class=\"function\">(<span class=\"params\">state = &#123;a: <span class=\"number\">1</span>&#125;, action</span>) =&gt;</span> state)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> firstNamedReducer = <span class=\"function\">(<span class=\"params\">state = &#123;b: <span class=\"number\">2</span>&#125;, action</span>) =&gt;</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> secondNamedReducer = <span class=\"function\">(<span class=\"params\">state = &#123;c:<span class=\"number\">3</span>&#125;, action</span>) =&gt;</span> state</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rootReducer.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers, createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span> <span class=\"comment\">//从redux中引入combineReducers方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> theDefaultReducer, &#123;</span><br><span class=\"line\">  firstNamedReducer,</span><br><span class=\"line\">  secondNamedReducer</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span>  <span class=\"comment\">// 引入各个reducers.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 整合所有reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootReducer = combineReducers(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>: theDefaultReducer,</span><br><span class=\"line\">  first: firstNamedReducer,</span><br><span class=\"line\">  second: secondNamedReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// combineReducers 返回的结果传给createStore</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(rootReducer)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(store.getState())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//state：&#123;default: &#123;a: 1&#125;, first: &#123;b: 2&#125;, second: &#123;c:3&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>由例子可知，此时的reducer实际上combineReducers的返回值。combineReducers通过整合所有reducer。然后返回的结果rootReducer传给createStore生成store。</p>\n<p>此处的createStore函数我们没有initialState和enhancer参数。enhancer代表的是applyMiddleWares(middlewares),此处不讨论中间件，所以省略。那么initialState的参数呢？initialState的参数其实在项目中可以省去的。只要在reducer函数的参数上 <code>function reducer(state = initialState, action){return state}</code>将同文件的initialState传给state当默认值就行。此时当creatStore函数执行时，内部会有一次的dispatch初始action，此时会将<br>initialState传给currentState；此时在外层执行store.getState()会返回系统的状态树。</p>\n<p>简写版creatStore.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> currentState = preloadedState;<span class=\"comment\">//得到初始init，没有传递则为undefined;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> currentReducer = reducer;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行传入的reducer函数，该函数返回一个新的state对象，并赋值给currentState变量</span></span><br><span class=\"line\">    currentState = currentReducer(currentState, action)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;) <span class=\"comment\">//执行dispatch函数，初始化state</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"combineReducers源码\"><a href=\"#combineReducers源码\" class=\"headerlink\" title=\"combineReducers源码\"></a>combineReducers源码</h2><p>在讨论combineReducers源码的时候我们首先要明确这个函数的输入和期望的输出。首先输入是一个对象，对象的属性key对应的是一个function类型的子reducer。输出是一个整合过的rootReducer,既然是reducer那它的函数参数就是(state, action),返回的是state。这个state是整个app整合过的store;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combineReducers</span>(<span class=\"params\">reducers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 取得对象的key，组成数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reducerKeys = <span class=\"built_in\">Object</span>.keys(reducers)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducers = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历对象，将reducers中value为函数的值存在finalReducers对象中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = reducerKeys[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducers[key] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      finalReducers[key] = reducers[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalReducerKeys = <span class=\"built_in\">Object</span>.keys(finalReducers)</span><br><span class=\"line\">  <span class=\"comment\">// 返回的是一个reducer。函数是一个闭包，保存对finalReducers的引用，所以将返回值传给createStore后依旧可以调到被切分的reducer和state。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置标记state是否更新</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasChanged = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存返回的新的state;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历每个被切分的reducer，如果找到对应的actionType就返回新state并把haschange改为true。没有与之对应的返回传入的state,state不变。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = finalReducerKeys[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reducer = finalReducers[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> previousStateForKey = state[key]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class=\"line\">      nextState[key] = nextStateForKey</span><br><span class=\"line\">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通过hasChange判断状态是否修改</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasChanged ? nextState : state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处的state初始默认为空，当createStore函数执行的时候会出发初始化action，通过遍历每个reducer生成初始的State。</p>\n<p>参考链接一：<a href=\"https://github.com/Aaaaash/blog/issues/2\" target=\"_blank\" rel=\"noopener\">https://github.com/Aaaaash/blog/issues/2</a><br>参考链接二：<a href=\"https://segmentfault.com/a/1190000009479302\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000009479302</a><br>源码： <a href=\"https://github.com/reduxjs/redux/blob/ab5cafdd50ee740261032cef94935c1f99354173/src/combineReducers.js\" target=\"_blank\" rel=\"noopener\">https://github.com/reduxjs/redux/blob/ab5cafdd50ee740261032cef94935c1f99354173/src/combineReducers.js</a></p>"},{"title":"dangerouslySetInnerHTML","_content":"### dangerouslySetInnerHTML在react和redux中的应用\n\n```\n<div dangerouslySetInnerHTML={{__html: \"<p>balabalabalabala.......</p><p>balalababalalaba....</p>\"}} />\n<div dangerouslySetInnerHTML={{__html: props.modalContent}}/>\n```\n功能将__html后的内容嵌套到div下","source":"_posts/dangerouslySetInnerHTML.md","raw":"---\ntitle: dangerouslySetInnerHTML\ntags: \n- React\n---\n### dangerouslySetInnerHTML在react和redux中的应用\n\n```\n<div dangerouslySetInnerHTML={{__html: \"<p>balabalabalabala.......</p><p>balalababalalaba....</p>\"}} />\n<div dangerouslySetInnerHTML={{__html: props.modalContent}}/>\n```\n功能将__html后的内容嵌套到div下","slug":"dangerouslySetInnerHTML","published":1,"date":"2019-12-19T15:52:56.139Z","updated":"2019-12-19T15:52:56.140Z","_id":"ck4cwgni1000xckuk5ihoxpsi","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"dangerouslySetInnerHTML在react和redux中的应用\"><a href=\"#dangerouslySetInnerHTML在react和redux中的应用\" class=\"headerlink\" title=\"dangerouslySetInnerHTML在react和redux中的应用\"></a>dangerouslySetInnerHTML在react和redux中的应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div dangerouslySetInnerHTML=&#123;&#123;__html: &quot;&lt;p&gt;balabalabalabala.......&lt;/p&gt;&lt;p&gt;balalababalalaba....&lt;/p&gt;&quot;&#125;&#125; /&gt;</span><br><span class=\"line\">&lt;div dangerouslySetInnerHTML=&#123;&#123;__html: props.modalContent&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>功能将__html后的内容嵌套到div下</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"dangerouslySetInnerHTML在react和redux中的应用\"><a href=\"#dangerouslySetInnerHTML在react和redux中的应用\" class=\"headerlink\" title=\"dangerouslySetInnerHTML在react和redux中的应用\"></a>dangerouslySetInnerHTML在react和redux中的应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div dangerouslySetInnerHTML=&#123;&#123;__html: &quot;&lt;p&gt;balabalabalabala.......&lt;/p&gt;&lt;p&gt;balalababalalaba....&lt;/p&gt;&quot;&#125;&#125; /&gt;</span><br><span class=\"line\">&lt;div dangerouslySetInnerHTML=&#123;&#123;__html: props.modalContent&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>功能将__html后的内容嵌套到div下</p>\n"},{"title":"Emoji","_content":"People\ngithub中常用emoji集合\n<!--more-->\n| :bowtie: `:bowtie:` | :smile: `:smile:` | :laughing: `:laughing:` |\n|---|---|---|\n| :blush: `:blush:` | :smiley: `:smiley:` | :relaxed: `:relaxed:` |\n| :smirk: `:smirk:` | :heart_eyes: `:heart_eyes:` | :kissing_heart: `:kissing_heart:` |\n| :kissing_closed_eyes: `:kissing_closed_eyes:` | :flushed: `:flushed:` | :relieved: `:relieved:` |\n| :satisfied: `:satisfied:` | :grin: `:grin:` | :wink: `:wink:` |\n| :stuck_out_tongue_winking_eye: `:stuck_out_tongue_winking_eye:` | :stuck_out_tongue_closed_eyes: `:stuck_out_tongue_closed_eyes:` | :grinning: `:grinning:` |\n| :kissing: `:kissing:` | :kissing_smiling_eyes: `:kissing_smiling_eyes:` | :stuck_out_tongue: `:stuck_out_tongue:` |\n| :sleeping: `:sleeping:` | :worried: `:worried:` | :frowning: `:frowning:` |\n| :anguished: `:anguished:` | :open_mouth: `:open_mouth:` | :grimacing: `:grimacing:` |\n| :confused: `:confused:` | :hushed: `:hushed:` | :expressionless: `:expressionless:` |\n| :unamused: `:unamused:` | :sweat_smile: `:sweat_smile:` | :sweat: `:sweat:` |\n| :disappointed_relieved: `:disappointed_relieved:` | :weary: `:weary:` | :pensive: `:pensive:` |\n| :disappointed: `:disappointed:` | :confounded: `:confounded:` | :fearful: `:fearful:` |\n| :cold_sweat: `:cold_sweat:` | :persevere: `:persevere:` | :cry: `:cry:` |\n| :sob: `:sob:` | :joy: `:joy:` | :astonished: `:astonished:` |\n| :scream: `:scream:` | :neckbeard: `:neckbeard:` | :tired_face: `:tired_face:` |\n| :angry: `:angry:` | :rage: `:rage:` | :triumph: `:triumph:` |\n| :sleepy: `:sleepy:` | :yum: `:yum:` | :mask: `:mask:` |\n| :sunglasses: `:sunglasses:` | :dizzy_face: `:dizzy_face:` | :imp: `:imp:` |\n| :smiling_imp: `:smiling_imp:` | :neutral_face: `:neutral_face:` | :no_mouth: `:no_mouth:` |\n| :innocent: `:innocent:` | :alien: `:alien:` | :yellow_heart: `:yellow_heart:` |\n| :blue_heart: `:blue_heart:` | :purple_heart: `:purple_heart:` | :heart: `:heart:` |\n| :green_heart: `:green_heart:` | :broken_heart: `:broken_heart:` | :heartbeat: `:heartbeat:` |\n| :heartpulse: `:heartpulse:` | :two_hearts: `:two_hearts:` | :revolving_hearts: `:revolving_hearts:` |\n| :cupid: `:cupid:` | :sparkling_heart: `:sparkling_heart:` | :sparkles: `:sparkles:` |\n| :star: `:star:` | :star2: `:star2:` | :dizzy: `:dizzy:` |\n| :boom: `:boom:` | :collision: `:collision:` | :anger: `:anger:` |\n| :exclamation: `:exclamation:` | :question: `:question:` | :grey_exclamation: `:grey_exclamation:` |\n| :grey_question: `:grey_question:` | :zzz: `:zzz:` | :dash: `:dash:` |\n| :sweat_drops: `:sweat_drops:` | :notes: `:notes:` | :musical_note: `:musical_note:` |\n| :fire: `:fire:` | :hankey: `:hankey:` | :poop: `:poop:` |\n| :shit: `:shit:` | :+1: `:+1:` | :thumbsup: `:thumbsup:` |\n| :-1: `:-1:` | :thumbsdown: `:thumbsdown:` | :ok_hand: `:ok_hand:` |\n| :punch: `:punch:` | :facepunch: `:facepunch:` | :fist: `:fist:` |\n| :v: `:v:` | :wave: `:wave:` | :hand: `:hand:` |\n| :raised_hand: `:raised_hand:` | :open_hands: `:open_hands:` | :point_up: `:point_up:` |\n| :point_down: `:point_down:` | :point_left: `:point_left:` | :point_right: `:point_right:` |\n| :raised_hands: `:raised_hands:` | :pray: `:pray:` | :point_up_2: `:point_up_2:` |\n| :clap: `:clap:` | :muscle: `:muscle:` | :metal: `:metal:` |\n| :fu: `:fu:` | :walking: `:walking:` | :runner: `:runner:` |\n| :running: `:running:` | :couple: `:couple:` | :family: `:family:` |\n| :two_men_holding_hands: `:two_men_holding_hands:` | :two_women_holding_hands: `:two_women_holding_hands:` | :dancer: `:dancer:` |\n| :dancers: `:dancers:` | :ok_woman: `:ok_woman:` | :no_good: `:no_good:` |\n| :information_desk_person: `:information_desk_person:` | :raising_hand: `:raising_hand:` | :bride_with_veil: `:bride_with_veil:` |\n| :person_with_pouting_face: `:person_with_pouting_face:` | :person_frowning: `:person_frowning:` | :bow: `:bow:` |\n| :couplekiss: `:couplekiss:` | :couple_with_heart: `:couple_with_heart:` | :massage: `:massage:` |\n| :haircut: `:haircut:` | :nail_care: `:nail_care:` | :boy: `:boy:` |\n| :girl: `:girl:` | :woman: `:woman:` | :man: `:man:` |\n| :baby: `:baby:` | :older_woman: `:older_woman:` | :older_man: `:older_man:` |\n| :person_with_blond_hair: `:person_with_blond_hair:` | :man_with_gua_pi_mao: `:man_with_gua_pi_mao:` | :man_with_turban: `:man_with_turban:` |\n| :construction_worker: `:construction_worker:` | :cop: `:cop:` | :angel: `:angel:` |\n| :princess: `:princess:` | :smiley_cat: `:smiley_cat:` | :smile_cat: `:smile_cat:` |\n| :heart_eyes_cat: `:heart_eyes_cat:` | :kissing_cat: `:kissing_cat:` | :smirk_cat: `:smirk_cat:` |\n| :scream_cat: `:scream_cat:` | :crying_cat_face: `:crying_cat_face:` | :joy_cat: `:joy_cat:` |\n| :pouting_cat: `:pouting_cat:` | :japanese_ogre: `:japanese_ogre:` | :japanese_goblin: `:japanese_goblin:` |\n| :see_no_evil: `:see_no_evil:` | :hear_no_evil: `:hear_no_evil:` | :speak_no_evil: `:speak_no_evil:` |\n| :guardsman: `:guardsman:` | :skull: `:skull:` | :feet: `:feet:` |\n| :lips: `:lips:` | :kiss: `:kiss:` | :droplet: `:droplet:` |\n| :ear: `:ear:` | :eyes: `:eyes:` | :nose: `:nose:` |\n| :tongue: `:tongue:` | :love_letter: `:love_letter:` | :bust_in_silhouette: `:bust_in_silhouette:` |\n| :busts_in_silhouette: `:busts_in_silhouette:` | :speech_balloon: `:speech_balloon:` | :thought_balloon: `:thought_balloon:` |\n| :feelsgood: `:feelsgood:` | :finnadie: `:finnadie:` | :goberserk: `:goberserk:` |\n| :godmode: `:godmode:` | :hurtrealbad: `:hurtrealbad:` | :rage1: `:rage1:` |\n| :rage2: `:rage2:` | :rage3: `:rage3:` | :rage4: `:rage4:` |\n| :suspect: `:suspect:` | :trollface: `:trollface:` | \n\nNature\n\n| :sunny: `:sunny:` | :umbrella: `:umbrella:` | :cloud: `:cloud:` |\n|---|---|---|\n| :snowflake: `:snowflake:` | :snowman: `:snowman:` | :zap: `:zap:` |\n| :cyclone: `:cyclone:` | :foggy: `:foggy:` | :ocean: `:ocean:` |\n| :cat: `:cat:` | :dog: `:dog:` | :mouse: `:mouse:` |\n| :hamster: `:hamster:` | :rabbit: `:rabbit:` | :wolf: `:wolf:` |\n| :frog: `:frog:` | :tiger: `:tiger:` | :koala: `:koala:` |\n| :bear: `:bear:` | :pig: `:pig:` | :pig_nose: `:pig_nose:` |\n| :cow: `:cow:` | :boar: `:boar:` | :monkey_face: `:monkey_face:` |\n| :monkey: `:monkey:` | :horse: `:horse:` | :racehorse: `:racehorse:` |\n| :camel: `:camel:` | :sheep: `:sheep:` | :elephant: `:elephant:` |\n| :panda_face: `:panda_face:` | :snake: `:snake:` | :bird: `:bird:` |\n| :baby_chick: `:baby_chick:` | :hatched_chick: `:hatched_chick:` | :hatching_chick: `:hatching_chick:` |\n| :chicken: `:chicken:` | :penguin: `:penguin:` | :turtle: `:turtle:` |\n| :bug: `:bug:` | :honeybee: `:honeybee:` | :ant: `:ant:` |\n| :beetle: `:beetle:` | :snail: `:snail:` | :octopus: `:octopus:` |\n| :tropical_fish: `:tropical_fish:` | :fish: `:fish:` | :whale: `:whale:` |\n| :whale2: `:whale2:` | :dolphin: `:dolphin:` | :cow2: `:cow2:` |\n| :ram: `:ram:` | :rat: `:rat:` | :water_buffalo: `:water_buffalo:` |\n| :tiger2: `:tiger2:` | :rabbit2: `:rabbit2:` | :dragon: `:dragon:` |\n| :goat: `:goat:` | :rooster: `:rooster:` | :dog2: `:dog2:` |\n| :pig2: `:pig2:` | :mouse2: `:mouse2:` | :ox: `:ox:` |\n| :dragon_face: `:dragon_face:` | :blowfish: `:blowfish:` | :crocodile: `:crocodile:` |\n| :dromedary_camel: `:dromedary_camel:` | :leopard: `:leopard:` | :cat2: `:cat2:` |\n| :poodle: `:poodle:` | :paw_prints: `:paw_prints:` | :bouquet: `:bouquet:` |\n| :cherry_blossom: `:cherry_blossom:` | :tulip: `:tulip:` | :four_leaf_clover: `:four_leaf_clover:` |\n| :rose: `:rose:` | :sunflower: `:sunflower:` | :hibiscus: `:hibiscus:` |\n| :maple_leaf: `:maple_leaf:` | :leaves: `:leaves:` | :fallen_leaf: `:fallen_leaf:` |\n| :herb: `:herb:` | :mushroom: `:mushroom:` | :cactus: `:cactus:` |\n| :palm_tree: `:palm_tree:` | :evergreen_tree: `:evergreen_tree:` | :deciduous_tree: `:deciduous_tree:` |\n| :chestnut: `:chestnut:` | :seedling: `:seedling:` | :blossom: `:blossom:` |\n| :ear_of_rice: `:ear_of_rice:` | :shell: `:shell:` | :globe_with_meridians: `:globe_with_meridians:` |\n| :sun_with_face: `:sun_with_face:` | :full_moon_with_face: `:full_moon_with_face:` | :new_moon_with_face: `:new_moon_with_face:` |\n| :new_moon: `:new_moon:` | :waxing_crescent_moon: `:waxing_crescent_moon:` | :first_quarter_moon: `:first_quarter_moon:` |\n| :waxing_gibbous_moon: `:waxing_gibbous_moon:` | :full_moon: `:full_moon:` | :waning_gibbous_moon: `:waning_gibbous_moon:` |\n| :last_quarter_moon: `:last_quarter_moon:` | :waning_crescent_moon: `:waning_crescent_moon:` | :last_quarter_moon_with_face: `:last_quarter_moon_with_face:` |\n| :first_quarter_moon_with_face: `:first_quarter_moon_with_face:` | :moon: `:moon:` | :earth_africa: `:earth_africa:` |\n| :earth_americas: `:earth_americas:` | :earth_asia: `:earth_asia:` | :volcano: `:volcano:` |\n| :milky_way: `:milky_way:` | :partly_sunny: `:partly_sunny:` | :octocat: `:octocat:` |\n| :squirrel: `:squirrel:` |\n\nObjects\n\n| :bamboo: `:bamboo:` | :gift_heart: `:gift_heart:` | :dolls: `:dolls:` |\n|---|---|---|\n| :school_satchel: `:school_satchel:` | :mortar_board: `:mortar_board:` | :flags: `:flags:` |\n| :fireworks: `:fireworks:` | :sparkler: `:sparkler:` | :wind_chime: `:wind_chime:` |\n| :rice_scene: `:rice_scene:` | :jack_o_lantern: `:jack_o_lantern:` | :ghost: `:ghost:` |\n| :santa: `:santa:` | :christmas_tree: `:christmas_tree:` | :gift: `:gift:` |\n| :bell: `:bell:` | :no_bell: `:no_bell:` | :tanabata_tree: `:tanabata_tree:` |\n| :tada: `:tada:` | :confetti_ball: `:confetti_ball:` | :balloon: `:balloon:` |\n| :crystal_ball: `:crystal_ball:` | :cd: `:cd:` | :dvd: `:dvd:` |\n| :floppy_disk: `:floppy_disk:` | :camera: `:camera:` | :video_camera: `:video_camera:` |\n| :movie_camera: `:movie_camera:` | :computer: `:computer:` | :tv: `:tv:` |\n| :iphone: `:iphone:` | :phone: `:phone:` | :telephone: `:telephone:` |\n| :telephone_receiver: `:telephone_receiver:` | :pager: `:pager:` | :fax: `:fax:` |\n| :minidisc: `:minidisc:` | :vhs: `:vhs:` | :sound: `:sound:` |\n| :speaker: `:speaker:` | :mute: `:mute:` | :loudspeaker: `:loudspeaker:` |\n| :mega: `:mega:` | :hourglass: `:hourglass:` | :hourglass_flowing_sand: `:hourglass_flowing_sand:` |\n| :alarm_clock: `:alarm_clock:` | :watch: `:watch:` | :radio: `:radio:` |\n| :satellite: `:satellite:` | :loop: `:loop:` | :mag: `:mag:` |\n| :mag_right: `:mag_right:` | :unlock: `:unlock:` | :lock: `:lock:` |\n| :lock_with_ink_pen: `:lock_with_ink_pen:` | :closed_lock_with_key: `:closed_lock_with_key:` | :key: `:key:` |\n| :bulb: `:bulb:` | :flashlight: `:flashlight:` | :high_brightness: `:high_brightness:` |\n| :low_brightness: `:low_brightness:` | :electric_plug: `:electric_plug:` | :battery: `:battery:` |\n| :calling: `:calling:` | :email: `:email:` | :mailbox: `:mailbox:` |\n| :postbox: `:postbox:` | :bath: `:bath:` | :bathtub: `:bathtub:` |\n| :shower: `:shower:` | :toilet: `:toilet:` | :wrench: `:wrench:` |\n| :nut_and_bolt: `:nut_and_bolt:` | :hammer: `:hammer:` | :seat: `:seat:` |\n| :moneybag: `:moneybag:` | :yen: `:yen:` | :dollar: `:dollar:` |\n| :pound: `:pound:` | :euro: `:euro:` | :credit_card: `:credit_card:` |\n| :money_with_wings: `:money_with_wings:` | :e-mail: `:e-mail:` | :inbox_tray: `:inbox_tray:` |\n| :outbox_tray: `:outbox_tray:` | :envelope: `:envelope:` | :incoming_envelope: `:incoming_envelope:` |\n| :postal_horn: `:postal_horn:` | :mailbox_closed: `:mailbox_closed:` | :mailbox_with_mail: `:mailbox_with_mail:` |\n| :mailbox_with_no_mail: `:mailbox_with_no_mail:` | :door: `:door:` | :smoking: `:smoking:` |\n| :bomb: `:bomb:` | :gun: `:gun:` | :hocho: `:hocho:` |\n| :pill: `:pill:` | :syringe: `:syringe:` | :page_facing_up: `:page_facing_up:` |\n| :page_with_curl: `:page_with_curl:` | :bookmark_tabs: `:bookmark_tabs:` | :bar_chart: `:bar_chart:` |\n| :chart_with_upwards_trend: `:chart_with_upwards_trend:` | :chart_with_downwards_trend: `:chart_with_downwards_trend:` | :scroll: `:scroll:` |\n| :clipboard: `:clipboard:` | :calendar: `:calendar:` | :date: `:date:` |\n| :card_index: `:card_index:` | :file_folder: `:file_folder:` | :open_file_folder: `:open_file_folder:` |\n| :scissors: `:scissors:` | :pushpin: `:pushpin:` | :paperclip: `:paperclip:` |\n| :black_nib: `:black_nib:` | :pencil2: `:pencil2:` | :straight_ruler: `:straight_ruler:` |\n| :triangular_ruler: `:triangular_ruler:` | :closed_book: `:closed_book:` | :green_book: `:green_book:` |\n| :blue_book: `:blue_book:` | :orange_book: `:orange_book:` | :notebook: `:notebook:` |\n| :notebook_with_decorative_cover: `:notebook_with_decorative_cover:` | :ledger: `:ledger:` | :books: `:books:` |\n| :bookmark: `:bookmark:` | :name_badge: `:name_badge:` | :microscope: `:microscope:` |\n| :telescope: `:telescope:` | :newspaper: `:newspaper:` | :football: `:football:` |\n| :basketball: `:basketball:` | :soccer: `:soccer:` | :baseball: `:baseball:` |\n| :tennis: `:tennis:` | :8ball: `:8ball:` | :rugby_football: `:rugby_football:` |\n| :bowling: `:bowling:` | :golf: `:golf:` | :mountain_bicyclist: `:mountain_bicyclist:` |\n| :bicyclist: `:bicyclist:` | :horse_racing: `:horse_racing:` | :snowboarder: `:snowboarder:` |\n| :swimmer: `:swimmer:` | :surfer: `:surfer:` | :ski: `:ski:` |\n| :spades: `:spades:` | :hearts: `:hearts:` | :clubs: `:clubs:` |\n| :diamonds: `:diamonds:` | :gem: `:gem:` | :ring: `:ring:` |\n| :trophy: `:trophy:` | :musical_score: `:musical_score:` | :musical_keyboard: `:musical_keyboard:` |\n| :violin: `:violin:` | :space_invader: `:space_invader:` | :video_game: `:video_game:` |\n| :black_joker: `:black_joker:` | :flower_playing_cards: `:flower_playing_cards:` | :game_die: `:game_die:` |\n| :dart: `:dart:` | :mahjong: `:mahjong:` | :clapper: `:clapper:` |\n| :memo: `:memo:` | :pencil: `:pencil:` | :book: `:book:` |\n| :art: `:art:` | :microphone: `:microphone:` | :headphones: `:headphones:` |\n| :trumpet: `:trumpet:` | :saxophone: `:saxophone:` | :guitar: `:guitar:` |\n| :shoe: `:shoe:` | :sandal: `:sandal:` | :high_heel: `:high_heel:` |\n| :lipstick: `:lipstick:` | :boot: `:boot:` | :shirt: `:shirt:` |\n| :tshirt: `:tshirt:` | :necktie: `:necktie:` | :womans_clothes: `:womans_clothes:` |\n| :dress: `:dress:` | :running_shirt_with_sash: `:running_shirt_with_sash:` | :jeans: `:jeans:` |\n| :kimono: `:kimono:` | :bikini: `:bikini:` | :ribbon: `:ribbon:` |\n| :tophat: `:tophat:` | :crown: `:crown:` | :womans_hat: `:womans_hat:` |\n| :mans_shoe: `:mans_shoe:` | :closed_umbrella: `:closed_umbrella:` | :briefcase: `:briefcase:` |\n| :handbag: `:handbag:` | :pouch: `:pouch:` | :purse: `:purse:` |\n| :eyeglasses: `:eyeglasses:` | :fishing_pole_and_fish: `:fishing_pole_and_fish:` | :coffee: `:coffee:` |\n| :tea: `:tea:` | :sake: `:sake:` | :baby_bottle: `:baby_bottle:` |\n| :beer: `:beer:` | :beers: `:beers:` | :cocktail: `:cocktail:` |\n| :tropical_drink: `:tropical_drink:` | :wine_glass: `:wine_glass:` | :fork_and_knife: `:fork_and_knife:` |\n| :pizza: `:pizza:` | :hamburger: `:hamburger:` | :fries: `:fries:` |\n| :poultry_leg: `:poultry_leg:` | :meat_on_bone: `:meat_on_bone:` | :spaghetti: `:spaghetti:` |\n| :curry: `:curry:` | :fried_shrimp: `:fried_shrimp:` | :bento: `:bento:` |\n| :sushi: `:sushi:` | :fish_cake: `:fish_cake:` | :rice_ball: `:rice_ball:` |\n| :rice_cracker: `:rice_cracker:` | :rice: `:rice:` | :ramen: `:ramen:` |\n| :stew: `:stew:` | :oden: `:oden:` | :dango: `:dango:` |\n| :egg: `:egg:` | :bread: `:bread:` | :doughnut: `:doughnut:` |\n| :custard: `:custard:` | :icecream: `:icecream:` | :ice_cream: `:ice_cream:` |\n| :shaved_ice: `:shaved_ice:` | :birthday: `:birthday:` | :cake: `:cake:` |\n| :cookie: `:cookie:` | :chocolate_bar: `:chocolate_bar:` | :candy: `:candy:` |\n| :lollipop: `:lollipop:` | :honey_pot: `:honey_pot:` | :apple: `:apple:` |\n| :green_apple: `:green_apple:` | :tangerine: `:tangerine:` | :lemon: `:lemon:` |\n| :cherries: `:cherries:` | :grapes: `:grapes:` | :watermelon: `:watermelon:` |\n| :strawberry: `:strawberry:` | :peach: `:peach:` | :melon: `:melon:` |\n| :banana: `:banana:` | :pear: `:pear:` | :pineapple: `:pineapple:` |\n| :sweet_potato: `:sweet_potato:` | :eggplant: `:eggplant:` | :tomato: `:tomato:` |\n| :corn: `:corn:` |\n\nPlaces\n\n| :house: `:house:` | :house_with_garden: `:house_with_garden:` | :school: `:school:` |\n|---|---|---|\n| :office: `:office:` | :post_office: `:post_office:` | :hospital: `:hospital:` |\n| :bank: `:bank:` | :convenience_store: `:convenience_store:` | :love_hotel: `:love_hotel:` |\n| :hotel: `:hotel:` | :wedding: `:wedding:` | :church: `:church:` |\n| :department_store: `:department_store:` | :european_post_office: `:european_post_office:` | :city_sunrise: `:city_sunrise:` |\n| :city_sunset: `:city_sunset:` | :japanese_castle: `:japanese_castle:` | :european_castle: `:european_castle:` |\n| :tent: `:tent:` | :factory: `:factory:` | :tokyo_tower: `:tokyo_tower:` |\n| :japan: `:japan:` | :mount_fuji: `:mount_fuji:` | :sunrise_over_mountains: `:sunrise_over_mountains:` |\n| :sunrise: `:sunrise:` | :stars: `:stars:` | :statue_of_liberty: `:statue_of_liberty:` |\n| :bridge_at_night: `:bridge_at_night:` | :carousel_horse: `:carousel_horse:` | :rainbow: `:rainbow:` |\n| :ferris_wheel: `:ferris_wheel:` | :fountain: `:fountain:` | :roller_coaster: `:roller_coaster:` |\n| :ship: `:ship:` | :speedboat: `:speedboat:` | :boat: `:boat:` |\n| :sailboat: `:sailboat:` | :rowboat: `:rowboat:` | :anchor: `:anchor:` |\n| :rocket: `:rocket:` | :airplane: `:airplane:` | :helicopter: `:helicopter:` |\n| :steam_locomotive: `:steam_locomotive:` | :tram: `:tram:` | :mountain_railway: `:mountain_railway:` |\n| :bike: `:bike:` | :aerial_tramway: `:aerial_tramway:` | :suspension_railway: `:suspension_railway:` |\n| :mountain_cableway: `:mountain_cableway:` | :tractor: `:tractor:` | :blue_car: `:blue_car:` |\n| :oncoming_automobile: `:oncoming_automobile:` | :car: `:car:` | :red_car: `:red_car:` |\n| :taxi: `:taxi:` | :oncoming_taxi: `:oncoming_taxi:` | :articulated_lorry: `:articulated_lorry:` |\n| :bus: `:bus:` | :oncoming_bus: `:oncoming_bus:` | :rotating_light: `:rotating_light:` |\n| :police_car: `:police_car:` | :oncoming_police_car: `:oncoming_police_car:` | :fire_engine: `:fire_engine:` |\n| :ambulance: `:ambulance:` | :minibus: `:minibus:` | :truck: `:truck:` |\n| :train: `:train:` | :station: `:station:` | :train2: `:train2:` |\n| :bullettrain_front: `:bullettrain_front:` | :bullettrain_side: `:bullettrain_side:` | :light_rail: `:light_rail:` |\n| :monorail: `:monorail:` | :railway_car: `:railway_car:` | :trolleybus: `:trolleybus:` |\n| :ticket: `:ticket:` | :fuelpump: `:fuelpump:` | :vertical_traffic_light: `:vertical_traffic_light:` |\n| :traffic_light: `:traffic_light:` | :warning: `:warning:` | :construction: `:construction:` |\n| :beginner: `:beginner:` | :atm: `:atm:` | :slot_machine: `:slot_machine:` |\n| :busstop: `:busstop:` | :barber: `:barber:` | :hotsprings: `:hotsprings:` |\n| :checkered_flag: `:checkered_flag:` | :crossed_flags: `:crossed_flags:` | :izakaya_lantern: `:izakaya_lantern:` |\n| :moyai: `:moyai:` | :circus_tent: `:circus_tent:` | :performing_arts: `:performing_arts:` |\n| :round_pushpin: `:round_pushpin:` | :triangular_flag_on_post: `:triangular_flag_on_post:` | :jp: `:jp:` |\n| :kr: `:kr:` | :cn: `:cn:` | :us: `:us:` |\n| :fr: `:fr:` | :es: `:es:` | :it: `:it:` |\n| :ru: `:ru:` | :gb: `:gb:` | :uk: `:uk:` |\n| :de: `:de:` |\n\nSymbols\n\n| :one: `:one:` | :two: `:two:` | :three: `:three:` |\n|---|---|---|\n| :four: `:four:` | :five: `:five:` | :six: `:six:` |\n| :seven: `:seven:` | :eight: `:eight:` | :nine: `:nine:` |\n| :keycap_ten: `:keycap_ten:` | :1234: `:1234:` | :zero: `:zero:` |\n| :hash: `:hash:` | :symbols: `:symbols:` | :arrow_backward: `:arrow_backward:` |\n| :arrow_down: `:arrow_down:` | :arrow_forward: `:arrow_forward:` | :arrow_left: `:arrow_left:` |\n| :capital_abcd: `:capital_abcd:` | :abcd: `:abcd:` | :abc: `:abc:` |\n| :arrow_lower_left: `:arrow_lower_left:` | :arrow_lower_right: `:arrow_lower_right:` | :arrow_right: `:arrow_right:` |\n| :arrow_up: `:arrow_up:` | :arrow_upper_left: `:arrow_upper_left:` | :arrow_upper_right: `:arrow_upper_right:` |\n| :arrow_double_down: `:arrow_double_down:` | :arrow_double_up: `:arrow_double_up:` | :arrow_down_small: `:arrow_down_small:` |\n| :arrow_heading_down: `:arrow_heading_down:` | :arrow_heading_up: `:arrow_heading_up:` | :leftwards_arrow_with_hook: `:leftwards_arrow_with_hook:` |\n| :arrow_right_hook: `:arrow_right_hook:` | :left_right_arrow: `:left_right_arrow:` | :arrow_up_down: `:arrow_up_down:` |\n| :arrow_up_small: `:arrow_up_small:` | :arrows_clockwise: `:arrows_clockwise:` | :arrows_counterclockwise: `:arrows_counterclockwise:` |\n| :rewind: `:rewind:` | :fast_forward: `:fast_forward:` | :information_source: `:information_source:` |\n| :ok: `:ok:` | :twisted_rightwards_arrows: `:twisted_rightwards_arrows:` | :repeat: `:repeat:` |\n| :repeat_one: `:repeat_one:` | :new: `:new:` | :top: `:top:` |\n| :up: `:up:` | :cool: `:cool:` | :free: `:free:` |\n| :ng: `:ng:` | :cinema: `:cinema:` | :koko: `:koko:` |\n| :signal_strength: `:signal_strength:` | :u5272: `:u5272:` | :u5408: `:u5408:` |\n| :u55b6: `:u55b6:` | :u6307: `:u6307:` | :u6708: `:u6708:` |\n| :u6709: `:u6709:` | :u6e80: `:u6e80:` | :u7121: `:u7121:` |\n| :u7533: `:u7533:` | :u7a7a: `:u7a7a:` | :u7981: `:u7981:` |\n| :sa: `:sa:` | :restroom: `:restroom:` | :mens: `:mens:` |\n| :womens: `:womens:` | :baby_symbol: `:baby_symbol:` | :no_smoking: `:no_smoking:` |\n| :parking: `:parking:` | :wheelchair: `:wheelchair:` | :metro: `:metro:` |\n| :baggage_claim: `:baggage_claim:` | :accept: `:accept:` | :wc: `:wc:` |\n| :potable_water: `:potable_water:` | :put_litter_in_its_place: `:put_litter_in_its_place:` | :secret: `:secret:` |\n| :congratulations: `:congratulations:` | :m: `:m:` | :passport_control: `:passport_control:` |\n| :left_luggage: `:left_luggage:` | :customs: `:customs:` | :ideograph_advantage: `:ideograph_advantage:` |\n| :cl: `:cl:` | :sos: `:sos:` | :id: `:id:` |\n| :no_entry_sign: `:no_entry_sign:` | :underage: `:underage:` | :no_mobile_phones: `:no_mobile_phones:` |\n| :do_not_litter: `:do_not_litter:` | :non-potable_water: `:non-potable_water:` | :no_bicycles: `:no_bicycles:` |\n| :no_pedestrians: `:no_pedestrians:` | :children_crossing: `:children_crossing:` | :no_entry: `:no_entry:` |\n| :eight_spoked_asterisk: `:eight_spoked_asterisk:` | :eight_pointed_black_star: `:eight_pointed_black_star:` | :heart_decoration: `:heart_decoration:` |\n| :vs: `:vs:` | :vibration_mode: `:vibration_mode:` | :mobile_phone_off: `:mobile_phone_off:` |\n| :chart: `:chart:` | :currency_exchange: `:currency_exchange:` | :aries: `:aries:` |\n| :taurus: `:taurus:` | :gemini: `:gemini:` | :cancer: `:cancer:` |\n| :leo: `:leo:` | :virgo: `:virgo:` | :libra: `:libra:` |\n| :scorpius: `:scorpius:` | :sagittarius: `:sagittarius:` | :capricorn: `:capricorn:` |\n| :aquarius: `:aquarius:` | :pisces: `:pisces:` | :ophiuchus: `:ophiuchus:` |\n| :six_pointed_star: `:six_pointed_star:` | :negative_squared_cross_mark: `:negative_squared_cross_mark:` | :a: `:a:` |\n| :b: `:b:` | :ab: `:ab:` | :o2: `:o2:` |\n| :diamond_shape_with_a_dot_inside: `:diamond_shape_with_a_dot_inside:` | :recycle: `:recycle:` | :end: `:end:` |\n| :on: `:on:` | :soon: `:soon:` | :clock1: `:clock1:` |\n| :clock130: `:clock130:` | :clock10: `:clock10:` | :clock1030: `:clock1030:` |\n| :clock11: `:clock11:` | :clock1130: `:clock1130:` | :clock12: `:clock12:` |\n| :clock1230: `:clock1230:` | :clock2: `:clock2:` | :clock230: `:clock230:` |\n| :clock3: `:clock3:` | :clock330: `:clock330:` | :clock4: `:clock4:` |\n| :clock430: `:clock430:` | :clock5: `:clock5:` | :clock530: `:clock530:` |\n| :clock6: `:clock6:` | :clock630: `:clock630:` | :clock7: `:clock7:` |\n| :clock730: `:clock730:` | :clock8: `:clock8:` | :clock830: `:clock830:` |\n| :clock9: `:clock9:` | :clock930: `:clock930:` | :heavy_dollar_sign: `:heavy_dollar_sign:` |\n| :copyright: `:copyright:` | :registered: `:registered:` | :tm: `:tm:` |\n| :x: `:x:` | :heavy_exclamation_mark: `:heavy_exclamation_mark:` | :bangbang: `:bangbang:` |\n| :interrobang: `:interrobang:` | :o: `:o:` | :heavy_multiplication_x: `:heavy_multiplication_x:` |\n| :heavy_plus_sign: `:heavy_plus_sign:` | :heavy_minus_sign: `:heavy_minus_sign:` | :heavy_division_sign: `:heavy_division_sign:` |\n| :white_flower: `:white_flower:` | :100: `:100:` | :heavy_check_mark: `:heavy_check_mark:` |\n| :ballot_box_with_check: `:ballot_box_with_check:` | :radio_button: `:radio_button:` | :link: `:link:` |\n| :curly_loop: `:curly_loop:` | :wavy_dash: `:wavy_dash:` | :part_alternation_mark: `:part_alternation_mark:` |\n| :trident: `:trident:` | :black_square: `:black_square:` | :white_square: `:white_square:` |\n| :white_check_mark: `:white_check_mark:` | :black_square_button: `:black_square_button:` | :white_square_button: `:white_square_button:` |\n| :black_circle: `:black_circle:` | :white_circle: `:white_circle:` | :red_circle: `:red_circle:` |\n| :large_blue_circle: `:large_blue_circle:` | :large_blue_diamond: `:large_blue_diamond:` | :large_orange_diamond: `:large_orange_diamond:` |\n| :small_blue_diamond: `:small_blue_diamond:` | :small_orange_diamond: `:small_orange_diamond:` | :small_red_triangle: `:small_red_triangle:` |\n| :small_red_triangle_down: `:small_red_triangle_down:` | :shipit: `:shipit:` |\n\n","source":"_posts/emoji.md","raw":"---\ntitle: Emoji\ntags: \n- Git\n---\nPeople\ngithub中常用emoji集合\n<!--more-->\n| :bowtie: `:bowtie:` | :smile: `:smile:` | :laughing: `:laughing:` |\n|---|---|---|\n| :blush: `:blush:` | :smiley: `:smiley:` | :relaxed: `:relaxed:` |\n| :smirk: `:smirk:` | :heart_eyes: `:heart_eyes:` | :kissing_heart: `:kissing_heart:` |\n| :kissing_closed_eyes: `:kissing_closed_eyes:` | :flushed: `:flushed:` | :relieved: `:relieved:` |\n| :satisfied: `:satisfied:` | :grin: `:grin:` | :wink: `:wink:` |\n| :stuck_out_tongue_winking_eye: `:stuck_out_tongue_winking_eye:` | :stuck_out_tongue_closed_eyes: `:stuck_out_tongue_closed_eyes:` | :grinning: `:grinning:` |\n| :kissing: `:kissing:` | :kissing_smiling_eyes: `:kissing_smiling_eyes:` | :stuck_out_tongue: `:stuck_out_tongue:` |\n| :sleeping: `:sleeping:` | :worried: `:worried:` | :frowning: `:frowning:` |\n| :anguished: `:anguished:` | :open_mouth: `:open_mouth:` | :grimacing: `:grimacing:` |\n| :confused: `:confused:` | :hushed: `:hushed:` | :expressionless: `:expressionless:` |\n| :unamused: `:unamused:` | :sweat_smile: `:sweat_smile:` | :sweat: `:sweat:` |\n| :disappointed_relieved: `:disappointed_relieved:` | :weary: `:weary:` | :pensive: `:pensive:` |\n| :disappointed: `:disappointed:` | :confounded: `:confounded:` | :fearful: `:fearful:` |\n| :cold_sweat: `:cold_sweat:` | :persevere: `:persevere:` | :cry: `:cry:` |\n| :sob: `:sob:` | :joy: `:joy:` | :astonished: `:astonished:` |\n| :scream: `:scream:` | :neckbeard: `:neckbeard:` | :tired_face: `:tired_face:` |\n| :angry: `:angry:` | :rage: `:rage:` | :triumph: `:triumph:` |\n| :sleepy: `:sleepy:` | :yum: `:yum:` | :mask: `:mask:` |\n| :sunglasses: `:sunglasses:` | :dizzy_face: `:dizzy_face:` | :imp: `:imp:` |\n| :smiling_imp: `:smiling_imp:` | :neutral_face: `:neutral_face:` | :no_mouth: `:no_mouth:` |\n| :innocent: `:innocent:` | :alien: `:alien:` | :yellow_heart: `:yellow_heart:` |\n| :blue_heart: `:blue_heart:` | :purple_heart: `:purple_heart:` | :heart: `:heart:` |\n| :green_heart: `:green_heart:` | :broken_heart: `:broken_heart:` | :heartbeat: `:heartbeat:` |\n| :heartpulse: `:heartpulse:` | :two_hearts: `:two_hearts:` | :revolving_hearts: `:revolving_hearts:` |\n| :cupid: `:cupid:` | :sparkling_heart: `:sparkling_heart:` | :sparkles: `:sparkles:` |\n| :star: `:star:` | :star2: `:star2:` | :dizzy: `:dizzy:` |\n| :boom: `:boom:` | :collision: `:collision:` | :anger: `:anger:` |\n| :exclamation: `:exclamation:` | :question: `:question:` | :grey_exclamation: `:grey_exclamation:` |\n| :grey_question: `:grey_question:` | :zzz: `:zzz:` | :dash: `:dash:` |\n| :sweat_drops: `:sweat_drops:` | :notes: `:notes:` | :musical_note: `:musical_note:` |\n| :fire: `:fire:` | :hankey: `:hankey:` | :poop: `:poop:` |\n| :shit: `:shit:` | :+1: `:+1:` | :thumbsup: `:thumbsup:` |\n| :-1: `:-1:` | :thumbsdown: `:thumbsdown:` | :ok_hand: `:ok_hand:` |\n| :punch: `:punch:` | :facepunch: `:facepunch:` | :fist: `:fist:` |\n| :v: `:v:` | :wave: `:wave:` | :hand: `:hand:` |\n| :raised_hand: `:raised_hand:` | :open_hands: `:open_hands:` | :point_up: `:point_up:` |\n| :point_down: `:point_down:` | :point_left: `:point_left:` | :point_right: `:point_right:` |\n| :raised_hands: `:raised_hands:` | :pray: `:pray:` | :point_up_2: `:point_up_2:` |\n| :clap: `:clap:` | :muscle: `:muscle:` | :metal: `:metal:` |\n| :fu: `:fu:` | :walking: `:walking:` | :runner: `:runner:` |\n| :running: `:running:` | :couple: `:couple:` | :family: `:family:` |\n| :two_men_holding_hands: `:two_men_holding_hands:` | :two_women_holding_hands: `:two_women_holding_hands:` | :dancer: `:dancer:` |\n| :dancers: `:dancers:` | :ok_woman: `:ok_woman:` | :no_good: `:no_good:` |\n| :information_desk_person: `:information_desk_person:` | :raising_hand: `:raising_hand:` | :bride_with_veil: `:bride_with_veil:` |\n| :person_with_pouting_face: `:person_with_pouting_face:` | :person_frowning: `:person_frowning:` | :bow: `:bow:` |\n| :couplekiss: `:couplekiss:` | :couple_with_heart: `:couple_with_heart:` | :massage: `:massage:` |\n| :haircut: `:haircut:` | :nail_care: `:nail_care:` | :boy: `:boy:` |\n| :girl: `:girl:` | :woman: `:woman:` | :man: `:man:` |\n| :baby: `:baby:` | :older_woman: `:older_woman:` | :older_man: `:older_man:` |\n| :person_with_blond_hair: `:person_with_blond_hair:` | :man_with_gua_pi_mao: `:man_with_gua_pi_mao:` | :man_with_turban: `:man_with_turban:` |\n| :construction_worker: `:construction_worker:` | :cop: `:cop:` | :angel: `:angel:` |\n| :princess: `:princess:` | :smiley_cat: `:smiley_cat:` | :smile_cat: `:smile_cat:` |\n| :heart_eyes_cat: `:heart_eyes_cat:` | :kissing_cat: `:kissing_cat:` | :smirk_cat: `:smirk_cat:` |\n| :scream_cat: `:scream_cat:` | :crying_cat_face: `:crying_cat_face:` | :joy_cat: `:joy_cat:` |\n| :pouting_cat: `:pouting_cat:` | :japanese_ogre: `:japanese_ogre:` | :japanese_goblin: `:japanese_goblin:` |\n| :see_no_evil: `:see_no_evil:` | :hear_no_evil: `:hear_no_evil:` | :speak_no_evil: `:speak_no_evil:` |\n| :guardsman: `:guardsman:` | :skull: `:skull:` | :feet: `:feet:` |\n| :lips: `:lips:` | :kiss: `:kiss:` | :droplet: `:droplet:` |\n| :ear: `:ear:` | :eyes: `:eyes:` | :nose: `:nose:` |\n| :tongue: `:tongue:` | :love_letter: `:love_letter:` | :bust_in_silhouette: `:bust_in_silhouette:` |\n| :busts_in_silhouette: `:busts_in_silhouette:` | :speech_balloon: `:speech_balloon:` | :thought_balloon: `:thought_balloon:` |\n| :feelsgood: `:feelsgood:` | :finnadie: `:finnadie:` | :goberserk: `:goberserk:` |\n| :godmode: `:godmode:` | :hurtrealbad: `:hurtrealbad:` | :rage1: `:rage1:` |\n| :rage2: `:rage2:` | :rage3: `:rage3:` | :rage4: `:rage4:` |\n| :suspect: `:suspect:` | :trollface: `:trollface:` | \n\nNature\n\n| :sunny: `:sunny:` | :umbrella: `:umbrella:` | :cloud: `:cloud:` |\n|---|---|---|\n| :snowflake: `:snowflake:` | :snowman: `:snowman:` | :zap: `:zap:` |\n| :cyclone: `:cyclone:` | :foggy: `:foggy:` | :ocean: `:ocean:` |\n| :cat: `:cat:` | :dog: `:dog:` | :mouse: `:mouse:` |\n| :hamster: `:hamster:` | :rabbit: `:rabbit:` | :wolf: `:wolf:` |\n| :frog: `:frog:` | :tiger: `:tiger:` | :koala: `:koala:` |\n| :bear: `:bear:` | :pig: `:pig:` | :pig_nose: `:pig_nose:` |\n| :cow: `:cow:` | :boar: `:boar:` | :monkey_face: `:monkey_face:` |\n| :monkey: `:monkey:` | :horse: `:horse:` | :racehorse: `:racehorse:` |\n| :camel: `:camel:` | :sheep: `:sheep:` | :elephant: `:elephant:` |\n| :panda_face: `:panda_face:` | :snake: `:snake:` | :bird: `:bird:` |\n| :baby_chick: `:baby_chick:` | :hatched_chick: `:hatched_chick:` | :hatching_chick: `:hatching_chick:` |\n| :chicken: `:chicken:` | :penguin: `:penguin:` | :turtle: `:turtle:` |\n| :bug: `:bug:` | :honeybee: `:honeybee:` | :ant: `:ant:` |\n| :beetle: `:beetle:` | :snail: `:snail:` | :octopus: `:octopus:` |\n| :tropical_fish: `:tropical_fish:` | :fish: `:fish:` | :whale: `:whale:` |\n| :whale2: `:whale2:` | :dolphin: `:dolphin:` | :cow2: `:cow2:` |\n| :ram: `:ram:` | :rat: `:rat:` | :water_buffalo: `:water_buffalo:` |\n| :tiger2: `:tiger2:` | :rabbit2: `:rabbit2:` | :dragon: `:dragon:` |\n| :goat: `:goat:` | :rooster: `:rooster:` | :dog2: `:dog2:` |\n| :pig2: `:pig2:` | :mouse2: `:mouse2:` | :ox: `:ox:` |\n| :dragon_face: `:dragon_face:` | :blowfish: `:blowfish:` | :crocodile: `:crocodile:` |\n| :dromedary_camel: `:dromedary_camel:` | :leopard: `:leopard:` | :cat2: `:cat2:` |\n| :poodle: `:poodle:` | :paw_prints: `:paw_prints:` | :bouquet: `:bouquet:` |\n| :cherry_blossom: `:cherry_blossom:` | :tulip: `:tulip:` | :four_leaf_clover: `:four_leaf_clover:` |\n| :rose: `:rose:` | :sunflower: `:sunflower:` | :hibiscus: `:hibiscus:` |\n| :maple_leaf: `:maple_leaf:` | :leaves: `:leaves:` | :fallen_leaf: `:fallen_leaf:` |\n| :herb: `:herb:` | :mushroom: `:mushroom:` | :cactus: `:cactus:` |\n| :palm_tree: `:palm_tree:` | :evergreen_tree: `:evergreen_tree:` | :deciduous_tree: `:deciduous_tree:` |\n| :chestnut: `:chestnut:` | :seedling: `:seedling:` | :blossom: `:blossom:` |\n| :ear_of_rice: `:ear_of_rice:` | :shell: `:shell:` | :globe_with_meridians: `:globe_with_meridians:` |\n| :sun_with_face: `:sun_with_face:` | :full_moon_with_face: `:full_moon_with_face:` | :new_moon_with_face: `:new_moon_with_face:` |\n| :new_moon: `:new_moon:` | :waxing_crescent_moon: `:waxing_crescent_moon:` | :first_quarter_moon: `:first_quarter_moon:` |\n| :waxing_gibbous_moon: `:waxing_gibbous_moon:` | :full_moon: `:full_moon:` | :waning_gibbous_moon: `:waning_gibbous_moon:` |\n| :last_quarter_moon: `:last_quarter_moon:` | :waning_crescent_moon: `:waning_crescent_moon:` | :last_quarter_moon_with_face: `:last_quarter_moon_with_face:` |\n| :first_quarter_moon_with_face: `:first_quarter_moon_with_face:` | :moon: `:moon:` | :earth_africa: `:earth_africa:` |\n| :earth_americas: `:earth_americas:` | :earth_asia: `:earth_asia:` | :volcano: `:volcano:` |\n| :milky_way: `:milky_way:` | :partly_sunny: `:partly_sunny:` | :octocat: `:octocat:` |\n| :squirrel: `:squirrel:` |\n\nObjects\n\n| :bamboo: `:bamboo:` | :gift_heart: `:gift_heart:` | :dolls: `:dolls:` |\n|---|---|---|\n| :school_satchel: `:school_satchel:` | :mortar_board: `:mortar_board:` | :flags: `:flags:` |\n| :fireworks: `:fireworks:` | :sparkler: `:sparkler:` | :wind_chime: `:wind_chime:` |\n| :rice_scene: `:rice_scene:` | :jack_o_lantern: `:jack_o_lantern:` | :ghost: `:ghost:` |\n| :santa: `:santa:` | :christmas_tree: `:christmas_tree:` | :gift: `:gift:` |\n| :bell: `:bell:` | :no_bell: `:no_bell:` | :tanabata_tree: `:tanabata_tree:` |\n| :tada: `:tada:` | :confetti_ball: `:confetti_ball:` | :balloon: `:balloon:` |\n| :crystal_ball: `:crystal_ball:` | :cd: `:cd:` | :dvd: `:dvd:` |\n| :floppy_disk: `:floppy_disk:` | :camera: `:camera:` | :video_camera: `:video_camera:` |\n| :movie_camera: `:movie_camera:` | :computer: `:computer:` | :tv: `:tv:` |\n| :iphone: `:iphone:` | :phone: `:phone:` | :telephone: `:telephone:` |\n| :telephone_receiver: `:telephone_receiver:` | :pager: `:pager:` | :fax: `:fax:` |\n| :minidisc: `:minidisc:` | :vhs: `:vhs:` | :sound: `:sound:` |\n| :speaker: `:speaker:` | :mute: `:mute:` | :loudspeaker: `:loudspeaker:` |\n| :mega: `:mega:` | :hourglass: `:hourglass:` | :hourglass_flowing_sand: `:hourglass_flowing_sand:` |\n| :alarm_clock: `:alarm_clock:` | :watch: `:watch:` | :radio: `:radio:` |\n| :satellite: `:satellite:` | :loop: `:loop:` | :mag: `:mag:` |\n| :mag_right: `:mag_right:` | :unlock: `:unlock:` | :lock: `:lock:` |\n| :lock_with_ink_pen: `:lock_with_ink_pen:` | :closed_lock_with_key: `:closed_lock_with_key:` | :key: `:key:` |\n| :bulb: `:bulb:` | :flashlight: `:flashlight:` | :high_brightness: `:high_brightness:` |\n| :low_brightness: `:low_brightness:` | :electric_plug: `:electric_plug:` | :battery: `:battery:` |\n| :calling: `:calling:` | :email: `:email:` | :mailbox: `:mailbox:` |\n| :postbox: `:postbox:` | :bath: `:bath:` | :bathtub: `:bathtub:` |\n| :shower: `:shower:` | :toilet: `:toilet:` | :wrench: `:wrench:` |\n| :nut_and_bolt: `:nut_and_bolt:` | :hammer: `:hammer:` | :seat: `:seat:` |\n| :moneybag: `:moneybag:` | :yen: `:yen:` | :dollar: `:dollar:` |\n| :pound: `:pound:` | :euro: `:euro:` | :credit_card: `:credit_card:` |\n| :money_with_wings: `:money_with_wings:` | :e-mail: `:e-mail:` | :inbox_tray: `:inbox_tray:` |\n| :outbox_tray: `:outbox_tray:` | :envelope: `:envelope:` | :incoming_envelope: `:incoming_envelope:` |\n| :postal_horn: `:postal_horn:` | :mailbox_closed: `:mailbox_closed:` | :mailbox_with_mail: `:mailbox_with_mail:` |\n| :mailbox_with_no_mail: `:mailbox_with_no_mail:` | :door: `:door:` | :smoking: `:smoking:` |\n| :bomb: `:bomb:` | :gun: `:gun:` | :hocho: `:hocho:` |\n| :pill: `:pill:` | :syringe: `:syringe:` | :page_facing_up: `:page_facing_up:` |\n| :page_with_curl: `:page_with_curl:` | :bookmark_tabs: `:bookmark_tabs:` | :bar_chart: `:bar_chart:` |\n| :chart_with_upwards_trend: `:chart_with_upwards_trend:` | :chart_with_downwards_trend: `:chart_with_downwards_trend:` | :scroll: `:scroll:` |\n| :clipboard: `:clipboard:` | :calendar: `:calendar:` | :date: `:date:` |\n| :card_index: `:card_index:` | :file_folder: `:file_folder:` | :open_file_folder: `:open_file_folder:` |\n| :scissors: `:scissors:` | :pushpin: `:pushpin:` | :paperclip: `:paperclip:` |\n| :black_nib: `:black_nib:` | :pencil2: `:pencil2:` | :straight_ruler: `:straight_ruler:` |\n| :triangular_ruler: `:triangular_ruler:` | :closed_book: `:closed_book:` | :green_book: `:green_book:` |\n| :blue_book: `:blue_book:` | :orange_book: `:orange_book:` | :notebook: `:notebook:` |\n| :notebook_with_decorative_cover: `:notebook_with_decorative_cover:` | :ledger: `:ledger:` | :books: `:books:` |\n| :bookmark: `:bookmark:` | :name_badge: `:name_badge:` | :microscope: `:microscope:` |\n| :telescope: `:telescope:` | :newspaper: `:newspaper:` | :football: `:football:` |\n| :basketball: `:basketball:` | :soccer: `:soccer:` | :baseball: `:baseball:` |\n| :tennis: `:tennis:` | :8ball: `:8ball:` | :rugby_football: `:rugby_football:` |\n| :bowling: `:bowling:` | :golf: `:golf:` | :mountain_bicyclist: `:mountain_bicyclist:` |\n| :bicyclist: `:bicyclist:` | :horse_racing: `:horse_racing:` | :snowboarder: `:snowboarder:` |\n| :swimmer: `:swimmer:` | :surfer: `:surfer:` | :ski: `:ski:` |\n| :spades: `:spades:` | :hearts: `:hearts:` | :clubs: `:clubs:` |\n| :diamonds: `:diamonds:` | :gem: `:gem:` | :ring: `:ring:` |\n| :trophy: `:trophy:` | :musical_score: `:musical_score:` | :musical_keyboard: `:musical_keyboard:` |\n| :violin: `:violin:` | :space_invader: `:space_invader:` | :video_game: `:video_game:` |\n| :black_joker: `:black_joker:` | :flower_playing_cards: `:flower_playing_cards:` | :game_die: `:game_die:` |\n| :dart: `:dart:` | :mahjong: `:mahjong:` | :clapper: `:clapper:` |\n| :memo: `:memo:` | :pencil: `:pencil:` | :book: `:book:` |\n| :art: `:art:` | :microphone: `:microphone:` | :headphones: `:headphones:` |\n| :trumpet: `:trumpet:` | :saxophone: `:saxophone:` | :guitar: `:guitar:` |\n| :shoe: `:shoe:` | :sandal: `:sandal:` | :high_heel: `:high_heel:` |\n| :lipstick: `:lipstick:` | :boot: `:boot:` | :shirt: `:shirt:` |\n| :tshirt: `:tshirt:` | :necktie: `:necktie:` | :womans_clothes: `:womans_clothes:` |\n| :dress: `:dress:` | :running_shirt_with_sash: `:running_shirt_with_sash:` | :jeans: `:jeans:` |\n| :kimono: `:kimono:` | :bikini: `:bikini:` | :ribbon: `:ribbon:` |\n| :tophat: `:tophat:` | :crown: `:crown:` | :womans_hat: `:womans_hat:` |\n| :mans_shoe: `:mans_shoe:` | :closed_umbrella: `:closed_umbrella:` | :briefcase: `:briefcase:` |\n| :handbag: `:handbag:` | :pouch: `:pouch:` | :purse: `:purse:` |\n| :eyeglasses: `:eyeglasses:` | :fishing_pole_and_fish: `:fishing_pole_and_fish:` | :coffee: `:coffee:` |\n| :tea: `:tea:` | :sake: `:sake:` | :baby_bottle: `:baby_bottle:` |\n| :beer: `:beer:` | :beers: `:beers:` | :cocktail: `:cocktail:` |\n| :tropical_drink: `:tropical_drink:` | :wine_glass: `:wine_glass:` | :fork_and_knife: `:fork_and_knife:` |\n| :pizza: `:pizza:` | :hamburger: `:hamburger:` | :fries: `:fries:` |\n| :poultry_leg: `:poultry_leg:` | :meat_on_bone: `:meat_on_bone:` | :spaghetti: `:spaghetti:` |\n| :curry: `:curry:` | :fried_shrimp: `:fried_shrimp:` | :bento: `:bento:` |\n| :sushi: `:sushi:` | :fish_cake: `:fish_cake:` | :rice_ball: `:rice_ball:` |\n| :rice_cracker: `:rice_cracker:` | :rice: `:rice:` | :ramen: `:ramen:` |\n| :stew: `:stew:` | :oden: `:oden:` | :dango: `:dango:` |\n| :egg: `:egg:` | :bread: `:bread:` | :doughnut: `:doughnut:` |\n| :custard: `:custard:` | :icecream: `:icecream:` | :ice_cream: `:ice_cream:` |\n| :shaved_ice: `:shaved_ice:` | :birthday: `:birthday:` | :cake: `:cake:` |\n| :cookie: `:cookie:` | :chocolate_bar: `:chocolate_bar:` | :candy: `:candy:` |\n| :lollipop: `:lollipop:` | :honey_pot: `:honey_pot:` | :apple: `:apple:` |\n| :green_apple: `:green_apple:` | :tangerine: `:tangerine:` | :lemon: `:lemon:` |\n| :cherries: `:cherries:` | :grapes: `:grapes:` | :watermelon: `:watermelon:` |\n| :strawberry: `:strawberry:` | :peach: `:peach:` | :melon: `:melon:` |\n| :banana: `:banana:` | :pear: `:pear:` | :pineapple: `:pineapple:` |\n| :sweet_potato: `:sweet_potato:` | :eggplant: `:eggplant:` | :tomato: `:tomato:` |\n| :corn: `:corn:` |\n\nPlaces\n\n| :house: `:house:` | :house_with_garden: `:house_with_garden:` | :school: `:school:` |\n|---|---|---|\n| :office: `:office:` | :post_office: `:post_office:` | :hospital: `:hospital:` |\n| :bank: `:bank:` | :convenience_store: `:convenience_store:` | :love_hotel: `:love_hotel:` |\n| :hotel: `:hotel:` | :wedding: `:wedding:` | :church: `:church:` |\n| :department_store: `:department_store:` | :european_post_office: `:european_post_office:` | :city_sunrise: `:city_sunrise:` |\n| :city_sunset: `:city_sunset:` | :japanese_castle: `:japanese_castle:` | :european_castle: `:european_castle:` |\n| :tent: `:tent:` | :factory: `:factory:` | :tokyo_tower: `:tokyo_tower:` |\n| :japan: `:japan:` | :mount_fuji: `:mount_fuji:` | :sunrise_over_mountains: `:sunrise_over_mountains:` |\n| :sunrise: `:sunrise:` | :stars: `:stars:` | :statue_of_liberty: `:statue_of_liberty:` |\n| :bridge_at_night: `:bridge_at_night:` | :carousel_horse: `:carousel_horse:` | :rainbow: `:rainbow:` |\n| :ferris_wheel: `:ferris_wheel:` | :fountain: `:fountain:` | :roller_coaster: `:roller_coaster:` |\n| :ship: `:ship:` | :speedboat: `:speedboat:` | :boat: `:boat:` |\n| :sailboat: `:sailboat:` | :rowboat: `:rowboat:` | :anchor: `:anchor:` |\n| :rocket: `:rocket:` | :airplane: `:airplane:` | :helicopter: `:helicopter:` |\n| :steam_locomotive: `:steam_locomotive:` | :tram: `:tram:` | :mountain_railway: `:mountain_railway:` |\n| :bike: `:bike:` | :aerial_tramway: `:aerial_tramway:` | :suspension_railway: `:suspension_railway:` |\n| :mountain_cableway: `:mountain_cableway:` | :tractor: `:tractor:` | :blue_car: `:blue_car:` |\n| :oncoming_automobile: `:oncoming_automobile:` | :car: `:car:` | :red_car: `:red_car:` |\n| :taxi: `:taxi:` | :oncoming_taxi: `:oncoming_taxi:` | :articulated_lorry: `:articulated_lorry:` |\n| :bus: `:bus:` | :oncoming_bus: `:oncoming_bus:` | :rotating_light: `:rotating_light:` |\n| :police_car: `:police_car:` | :oncoming_police_car: `:oncoming_police_car:` | :fire_engine: `:fire_engine:` |\n| :ambulance: `:ambulance:` | :minibus: `:minibus:` | :truck: `:truck:` |\n| :train: `:train:` | :station: `:station:` | :train2: `:train2:` |\n| :bullettrain_front: `:bullettrain_front:` | :bullettrain_side: `:bullettrain_side:` | :light_rail: `:light_rail:` |\n| :monorail: `:monorail:` | :railway_car: `:railway_car:` | :trolleybus: `:trolleybus:` |\n| :ticket: `:ticket:` | :fuelpump: `:fuelpump:` | :vertical_traffic_light: `:vertical_traffic_light:` |\n| :traffic_light: `:traffic_light:` | :warning: `:warning:` | :construction: `:construction:` |\n| :beginner: `:beginner:` | :atm: `:atm:` | :slot_machine: `:slot_machine:` |\n| :busstop: `:busstop:` | :barber: `:barber:` | :hotsprings: `:hotsprings:` |\n| :checkered_flag: `:checkered_flag:` | :crossed_flags: `:crossed_flags:` | :izakaya_lantern: `:izakaya_lantern:` |\n| :moyai: `:moyai:` | :circus_tent: `:circus_tent:` | :performing_arts: `:performing_arts:` |\n| :round_pushpin: `:round_pushpin:` | :triangular_flag_on_post: `:triangular_flag_on_post:` | :jp: `:jp:` |\n| :kr: `:kr:` | :cn: `:cn:` | :us: `:us:` |\n| :fr: `:fr:` | :es: `:es:` | :it: `:it:` |\n| :ru: `:ru:` | :gb: `:gb:` | :uk: `:uk:` |\n| :de: `:de:` |\n\nSymbols\n\n| :one: `:one:` | :two: `:two:` | :three: `:three:` |\n|---|---|---|\n| :four: `:four:` | :five: `:five:` | :six: `:six:` |\n| :seven: `:seven:` | :eight: `:eight:` | :nine: `:nine:` |\n| :keycap_ten: `:keycap_ten:` | :1234: `:1234:` | :zero: `:zero:` |\n| :hash: `:hash:` | :symbols: `:symbols:` | :arrow_backward: `:arrow_backward:` |\n| :arrow_down: `:arrow_down:` | :arrow_forward: `:arrow_forward:` | :arrow_left: `:arrow_left:` |\n| :capital_abcd: `:capital_abcd:` | :abcd: `:abcd:` | :abc: `:abc:` |\n| :arrow_lower_left: `:arrow_lower_left:` | :arrow_lower_right: `:arrow_lower_right:` | :arrow_right: `:arrow_right:` |\n| :arrow_up: `:arrow_up:` | :arrow_upper_left: `:arrow_upper_left:` | :arrow_upper_right: `:arrow_upper_right:` |\n| :arrow_double_down: `:arrow_double_down:` | :arrow_double_up: `:arrow_double_up:` | :arrow_down_small: `:arrow_down_small:` |\n| :arrow_heading_down: `:arrow_heading_down:` | :arrow_heading_up: `:arrow_heading_up:` | :leftwards_arrow_with_hook: `:leftwards_arrow_with_hook:` |\n| :arrow_right_hook: `:arrow_right_hook:` | :left_right_arrow: `:left_right_arrow:` | :arrow_up_down: `:arrow_up_down:` |\n| :arrow_up_small: `:arrow_up_small:` | :arrows_clockwise: `:arrows_clockwise:` | :arrows_counterclockwise: `:arrows_counterclockwise:` |\n| :rewind: `:rewind:` | :fast_forward: `:fast_forward:` | :information_source: `:information_source:` |\n| :ok: `:ok:` | :twisted_rightwards_arrows: `:twisted_rightwards_arrows:` | :repeat: `:repeat:` |\n| :repeat_one: `:repeat_one:` | :new: `:new:` | :top: `:top:` |\n| :up: `:up:` | :cool: `:cool:` | :free: `:free:` |\n| :ng: `:ng:` | :cinema: `:cinema:` | :koko: `:koko:` |\n| :signal_strength: `:signal_strength:` | :u5272: `:u5272:` | :u5408: `:u5408:` |\n| :u55b6: `:u55b6:` | :u6307: `:u6307:` | :u6708: `:u6708:` |\n| :u6709: `:u6709:` | :u6e80: `:u6e80:` | :u7121: `:u7121:` |\n| :u7533: `:u7533:` | :u7a7a: `:u7a7a:` | :u7981: `:u7981:` |\n| :sa: `:sa:` | :restroom: `:restroom:` | :mens: `:mens:` |\n| :womens: `:womens:` | :baby_symbol: `:baby_symbol:` | :no_smoking: `:no_smoking:` |\n| :parking: `:parking:` | :wheelchair: `:wheelchair:` | :metro: `:metro:` |\n| :baggage_claim: `:baggage_claim:` | :accept: `:accept:` | :wc: `:wc:` |\n| :potable_water: `:potable_water:` | :put_litter_in_its_place: `:put_litter_in_its_place:` | :secret: `:secret:` |\n| :congratulations: `:congratulations:` | :m: `:m:` | :passport_control: `:passport_control:` |\n| :left_luggage: `:left_luggage:` | :customs: `:customs:` | :ideograph_advantage: `:ideograph_advantage:` |\n| :cl: `:cl:` | :sos: `:sos:` | :id: `:id:` |\n| :no_entry_sign: `:no_entry_sign:` | :underage: `:underage:` | :no_mobile_phones: `:no_mobile_phones:` |\n| :do_not_litter: `:do_not_litter:` | :non-potable_water: `:non-potable_water:` | :no_bicycles: `:no_bicycles:` |\n| :no_pedestrians: `:no_pedestrians:` | :children_crossing: `:children_crossing:` | :no_entry: `:no_entry:` |\n| :eight_spoked_asterisk: `:eight_spoked_asterisk:` | :eight_pointed_black_star: `:eight_pointed_black_star:` | :heart_decoration: `:heart_decoration:` |\n| :vs: `:vs:` | :vibration_mode: `:vibration_mode:` | :mobile_phone_off: `:mobile_phone_off:` |\n| :chart: `:chart:` | :currency_exchange: `:currency_exchange:` | :aries: `:aries:` |\n| :taurus: `:taurus:` | :gemini: `:gemini:` | :cancer: `:cancer:` |\n| :leo: `:leo:` | :virgo: `:virgo:` | :libra: `:libra:` |\n| :scorpius: `:scorpius:` | :sagittarius: `:sagittarius:` | :capricorn: `:capricorn:` |\n| :aquarius: `:aquarius:` | :pisces: `:pisces:` | :ophiuchus: `:ophiuchus:` |\n| :six_pointed_star: `:six_pointed_star:` | :negative_squared_cross_mark: `:negative_squared_cross_mark:` | :a: `:a:` |\n| :b: `:b:` | :ab: `:ab:` | :o2: `:o2:` |\n| :diamond_shape_with_a_dot_inside: `:diamond_shape_with_a_dot_inside:` | :recycle: `:recycle:` | :end: `:end:` |\n| :on: `:on:` | :soon: `:soon:` | :clock1: `:clock1:` |\n| :clock130: `:clock130:` | :clock10: `:clock10:` | :clock1030: `:clock1030:` |\n| :clock11: `:clock11:` | :clock1130: `:clock1130:` | :clock12: `:clock12:` |\n| :clock1230: `:clock1230:` | :clock2: `:clock2:` | :clock230: `:clock230:` |\n| :clock3: `:clock3:` | :clock330: `:clock330:` | :clock4: `:clock4:` |\n| :clock430: `:clock430:` | :clock5: `:clock5:` | :clock530: `:clock530:` |\n| :clock6: `:clock6:` | :clock630: `:clock630:` | :clock7: `:clock7:` |\n| :clock730: `:clock730:` | :clock8: `:clock8:` | :clock830: `:clock830:` |\n| :clock9: `:clock9:` | :clock930: `:clock930:` | :heavy_dollar_sign: `:heavy_dollar_sign:` |\n| :copyright: `:copyright:` | :registered: `:registered:` | :tm: `:tm:` |\n| :x: `:x:` | :heavy_exclamation_mark: `:heavy_exclamation_mark:` | :bangbang: `:bangbang:` |\n| :interrobang: `:interrobang:` | :o: `:o:` | :heavy_multiplication_x: `:heavy_multiplication_x:` |\n| :heavy_plus_sign: `:heavy_plus_sign:` | :heavy_minus_sign: `:heavy_minus_sign:` | :heavy_division_sign: `:heavy_division_sign:` |\n| :white_flower: `:white_flower:` | :100: `:100:` | :heavy_check_mark: `:heavy_check_mark:` |\n| :ballot_box_with_check: `:ballot_box_with_check:` | :radio_button: `:radio_button:` | :link: `:link:` |\n| :curly_loop: `:curly_loop:` | :wavy_dash: `:wavy_dash:` | :part_alternation_mark: `:part_alternation_mark:` |\n| :trident: `:trident:` | :black_square: `:black_square:` | :white_square: `:white_square:` |\n| :white_check_mark: `:white_check_mark:` | :black_square_button: `:black_square_button:` | :white_square_button: `:white_square_button:` |\n| :black_circle: `:black_circle:` | :white_circle: `:white_circle:` | :red_circle: `:red_circle:` |\n| :large_blue_circle: `:large_blue_circle:` | :large_blue_diamond: `:large_blue_diamond:` | :large_orange_diamond: `:large_orange_diamond:` |\n| :small_blue_diamond: `:small_blue_diamond:` | :small_orange_diamond: `:small_orange_diamond:` | :small_red_triangle: `:small_red_triangle:` |\n| :small_red_triangle_down: `:small_red_triangle_down:` | :shipit: `:shipit:` |\n\n","slug":"emoji","published":1,"date":"2019-12-19T15:52:56.140Z","updated":"2019-12-19T15:52:56.140Z","_id":"ck4cwgni2000zckukir3mzpbd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>People<br>github中常用emoji集合<br><a id=\"more\"></a><br>| :bowtie: <code>:bowtie:</code> | :smile: <code>:smile:</code> | :laughing: <code>:laughing:</code> |<br>|—|—|—|<br>| :blush: <code>:blush:</code> | :smiley: <code>:smiley:</code> | :relaxed: <code>:relaxed:</code> |<br>| :smirk: <code>:smirk:</code> | :heart_eyes: <code>:heart_eyes:</code> | :kissing_heart: <code>:kissing_heart:</code> |<br>| :kissing_closed_eyes: <code>:kissing_closed_eyes:</code> | :flushed: <code>:flushed:</code> | :relieved: <code>:relieved:</code> |<br>| :satisfied: <code>:satisfied:</code> | :grin: <code>:grin:</code> | :wink: <code>:wink:</code> |<br>| :stuck_out_tongue_winking_eye: <code>:stuck_out_tongue_winking_eye:</code> | :stuck_out_tongue_closed_eyes: <code>:stuck_out_tongue_closed_eyes:</code> | :grinning: <code>:grinning:</code> |<br>| :kissing: <code>:kissing:</code> | :kissing_smiling_eyes: <code>:kissing_smiling_eyes:</code> | :stuck_out_tongue: <code>:stuck_out_tongue:</code> |<br>| :sleeping: <code>:sleeping:</code> | :worried: <code>:worried:</code> | :frowning: <code>:frowning:</code> |<br>| :anguished: <code>:anguished:</code> | :open_mouth: <code>:open_mouth:</code> | :grimacing: <code>:grimacing:</code> |<br>| :confused: <code>:confused:</code> | :hushed: <code>:hushed:</code> | :expressionless: <code>:expressionless:</code> |<br>| :unamused: <code>:unamused:</code> | :sweat_smile: <code>:sweat_smile:</code> | :sweat: <code>:sweat:</code> |<br>| :disappointed_relieved: <code>:disappointed_relieved:</code> | :weary: <code>:weary:</code> | :pensive: <code>:pensive:</code> |<br>| :disappointed: <code>:disappointed:</code> | :confounded: <code>:confounded:</code> | :fearful: <code>:fearful:</code> |<br>| :cold_sweat: <code>:cold_sweat:</code> | :persevere: <code>:persevere:</code> | :cry: <code>:cry:</code> |<br>| :sob: <code>:sob:</code> | :joy: <code>:joy:</code> | :astonished: <code>:astonished:</code> |<br>| :scream: <code>:scream:</code> | :neckbeard: <code>:neckbeard:</code> | :tired_face: <code>:tired_face:</code> |<br>| :angry: <code>:angry:</code> | :rage: <code>:rage:</code> | :triumph: <code>:triumph:</code> |<br>| :sleepy: <code>:sleepy:</code> | :yum: <code>:yum:</code> | :mask: <code>:mask:</code> |<br>| :sunglasses: <code>:sunglasses:</code> | :dizzy_face: <code>:dizzy_face:</code> | :imp: <code>:imp:</code> |<br>| :smiling_imp: <code>:smiling_imp:</code> | :neutral_face: <code>:neutral_face:</code> | :no_mouth: <code>:no_mouth:</code> |<br>| :innocent: <code>:innocent:</code> | :alien: <code>:alien:</code> | :yellow_heart: <code>:yellow_heart:</code> |<br>| :blue_heart: <code>:blue_heart:</code> | :purple_heart: <code>:purple_heart:</code> | :heart: <code>:heart:</code> |<br>| :green_heart: <code>:green_heart:</code> | :broken_heart: <code>:broken_heart:</code> | :heartbeat: <code>:heartbeat:</code> |<br>| :heartpulse: <code>:heartpulse:</code> | :two_hearts: <code>:two_hearts:</code> | :revolving_hearts: <code>:revolving_hearts:</code> |<br>| :cupid: <code>:cupid:</code> | :sparkling_heart: <code>:sparkling_heart:</code> | :sparkles: <code>:sparkles:</code> |<br>| :star: <code>:star:</code> | :star2: <code>:star2:</code> | :dizzy: <code>:dizzy:</code> |<br>| :boom: <code>:boom:</code> | :collision: <code>:collision:</code> | :anger: <code>:anger:</code> |<br>| :exclamation: <code>:exclamation:</code> | :question: <code>:question:</code> | :grey_exclamation: <code>:grey_exclamation:</code> |<br>| :grey_question: <code>:grey_question:</code> | :zzz: <code>:zzz:</code> | :dash: <code>:dash:</code> |<br>| :sweat_drops: <code>:sweat_drops:</code> | :notes: <code>:notes:</code> | :musical_note: <code>:musical_note:</code> |<br>| :fire: <code>:fire:</code> | :hankey: <code>:hankey:</code> | :poop: <code>:poop:</code> |<br>| :shit: <code>:shit:</code> | :+1: <code>:+1:</code> | :thumbsup: <code>:thumbsup:</code> |<br>| :-1: <code>:-1:</code> | :thumbsdown: <code>:thumbsdown:</code> | :ok_hand: <code>:ok_hand:</code> |<br>| :punch: <code>:punch:</code> | :facepunch: <code>:facepunch:</code> | :fist: <code>:fist:</code> |<br>| :v: <code>:v:</code> | :wave: <code>:wave:</code> | :hand: <code>:hand:</code> |<br>| :raised_hand: <code>:raised_hand:</code> | :open_hands: <code>:open_hands:</code> | :point_up: <code>:point_up:</code> |<br>| :point_down: <code>:point_down:</code> | :point_left: <code>:point_left:</code> | :point_right: <code>:point_right:</code> |<br>| :raised_hands: <code>:raised_hands:</code> | :pray: <code>:pray:</code> | :point_up_2: <code>:point_up_2:</code> |<br>| :clap: <code>:clap:</code> | :muscle: <code>:muscle:</code> | :metal: <code>:metal:</code> |<br>| :fu: <code>:fu:</code> | :walking: <code>:walking:</code> | :runner: <code>:runner:</code> |<br>| :running: <code>:running:</code> | :couple: <code>:couple:</code> | :family: <code>:family:</code> |<br>| :two_men_holding_hands: <code>:two_men_holding_hands:</code> | :two_women_holding_hands: <code>:two_women_holding_hands:</code> | :dancer: <code>:dancer:</code> |<br>| :dancers: <code>:dancers:</code> | :ok_woman: <code>:ok_woman:</code> | :no_good: <code>:no_good:</code> |<br>| :information_desk_person: <code>:information_desk_person:</code> | :raising_hand: <code>:raising_hand:</code> | :bride_with_veil: <code>:bride_with_veil:</code> |<br>| :person_with_pouting_face: <code>:person_with_pouting_face:</code> | :person_frowning: <code>:person_frowning:</code> | :bow: <code>:bow:</code> |<br>| :couplekiss: <code>:couplekiss:</code> | :couple_with_heart: <code>:couple_with_heart:</code> | :massage: <code>:massage:</code> |<br>| :haircut: <code>:haircut:</code> | :nail_care: <code>:nail_care:</code> | :boy: <code>:boy:</code> |<br>| :girl: <code>:girl:</code> | :woman: <code>:woman:</code> | :man: <code>:man:</code> |<br>| :baby: <code>:baby:</code> | :older_woman: <code>:older_woman:</code> | :older_man: <code>:older_man:</code> |<br>| :person_with_blond_hair: <code>:person_with_blond_hair:</code> | :man_with_gua_pi_mao: <code>:man_with_gua_pi_mao:</code> | :man_with_turban: <code>:man_with_turban:</code> |<br>| :construction_worker: <code>:construction_worker:</code> | :cop: <code>:cop:</code> | :angel: <code>:angel:</code> |<br>| :princess: <code>:princess:</code> | :smiley_cat: <code>:smiley_cat:</code> | :smile_cat: <code>:smile_cat:</code> |<br>| :heart_eyes_cat: <code>:heart_eyes_cat:</code> | :kissing_cat: <code>:kissing_cat:</code> | :smirk_cat: <code>:smirk_cat:</code> |<br>| :scream_cat: <code>:scream_cat:</code> | :crying_cat_face: <code>:crying_cat_face:</code> | :joy_cat: <code>:joy_cat:</code> |<br>| :pouting_cat: <code>:pouting_cat:</code> | :japanese_ogre: <code>:japanese_ogre:</code> | :japanese_goblin: <code>:japanese_goblin:</code> |<br>| :see_no_evil: <code>:see_no_evil:</code> | :hear_no_evil: <code>:hear_no_evil:</code> | :speak_no_evil: <code>:speak_no_evil:</code> |<br>| :guardsman: <code>:guardsman:</code> | :skull: <code>:skull:</code> | :feet: <code>:feet:</code> |<br>| :lips: <code>:lips:</code> | :kiss: <code>:kiss:</code> | :droplet: <code>:droplet:</code> |<br>| :ear: <code>:ear:</code> | :eyes: <code>:eyes:</code> | :nose: <code>:nose:</code> |<br>| :tongue: <code>:tongue:</code> | :love_letter: <code>:love_letter:</code> | :bust_in_silhouette: <code>:bust_in_silhouette:</code> |<br>| :busts_in_silhouette: <code>:busts_in_silhouette:</code> | :speech_balloon: <code>:speech_balloon:</code> | :thought_balloon: <code>:thought_balloon:</code> |<br>| :feelsgood: <code>:feelsgood:</code> | :finnadie: <code>:finnadie:</code> | :goberserk: <code>:goberserk:</code> |<br>| :godmode: <code>:godmode:</code> | :hurtrealbad: <code>:hurtrealbad:</code> | :rage1: <code>:rage1:</code> |<br>| :rage2: <code>:rage2:</code> | :rage3: <code>:rage3:</code> | :rage4: <code>:rage4:</code> |<br>| :suspect: <code>:suspect:</code> | :trollface: <code>:trollface:</code> | </p>\n<p>Nature</p>\n<table>\n<thead>\n<tr>\n<th>:sunny: <code>:sunny:</code></th>\n<th>:umbrella: <code>:umbrella:</code></th>\n<th>:cloud: <code>:cloud:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:snowflake: <code>:snowflake:</code></td>\n<td>:snowman: <code>:snowman:</code></td>\n<td>:zap: <code>:zap:</code></td>\n</tr>\n<tr>\n<td>:cyclone: <code>:cyclone:</code></td>\n<td>:foggy: <code>:foggy:</code></td>\n<td>:ocean: <code>:ocean:</code></td>\n</tr>\n<tr>\n<td>:cat: <code>:cat:</code></td>\n<td>:dog: <code>:dog:</code></td>\n<td>:mouse: <code>:mouse:</code></td>\n</tr>\n<tr>\n<td>:hamster: <code>:hamster:</code></td>\n<td>:rabbit: <code>:rabbit:</code></td>\n<td>:wolf: <code>:wolf:</code></td>\n</tr>\n<tr>\n<td>:frog: <code>:frog:</code></td>\n<td>:tiger: <code>:tiger:</code></td>\n<td>:koala: <code>:koala:</code></td>\n</tr>\n<tr>\n<td>:bear: <code>:bear:</code></td>\n<td>:pig: <code>:pig:</code></td>\n<td>:pig_nose: <code>:pig_nose:</code></td>\n</tr>\n<tr>\n<td>:cow: <code>:cow:</code></td>\n<td>:boar: <code>:boar:</code></td>\n<td>:monkey_face: <code>:monkey_face:</code></td>\n</tr>\n<tr>\n<td>:monkey: <code>:monkey:</code></td>\n<td>:horse: <code>:horse:</code></td>\n<td>:racehorse: <code>:racehorse:</code></td>\n</tr>\n<tr>\n<td>:camel: <code>:camel:</code></td>\n<td>:sheep: <code>:sheep:</code></td>\n<td>:elephant: <code>:elephant:</code></td>\n</tr>\n<tr>\n<td>:panda_face: <code>:panda_face:</code></td>\n<td>:snake: <code>:snake:</code></td>\n<td>:bird: <code>:bird:</code></td>\n</tr>\n<tr>\n<td>:baby_chick: <code>:baby_chick:</code></td>\n<td>:hatched_chick: <code>:hatched_chick:</code></td>\n<td>:hatching_chick: <code>:hatching_chick:</code></td>\n</tr>\n<tr>\n<td>:chicken: <code>:chicken:</code></td>\n<td>:penguin: <code>:penguin:</code></td>\n<td>:turtle: <code>:turtle:</code></td>\n</tr>\n<tr>\n<td>:bug: <code>:bug:</code></td>\n<td>:honeybee: <code>:honeybee:</code></td>\n<td>:ant: <code>:ant:</code></td>\n</tr>\n<tr>\n<td>:beetle: <code>:beetle:</code></td>\n<td>:snail: <code>:snail:</code></td>\n<td>:octopus: <code>:octopus:</code></td>\n</tr>\n<tr>\n<td>:tropical_fish: <code>:tropical_fish:</code></td>\n<td>:fish: <code>:fish:</code></td>\n<td>:whale: <code>:whale:</code></td>\n</tr>\n<tr>\n<td>:whale2: <code>:whale2:</code></td>\n<td>:dolphin: <code>:dolphin:</code></td>\n<td>:cow2: <code>:cow2:</code></td>\n</tr>\n<tr>\n<td>:ram: <code>:ram:</code></td>\n<td>:rat: <code>:rat:</code></td>\n<td>:water_buffalo: <code>:water_buffalo:</code></td>\n</tr>\n<tr>\n<td>:tiger2: <code>:tiger2:</code></td>\n<td>:rabbit2: <code>:rabbit2:</code></td>\n<td>:dragon: <code>:dragon:</code></td>\n</tr>\n<tr>\n<td>:goat: <code>:goat:</code></td>\n<td>:rooster: <code>:rooster:</code></td>\n<td>:dog2: <code>:dog2:</code></td>\n</tr>\n<tr>\n<td>:pig2: <code>:pig2:</code></td>\n<td>:mouse2: <code>:mouse2:</code></td>\n<td>:ox: <code>:ox:</code></td>\n</tr>\n<tr>\n<td>:dragon_face: <code>:dragon_face:</code></td>\n<td>:blowfish: <code>:blowfish:</code></td>\n<td>:crocodile: <code>:crocodile:</code></td>\n</tr>\n<tr>\n<td>:dromedary_camel: <code>:dromedary_camel:</code></td>\n<td>:leopard: <code>:leopard:</code></td>\n<td>:cat2: <code>:cat2:</code></td>\n</tr>\n<tr>\n<td>:poodle: <code>:poodle:</code></td>\n<td>:paw_prints: <code>:paw_prints:</code></td>\n<td>:bouquet: <code>:bouquet:</code></td>\n</tr>\n<tr>\n<td>:cherry_blossom: <code>:cherry_blossom:</code></td>\n<td>:tulip: <code>:tulip:</code></td>\n<td>:four_leaf_clover: <code>:four_leaf_clover:</code></td>\n</tr>\n<tr>\n<td>:rose: <code>:rose:</code></td>\n<td>:sunflower: <code>:sunflower:</code></td>\n<td>:hibiscus: <code>:hibiscus:</code></td>\n</tr>\n<tr>\n<td>:maple_leaf: <code>:maple_leaf:</code></td>\n<td>:leaves: <code>:leaves:</code></td>\n<td>:fallen_leaf: <code>:fallen_leaf:</code></td>\n</tr>\n<tr>\n<td>:herb: <code>:herb:</code></td>\n<td>:mushroom: <code>:mushroom:</code></td>\n<td>:cactus: <code>:cactus:</code></td>\n</tr>\n<tr>\n<td>:palm_tree: <code>:palm_tree:</code></td>\n<td>:evergreen_tree: <code>:evergreen_tree:</code></td>\n<td>:deciduous_tree: <code>:deciduous_tree:</code></td>\n</tr>\n<tr>\n<td>:chestnut: <code>:chestnut:</code></td>\n<td>:seedling: <code>:seedling:</code></td>\n<td>:blossom: <code>:blossom:</code></td>\n</tr>\n<tr>\n<td>:ear_of_rice: <code>:ear_of_rice:</code></td>\n<td>:shell: <code>:shell:</code></td>\n<td>:globe_with_meridians: <code>:globe_with_meridians:</code></td>\n</tr>\n<tr>\n<td>:sun_with_face: <code>:sun_with_face:</code></td>\n<td>:full_moon_with_face: <code>:full_moon_with_face:</code></td>\n<td>:new_moon_with_face: <code>:new_moon_with_face:</code></td>\n</tr>\n<tr>\n<td>:new_moon: <code>:new_moon:</code></td>\n<td>:waxing_crescent_moon: <code>:waxing_crescent_moon:</code></td>\n<td>:first_quarter_moon: <code>:first_quarter_moon:</code></td>\n</tr>\n<tr>\n<td>:waxing_gibbous_moon: <code>:waxing_gibbous_moon:</code></td>\n<td>:full_moon: <code>:full_moon:</code></td>\n<td>:waning_gibbous_moon: <code>:waning_gibbous_moon:</code></td>\n</tr>\n<tr>\n<td>:last_quarter_moon: <code>:last_quarter_moon:</code></td>\n<td>:waning_crescent_moon: <code>:waning_crescent_moon:</code></td>\n<td>:last_quarter_moon_with_face: <code>:last_quarter_moon_with_face:</code></td>\n</tr>\n<tr>\n<td>:first_quarter_moon_with_face: <code>:first_quarter_moon_with_face:</code></td>\n<td>:moon: <code>:moon:</code></td>\n<td>:earth_africa: <code>:earth_africa:</code></td>\n</tr>\n<tr>\n<td>:earth_americas: <code>:earth_americas:</code></td>\n<td>:earth_asia: <code>:earth_asia:</code></td>\n<td>:volcano: <code>:volcano:</code></td>\n</tr>\n<tr>\n<td>:milky_way: <code>:milky_way:</code></td>\n<td>:partly_sunny: <code>:partly_sunny:</code></td>\n<td>:octocat: <code>:octocat:</code></td>\n</tr>\n<tr>\n<td>:squirrel: <code>:squirrel:</code></td>\n</tr>\n</tbody>\n</table>\n<p>Objects</p>\n<table>\n<thead>\n<tr>\n<th>:bamboo: <code>:bamboo:</code></th>\n<th>:gift_heart: <code>:gift_heart:</code></th>\n<th>:dolls: <code>:dolls:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:school_satchel: <code>:school_satchel:</code></td>\n<td>:mortar_board: <code>:mortar_board:</code></td>\n<td>:flags: <code>:flags:</code></td>\n</tr>\n<tr>\n<td>:fireworks: <code>:fireworks:</code></td>\n<td>:sparkler: <code>:sparkler:</code></td>\n<td>:wind_chime: <code>:wind_chime:</code></td>\n</tr>\n<tr>\n<td>:rice_scene: <code>:rice_scene:</code></td>\n<td>:jack_o_lantern: <code>:jack_o_lantern:</code></td>\n<td>:ghost: <code>:ghost:</code></td>\n</tr>\n<tr>\n<td>:santa: <code>:santa:</code></td>\n<td>:christmas_tree: <code>:christmas_tree:</code></td>\n<td>:gift: <code>:gift:</code></td>\n</tr>\n<tr>\n<td>:bell: <code>:bell:</code></td>\n<td>:no_bell: <code>:no_bell:</code></td>\n<td>:tanabata_tree: <code>:tanabata_tree:</code></td>\n</tr>\n<tr>\n<td>:tada: <code>:tada:</code></td>\n<td>:confetti_ball: <code>:confetti_ball:</code></td>\n<td>:balloon: <code>:balloon:</code></td>\n</tr>\n<tr>\n<td>:crystal_ball: <code>:crystal_ball:</code></td>\n<td>:cd: <code>:cd:</code></td>\n<td>:dvd: <code>:dvd:</code></td>\n</tr>\n<tr>\n<td>:floppy_disk: <code>:floppy_disk:</code></td>\n<td>:camera: <code>:camera:</code></td>\n<td>:video_camera: <code>:video_camera:</code></td>\n</tr>\n<tr>\n<td>:movie_camera: <code>:movie_camera:</code></td>\n<td>:computer: <code>:computer:</code></td>\n<td>:tv: <code>:tv:</code></td>\n</tr>\n<tr>\n<td>:iphone: <code>:iphone:</code></td>\n<td>:phone: <code>:phone:</code></td>\n<td>:telephone: <code>:telephone:</code></td>\n</tr>\n<tr>\n<td>:telephone_receiver: <code>:telephone_receiver:</code></td>\n<td>:pager: <code>:pager:</code></td>\n<td>:fax: <code>:fax:</code></td>\n</tr>\n<tr>\n<td>:minidisc: <code>:minidisc:</code></td>\n<td>:vhs: <code>:vhs:</code></td>\n<td>:sound: <code>:sound:</code></td>\n</tr>\n<tr>\n<td>:speaker: <code>:speaker:</code></td>\n<td>:mute: <code>:mute:</code></td>\n<td>:loudspeaker: <code>:loudspeaker:</code></td>\n</tr>\n<tr>\n<td>:mega: <code>:mega:</code></td>\n<td>:hourglass: <code>:hourglass:</code></td>\n<td>:hourglass_flowing_sand: <code>:hourglass_flowing_sand:</code></td>\n</tr>\n<tr>\n<td>:alarm_clock: <code>:alarm_clock:</code></td>\n<td>:watch: <code>:watch:</code></td>\n<td>:radio: <code>:radio:</code></td>\n</tr>\n<tr>\n<td>:satellite: <code>:satellite:</code></td>\n<td>:loop: <code>:loop:</code></td>\n<td>:mag: <code>:mag:</code></td>\n</tr>\n<tr>\n<td>:mag_right: <code>:mag_right:</code></td>\n<td>:unlock: <code>:unlock:</code></td>\n<td>:lock: <code>:lock:</code></td>\n</tr>\n<tr>\n<td>:lock_with_ink_pen: <code>:lock_with_ink_pen:</code></td>\n<td>:closed_lock_with_key: <code>:closed_lock_with_key:</code></td>\n<td>:key: <code>:key:</code></td>\n</tr>\n<tr>\n<td>:bulb: <code>:bulb:</code></td>\n<td>:flashlight: <code>:flashlight:</code></td>\n<td>:high_brightness: <code>:high_brightness:</code></td>\n</tr>\n<tr>\n<td>:low_brightness: <code>:low_brightness:</code></td>\n<td>:electric_plug: <code>:electric_plug:</code></td>\n<td>:battery: <code>:battery:</code></td>\n</tr>\n<tr>\n<td>:calling: <code>:calling:</code></td>\n<td>:email: <code>:email:</code></td>\n<td>:mailbox: <code>:mailbox:</code></td>\n</tr>\n<tr>\n<td>:postbox: <code>:postbox:</code></td>\n<td>:bath: <code>:bath:</code></td>\n<td>:bathtub: <code>:bathtub:</code></td>\n</tr>\n<tr>\n<td>:shower: <code>:shower:</code></td>\n<td>:toilet: <code>:toilet:</code></td>\n<td>:wrench: <code>:wrench:</code></td>\n</tr>\n<tr>\n<td>:nut_and_bolt: <code>:nut_and_bolt:</code></td>\n<td>:hammer: <code>:hammer:</code></td>\n<td>:seat: <code>:seat:</code></td>\n</tr>\n<tr>\n<td>:moneybag: <code>:moneybag:</code></td>\n<td>:yen: <code>:yen:</code></td>\n<td>:dollar: <code>:dollar:</code></td>\n</tr>\n<tr>\n<td>:pound: <code>:pound:</code></td>\n<td>:euro: <code>:euro:</code></td>\n<td>:credit_card: <code>:credit_card:</code></td>\n</tr>\n<tr>\n<td>:money_with_wings: <code>:money_with_wings:</code></td>\n<td>:e-mail: <code>:e-mail:</code></td>\n<td>:inbox_tray: <code>:inbox_tray:</code></td>\n</tr>\n<tr>\n<td>:outbox_tray: <code>:outbox_tray:</code></td>\n<td>:envelope: <code>:envelope:</code></td>\n<td>:incoming_envelope: <code>:incoming_envelope:</code></td>\n</tr>\n<tr>\n<td>:postal_horn: <code>:postal_horn:</code></td>\n<td>:mailbox_closed: <code>:mailbox_closed:</code></td>\n<td>:mailbox_with_mail: <code>:mailbox_with_mail:</code></td>\n</tr>\n<tr>\n<td>:mailbox_with_no_mail: <code>:mailbox_with_no_mail:</code></td>\n<td>:door: <code>:door:</code></td>\n<td>:smoking: <code>:smoking:</code></td>\n</tr>\n<tr>\n<td>:bomb: <code>:bomb:</code></td>\n<td>:gun: <code>:gun:</code></td>\n<td>:hocho: <code>:hocho:</code></td>\n</tr>\n<tr>\n<td>:pill: <code>:pill:</code></td>\n<td>:syringe: <code>:syringe:</code></td>\n<td>:page_facing_up: <code>:page_facing_up:</code></td>\n</tr>\n<tr>\n<td>:page_with_curl: <code>:page_with_curl:</code></td>\n<td>:bookmark_tabs: <code>:bookmark_tabs:</code></td>\n<td>:bar_chart: <code>:bar_chart:</code></td>\n</tr>\n<tr>\n<td>:chart_with_upwards_trend: <code>:chart_with_upwards_trend:</code></td>\n<td>:chart_with_downwards_trend: <code>:chart_with_downwards_trend:</code></td>\n<td>:scroll: <code>:scroll:</code></td>\n</tr>\n<tr>\n<td>:clipboard: <code>:clipboard:</code></td>\n<td>:calendar: <code>:calendar:</code></td>\n<td>:date: <code>:date:</code></td>\n</tr>\n<tr>\n<td>:card_index: <code>:card_index:</code></td>\n<td>:file_folder: <code>:file_folder:</code></td>\n<td>:open_file_folder: <code>:open_file_folder:</code></td>\n</tr>\n<tr>\n<td>:scissors: <code>:scissors:</code></td>\n<td>:pushpin: <code>:pushpin:</code></td>\n<td>:paperclip: <code>:paperclip:</code></td>\n</tr>\n<tr>\n<td>:black_nib: <code>:black_nib:</code></td>\n<td>:pencil2: <code>:pencil2:</code></td>\n<td>:straight_ruler: <code>:straight_ruler:</code></td>\n</tr>\n<tr>\n<td>:triangular_ruler: <code>:triangular_ruler:</code></td>\n<td>:closed_book: <code>:closed_book:</code></td>\n<td>:green_book: <code>:green_book:</code></td>\n</tr>\n<tr>\n<td>:blue_book: <code>:blue_book:</code></td>\n<td>:orange_book: <code>:orange_book:</code></td>\n<td>:notebook: <code>:notebook:</code></td>\n</tr>\n<tr>\n<td>:notebook_with_decorative_cover: <code>:notebook_with_decorative_cover:</code></td>\n<td>:ledger: <code>:ledger:</code></td>\n<td>:books: <code>:books:</code></td>\n</tr>\n<tr>\n<td>:bookmark: <code>:bookmark:</code></td>\n<td>:name_badge: <code>:name_badge:</code></td>\n<td>:microscope: <code>:microscope:</code></td>\n</tr>\n<tr>\n<td>:telescope: <code>:telescope:</code></td>\n<td>:newspaper: <code>:newspaper:</code></td>\n<td>:football: <code>:football:</code></td>\n</tr>\n<tr>\n<td>:basketball: <code>:basketball:</code></td>\n<td>:soccer: <code>:soccer:</code></td>\n<td>:baseball: <code>:baseball:</code></td>\n</tr>\n<tr>\n<td>:tennis: <code>:tennis:</code></td>\n<td>:8ball: <code>:8ball:</code></td>\n<td>:rugby_football: <code>:rugby_football:</code></td>\n</tr>\n<tr>\n<td>:bowling: <code>:bowling:</code></td>\n<td>:golf: <code>:golf:</code></td>\n<td>:mountain_bicyclist: <code>:mountain_bicyclist:</code></td>\n</tr>\n<tr>\n<td>:bicyclist: <code>:bicyclist:</code></td>\n<td>:horse_racing: <code>:horse_racing:</code></td>\n<td>:snowboarder: <code>:snowboarder:</code></td>\n</tr>\n<tr>\n<td>:swimmer: <code>:swimmer:</code></td>\n<td>:surfer: <code>:surfer:</code></td>\n<td>:ski: <code>:ski:</code></td>\n</tr>\n<tr>\n<td>:spades: <code>:spades:</code></td>\n<td>:hearts: <code>:hearts:</code></td>\n<td>:clubs: <code>:clubs:</code></td>\n</tr>\n<tr>\n<td>:diamonds: <code>:diamonds:</code></td>\n<td>:gem: <code>:gem:</code></td>\n<td>:ring: <code>:ring:</code></td>\n</tr>\n<tr>\n<td>:trophy: <code>:trophy:</code></td>\n<td>:musical_score: <code>:musical_score:</code></td>\n<td>:musical_keyboard: <code>:musical_keyboard:</code></td>\n</tr>\n<tr>\n<td>:violin: <code>:violin:</code></td>\n<td>:space_invader: <code>:space_invader:</code></td>\n<td>:video_game: <code>:video_game:</code></td>\n</tr>\n<tr>\n<td>:black_joker: <code>:black_joker:</code></td>\n<td>:flower_playing_cards: <code>:flower_playing_cards:</code></td>\n<td>:game_die: <code>:game_die:</code></td>\n</tr>\n<tr>\n<td>:dart: <code>:dart:</code></td>\n<td>:mahjong: <code>:mahjong:</code></td>\n<td>:clapper: <code>:clapper:</code></td>\n</tr>\n<tr>\n<td>:memo: <code>:memo:</code></td>\n<td>:pencil: <code>:pencil:</code></td>\n<td>:book: <code>:book:</code></td>\n</tr>\n<tr>\n<td>:art: <code>:art:</code></td>\n<td>:microphone: <code>:microphone:</code></td>\n<td>:headphones: <code>:headphones:</code></td>\n</tr>\n<tr>\n<td>:trumpet: <code>:trumpet:</code></td>\n<td>:saxophone: <code>:saxophone:</code></td>\n<td>:guitar: <code>:guitar:</code></td>\n</tr>\n<tr>\n<td>:shoe: <code>:shoe:</code></td>\n<td>:sandal: <code>:sandal:</code></td>\n<td>:high_heel: <code>:high_heel:</code></td>\n</tr>\n<tr>\n<td>:lipstick: <code>:lipstick:</code></td>\n<td>:boot: <code>:boot:</code></td>\n<td>:shirt: <code>:shirt:</code></td>\n</tr>\n<tr>\n<td>:tshirt: <code>:tshirt:</code></td>\n<td>:necktie: <code>:necktie:</code></td>\n<td>:womans_clothes: <code>:womans_clothes:</code></td>\n</tr>\n<tr>\n<td>:dress: <code>:dress:</code></td>\n<td>:running_shirt_with_sash: <code>:running_shirt_with_sash:</code></td>\n<td>:jeans: <code>:jeans:</code></td>\n</tr>\n<tr>\n<td>:kimono: <code>:kimono:</code></td>\n<td>:bikini: <code>:bikini:</code></td>\n<td>:ribbon: <code>:ribbon:</code></td>\n</tr>\n<tr>\n<td>:tophat: <code>:tophat:</code></td>\n<td>:crown: <code>:crown:</code></td>\n<td>:womans_hat: <code>:womans_hat:</code></td>\n</tr>\n<tr>\n<td>:mans_shoe: <code>:mans_shoe:</code></td>\n<td>:closed_umbrella: <code>:closed_umbrella:</code></td>\n<td>:briefcase: <code>:briefcase:</code></td>\n</tr>\n<tr>\n<td>:handbag: <code>:handbag:</code></td>\n<td>:pouch: <code>:pouch:</code></td>\n<td>:purse: <code>:purse:</code></td>\n</tr>\n<tr>\n<td>:eyeglasses: <code>:eyeglasses:</code></td>\n<td>:fishing_pole_and_fish: <code>:fishing_pole_and_fish:</code></td>\n<td>:coffee: <code>:coffee:</code></td>\n</tr>\n<tr>\n<td>:tea: <code>:tea:</code></td>\n<td>:sake: <code>:sake:</code></td>\n<td>:baby_bottle: <code>:baby_bottle:</code></td>\n</tr>\n<tr>\n<td>:beer: <code>:beer:</code></td>\n<td>:beers: <code>:beers:</code></td>\n<td>:cocktail: <code>:cocktail:</code></td>\n</tr>\n<tr>\n<td>:tropical_drink: <code>:tropical_drink:</code></td>\n<td>:wine_glass: <code>:wine_glass:</code></td>\n<td>:fork_and_knife: <code>:fork_and_knife:</code></td>\n</tr>\n<tr>\n<td>:pizza: <code>:pizza:</code></td>\n<td>:hamburger: <code>:hamburger:</code></td>\n<td>:fries: <code>:fries:</code></td>\n</tr>\n<tr>\n<td>:poultry_leg: <code>:poultry_leg:</code></td>\n<td>:meat_on_bone: <code>:meat_on_bone:</code></td>\n<td>:spaghetti: <code>:spaghetti:</code></td>\n</tr>\n<tr>\n<td>:curry: <code>:curry:</code></td>\n<td>:fried_shrimp: <code>:fried_shrimp:</code></td>\n<td>:bento: <code>:bento:</code></td>\n</tr>\n<tr>\n<td>:sushi: <code>:sushi:</code></td>\n<td>:fish_cake: <code>:fish_cake:</code></td>\n<td>:rice_ball: <code>:rice_ball:</code></td>\n</tr>\n<tr>\n<td>:rice_cracker: <code>:rice_cracker:</code></td>\n<td>:rice: <code>:rice:</code></td>\n<td>:ramen: <code>:ramen:</code></td>\n</tr>\n<tr>\n<td>:stew: <code>:stew:</code></td>\n<td>:oden: <code>:oden:</code></td>\n<td>:dango: <code>:dango:</code></td>\n</tr>\n<tr>\n<td>:egg: <code>:egg:</code></td>\n<td>:bread: <code>:bread:</code></td>\n<td>:doughnut: <code>:doughnut:</code></td>\n</tr>\n<tr>\n<td>:custard: <code>:custard:</code></td>\n<td>:icecream: <code>:icecream:</code></td>\n<td>:ice_cream: <code>:ice_cream:</code></td>\n</tr>\n<tr>\n<td>:shaved_ice: <code>:shaved_ice:</code></td>\n<td>:birthday: <code>:birthday:</code></td>\n<td>:cake: <code>:cake:</code></td>\n</tr>\n<tr>\n<td>:cookie: <code>:cookie:</code></td>\n<td>:chocolate_bar: <code>:chocolate_bar:</code></td>\n<td>:candy: <code>:candy:</code></td>\n</tr>\n<tr>\n<td>:lollipop: <code>:lollipop:</code></td>\n<td>:honey_pot: <code>:honey_pot:</code></td>\n<td>:apple: <code>:apple:</code></td>\n</tr>\n<tr>\n<td>:green_apple: <code>:green_apple:</code></td>\n<td>:tangerine: <code>:tangerine:</code></td>\n<td>:lemon: <code>:lemon:</code></td>\n</tr>\n<tr>\n<td>:cherries: <code>:cherries:</code></td>\n<td>:grapes: <code>:grapes:</code></td>\n<td>:watermelon: <code>:watermelon:</code></td>\n</tr>\n<tr>\n<td>:strawberry: <code>:strawberry:</code></td>\n<td>:peach: <code>:peach:</code></td>\n<td>:melon: <code>:melon:</code></td>\n</tr>\n<tr>\n<td>:banana: <code>:banana:</code></td>\n<td>:pear: <code>:pear:</code></td>\n<td>:pineapple: <code>:pineapple:</code></td>\n</tr>\n<tr>\n<td>:sweet_potato: <code>:sweet_potato:</code></td>\n<td>:eggplant: <code>:eggplant:</code></td>\n<td>:tomato: <code>:tomato:</code></td>\n</tr>\n<tr>\n<td>:corn: <code>:corn:</code></td>\n</tr>\n</tbody>\n</table>\n<p>Places</p>\n<table>\n<thead>\n<tr>\n<th>:house: <code>:house:</code></th>\n<th>:house_with_garden: <code>:house_with_garden:</code></th>\n<th>:school: <code>:school:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:office: <code>:office:</code></td>\n<td>:post_office: <code>:post_office:</code></td>\n<td>:hospital: <code>:hospital:</code></td>\n</tr>\n<tr>\n<td>:bank: <code>:bank:</code></td>\n<td>:convenience_store: <code>:convenience_store:</code></td>\n<td>:love_hotel: <code>:love_hotel:</code></td>\n</tr>\n<tr>\n<td>:hotel: <code>:hotel:</code></td>\n<td>:wedding: <code>:wedding:</code></td>\n<td>:church: <code>:church:</code></td>\n</tr>\n<tr>\n<td>:department_store: <code>:department_store:</code></td>\n<td>:european_post_office: <code>:european_post_office:</code></td>\n<td>:city_sunrise: <code>:city_sunrise:</code></td>\n</tr>\n<tr>\n<td>:city_sunset: <code>:city_sunset:</code></td>\n<td>:japanese_castle: <code>:japanese_castle:</code></td>\n<td>:european_castle: <code>:european_castle:</code></td>\n</tr>\n<tr>\n<td>:tent: <code>:tent:</code></td>\n<td>:factory: <code>:factory:</code></td>\n<td>:tokyo_tower: <code>:tokyo_tower:</code></td>\n</tr>\n<tr>\n<td>:japan: <code>:japan:</code></td>\n<td>:mount_fuji: <code>:mount_fuji:</code></td>\n<td>:sunrise_over_mountains: <code>:sunrise_over_mountains:</code></td>\n</tr>\n<tr>\n<td>:sunrise: <code>:sunrise:</code></td>\n<td>:stars: <code>:stars:</code></td>\n<td>:statue_of_liberty: <code>:statue_of_liberty:</code></td>\n</tr>\n<tr>\n<td>:bridge_at_night: <code>:bridge_at_night:</code></td>\n<td>:carousel_horse: <code>:carousel_horse:</code></td>\n<td>:rainbow: <code>:rainbow:</code></td>\n</tr>\n<tr>\n<td>:ferris_wheel: <code>:ferris_wheel:</code></td>\n<td>:fountain: <code>:fountain:</code></td>\n<td>:roller_coaster: <code>:roller_coaster:</code></td>\n</tr>\n<tr>\n<td>:ship: <code>:ship:</code></td>\n<td>:speedboat: <code>:speedboat:</code></td>\n<td>:boat: <code>:boat:</code></td>\n</tr>\n<tr>\n<td>:sailboat: <code>:sailboat:</code></td>\n<td>:rowboat: <code>:rowboat:</code></td>\n<td>:anchor: <code>:anchor:</code></td>\n</tr>\n<tr>\n<td>:rocket: <code>:rocket:</code></td>\n<td>:airplane: <code>:airplane:</code></td>\n<td>:helicopter: <code>:helicopter:</code></td>\n</tr>\n<tr>\n<td>:steam_locomotive: <code>:steam_locomotive:</code></td>\n<td>:tram: <code>:tram:</code></td>\n<td>:mountain_railway: <code>:mountain_railway:</code></td>\n</tr>\n<tr>\n<td>:bike: <code>:bike:</code></td>\n<td>:aerial_tramway: <code>:aerial_tramway:</code></td>\n<td>:suspension_railway: <code>:suspension_railway:</code></td>\n</tr>\n<tr>\n<td>:mountain_cableway: <code>:mountain_cableway:</code></td>\n<td>:tractor: <code>:tractor:</code></td>\n<td>:blue_car: <code>:blue_car:</code></td>\n</tr>\n<tr>\n<td>:oncoming_automobile: <code>:oncoming_automobile:</code></td>\n<td>:car: <code>:car:</code></td>\n<td>:red_car: <code>:red_car:</code></td>\n</tr>\n<tr>\n<td>:taxi: <code>:taxi:</code></td>\n<td>:oncoming_taxi: <code>:oncoming_taxi:</code></td>\n<td>:articulated_lorry: <code>:articulated_lorry:</code></td>\n</tr>\n<tr>\n<td>:bus: <code>:bus:</code></td>\n<td>:oncoming_bus: <code>:oncoming_bus:</code></td>\n<td>:rotating_light: <code>:rotating_light:</code></td>\n</tr>\n<tr>\n<td>:police_car: <code>:police_car:</code></td>\n<td>:oncoming_police_car: <code>:oncoming_police_car:</code></td>\n<td>:fire_engine: <code>:fire_engine:</code></td>\n</tr>\n<tr>\n<td>:ambulance: <code>:ambulance:</code></td>\n<td>:minibus: <code>:minibus:</code></td>\n<td>:truck: <code>:truck:</code></td>\n</tr>\n<tr>\n<td>:train: <code>:train:</code></td>\n<td>:station: <code>:station:</code></td>\n<td>:train2: <code>:train2:</code></td>\n</tr>\n<tr>\n<td>:bullettrain_front: <code>:bullettrain_front:</code></td>\n<td>:bullettrain_side: <code>:bullettrain_side:</code></td>\n<td>:light_rail: <code>:light_rail:</code></td>\n</tr>\n<tr>\n<td>:monorail: <code>:monorail:</code></td>\n<td>:railway_car: <code>:railway_car:</code></td>\n<td>:trolleybus: <code>:trolleybus:</code></td>\n</tr>\n<tr>\n<td>:ticket: <code>:ticket:</code></td>\n<td>:fuelpump: <code>:fuelpump:</code></td>\n<td>:vertical_traffic_light: <code>:vertical_traffic_light:</code></td>\n</tr>\n<tr>\n<td>:traffic_light: <code>:traffic_light:</code></td>\n<td>:warning: <code>:warning:</code></td>\n<td>:construction: <code>:construction:</code></td>\n</tr>\n<tr>\n<td>:beginner: <code>:beginner:</code></td>\n<td>:atm: <code>:atm:</code></td>\n<td>:slot_machine: <code>:slot_machine:</code></td>\n</tr>\n<tr>\n<td>:busstop: <code>:busstop:</code></td>\n<td>:barber: <code>:barber:</code></td>\n<td>:hotsprings: <code>:hotsprings:</code></td>\n</tr>\n<tr>\n<td>:checkered_flag: <code>:checkered_flag:</code></td>\n<td>:crossed_flags: <code>:crossed_flags:</code></td>\n<td>:izakaya_lantern: <code>:izakaya_lantern:</code></td>\n</tr>\n<tr>\n<td>:moyai: <code>:moyai:</code></td>\n<td>:circus_tent: <code>:circus_tent:</code></td>\n<td>:performing_arts: <code>:performing_arts:</code></td>\n</tr>\n<tr>\n<td>:round_pushpin: <code>:round_pushpin:</code></td>\n<td>:triangular_flag_on_post: <code>:triangular_flag_on_post:</code></td>\n<td>:jp: <code>:jp:</code></td>\n</tr>\n<tr>\n<td>:kr: <code>:kr:</code></td>\n<td>:cn: <code>:cn:</code></td>\n<td>:us: <code>:us:</code></td>\n</tr>\n<tr>\n<td>:fr: <code>:fr:</code></td>\n<td>:es: <code>:es:</code></td>\n<td>:it: <code>:it:</code></td>\n</tr>\n<tr>\n<td>:ru: <code>:ru:</code></td>\n<td>:gb: <code>:gb:</code></td>\n<td>:uk: <code>:uk:</code></td>\n</tr>\n<tr>\n<td>:de: <code>:de:</code></td>\n</tr>\n</tbody>\n</table>\n<p>Symbols</p>\n<table>\n<thead>\n<tr>\n<th>:one: <code>:one:</code></th>\n<th>:two: <code>:two:</code></th>\n<th>:three: <code>:three:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:four: <code>:four:</code></td>\n<td>:five: <code>:five:</code></td>\n<td>:six: <code>:six:</code></td>\n</tr>\n<tr>\n<td>:seven: <code>:seven:</code></td>\n<td>:eight: <code>:eight:</code></td>\n<td>:nine: <code>:nine:</code></td>\n</tr>\n<tr>\n<td>:keycap_ten: <code>:keycap_ten:</code></td>\n<td>:1234: <code>:1234:</code></td>\n<td>:zero: <code>:zero:</code></td>\n</tr>\n<tr>\n<td>:hash: <code>:hash:</code></td>\n<td>:symbols: <code>:symbols:</code></td>\n<td>:arrow_backward: <code>:arrow_backward:</code></td>\n</tr>\n<tr>\n<td>:arrow_down: <code>:arrow_down:</code></td>\n<td>:arrow_forward: <code>:arrow_forward:</code></td>\n<td>:arrow_left: <code>:arrow_left:</code></td>\n</tr>\n<tr>\n<td>:capital_abcd: <code>:capital_abcd:</code></td>\n<td>:abcd: <code>:abcd:</code></td>\n<td>:abc: <code>:abc:</code></td>\n</tr>\n<tr>\n<td>:arrow_lower_left: <code>:arrow_lower_left:</code></td>\n<td>:arrow_lower_right: <code>:arrow_lower_right:</code></td>\n<td>:arrow_right: <code>:arrow_right:</code></td>\n</tr>\n<tr>\n<td>:arrow_up: <code>:arrow_up:</code></td>\n<td>:arrow_upper_left: <code>:arrow_upper_left:</code></td>\n<td>:arrow_upper_right: <code>:arrow_upper_right:</code></td>\n</tr>\n<tr>\n<td>:arrow_double_down: <code>:arrow_double_down:</code></td>\n<td>:arrow_double_up: <code>:arrow_double_up:</code></td>\n<td>:arrow_down_small: <code>:arrow_down_small:</code></td>\n</tr>\n<tr>\n<td>:arrow_heading_down: <code>:arrow_heading_down:</code></td>\n<td>:arrow_heading_up: <code>:arrow_heading_up:</code></td>\n<td>:leftwards_arrow_with_hook: <code>:leftwards_arrow_with_hook:</code></td>\n</tr>\n<tr>\n<td>:arrow_right_hook: <code>:arrow_right_hook:</code></td>\n<td>:left_right_arrow: <code>:left_right_arrow:</code></td>\n<td>:arrow_up_down: <code>:arrow_up_down:</code></td>\n</tr>\n<tr>\n<td>:arrow_up_small: <code>:arrow_up_small:</code></td>\n<td>:arrows_clockwise: <code>:arrows_clockwise:</code></td>\n<td>:arrows_counterclockwise: <code>:arrows_counterclockwise:</code></td>\n</tr>\n<tr>\n<td>:rewind: <code>:rewind:</code></td>\n<td>:fast_forward: <code>:fast_forward:</code></td>\n<td>:information_source: <code>:information_source:</code></td>\n</tr>\n<tr>\n<td>:ok: <code>:ok:</code></td>\n<td>:twisted_rightwards_arrows: <code>:twisted_rightwards_arrows:</code></td>\n<td>:repeat: <code>:repeat:</code></td>\n</tr>\n<tr>\n<td>:repeat_one: <code>:repeat_one:</code></td>\n<td>:new: <code>:new:</code></td>\n<td>:top: <code>:top:</code></td>\n</tr>\n<tr>\n<td>:up: <code>:up:</code></td>\n<td>:cool: <code>:cool:</code></td>\n<td>:free: <code>:free:</code></td>\n</tr>\n<tr>\n<td>:ng: <code>:ng:</code></td>\n<td>:cinema: <code>:cinema:</code></td>\n<td>:koko: <code>:koko:</code></td>\n</tr>\n<tr>\n<td>:signal_strength: <code>:signal_strength:</code></td>\n<td>:u5272: <code>:u5272:</code></td>\n<td>:u5408: <code>:u5408:</code></td>\n</tr>\n<tr>\n<td>:u55b6: <code>:u55b6:</code></td>\n<td>:u6307: <code>:u6307:</code></td>\n<td>:u6708: <code>:u6708:</code></td>\n</tr>\n<tr>\n<td>:u6709: <code>:u6709:</code></td>\n<td>:u6e80: <code>:u6e80:</code></td>\n<td>:u7121: <code>:u7121:</code></td>\n</tr>\n<tr>\n<td>:u7533: <code>:u7533:</code></td>\n<td>:u7a7a: <code>:u7a7a:</code></td>\n<td>:u7981: <code>:u7981:</code></td>\n</tr>\n<tr>\n<td>:sa: <code>:sa:</code></td>\n<td>:restroom: <code>:restroom:</code></td>\n<td>:mens: <code>:mens:</code></td>\n</tr>\n<tr>\n<td>:womens: <code>:womens:</code></td>\n<td>:baby_symbol: <code>:baby_symbol:</code></td>\n<td>:no_smoking: <code>:no_smoking:</code></td>\n</tr>\n<tr>\n<td>:parking: <code>:parking:</code></td>\n<td>:wheelchair: <code>:wheelchair:</code></td>\n<td>:metro: <code>:metro:</code></td>\n</tr>\n<tr>\n<td>:baggage_claim: <code>:baggage_claim:</code></td>\n<td>:accept: <code>:accept:</code></td>\n<td>:wc: <code>:wc:</code></td>\n</tr>\n<tr>\n<td>:potable_water: <code>:potable_water:</code></td>\n<td>:put_litter_in_its_place: <code>:put_litter_in_its_place:</code></td>\n<td>:secret: <code>:secret:</code></td>\n</tr>\n<tr>\n<td>:congratulations: <code>:congratulations:</code></td>\n<td>:m: <code>:m:</code></td>\n<td>:passport_control: <code>:passport_control:</code></td>\n</tr>\n<tr>\n<td>:left_luggage: <code>:left_luggage:</code></td>\n<td>:customs: <code>:customs:</code></td>\n<td>:ideograph_advantage: <code>:ideograph_advantage:</code></td>\n</tr>\n<tr>\n<td>:cl: <code>:cl:</code></td>\n<td>:sos: <code>:sos:</code></td>\n<td>:id: <code>:id:</code></td>\n</tr>\n<tr>\n<td>:no_entry_sign: <code>:no_entry_sign:</code></td>\n<td>:underage: <code>:underage:</code></td>\n<td>:no_mobile_phones: <code>:no_mobile_phones:</code></td>\n</tr>\n<tr>\n<td>:do_not_litter: <code>:do_not_litter:</code></td>\n<td>:non-potable_water: <code>:non-potable_water:</code></td>\n<td>:no_bicycles: <code>:no_bicycles:</code></td>\n</tr>\n<tr>\n<td>:no_pedestrians: <code>:no_pedestrians:</code></td>\n<td>:children_crossing: <code>:children_crossing:</code></td>\n<td>:no_entry: <code>:no_entry:</code></td>\n</tr>\n<tr>\n<td>:eight_spoked_asterisk: <code>:eight_spoked_asterisk:</code></td>\n<td>:eight_pointed_black_star: <code>:eight_pointed_black_star:</code></td>\n<td>:heart_decoration: <code>:heart_decoration:</code></td>\n</tr>\n<tr>\n<td>:vs: <code>:vs:</code></td>\n<td>:vibration_mode: <code>:vibration_mode:</code></td>\n<td>:mobile_phone_off: <code>:mobile_phone_off:</code></td>\n</tr>\n<tr>\n<td>:chart: <code>:chart:</code></td>\n<td>:currency_exchange: <code>:currency_exchange:</code></td>\n<td>:aries: <code>:aries:</code></td>\n</tr>\n<tr>\n<td>:taurus: <code>:taurus:</code></td>\n<td>:gemini: <code>:gemini:</code></td>\n<td>:cancer: <code>:cancer:</code></td>\n</tr>\n<tr>\n<td>:leo: <code>:leo:</code></td>\n<td>:virgo: <code>:virgo:</code></td>\n<td>:libra: <code>:libra:</code></td>\n</tr>\n<tr>\n<td>:scorpius: <code>:scorpius:</code></td>\n<td>:sagittarius: <code>:sagittarius:</code></td>\n<td>:capricorn: <code>:capricorn:</code></td>\n</tr>\n<tr>\n<td>:aquarius: <code>:aquarius:</code></td>\n<td>:pisces: <code>:pisces:</code></td>\n<td>:ophiuchus: <code>:ophiuchus:</code></td>\n</tr>\n<tr>\n<td>:six_pointed_star: <code>:six_pointed_star:</code></td>\n<td>:negative_squared_cross_mark: <code>:negative_squared_cross_mark:</code></td>\n<td>:a: <code>:a:</code></td>\n</tr>\n<tr>\n<td>:b: <code>:b:</code></td>\n<td>:ab: <code>:ab:</code></td>\n<td>:o2: <code>:o2:</code></td>\n</tr>\n<tr>\n<td>:diamond_shape_with_a_dot_inside: <code>:diamond_shape_with_a_dot_inside:</code></td>\n<td>:recycle: <code>:recycle:</code></td>\n<td>:end: <code>:end:</code></td>\n</tr>\n<tr>\n<td>:on: <code>:on:</code></td>\n<td>:soon: <code>:soon:</code></td>\n<td>:clock1: <code>:clock1:</code></td>\n</tr>\n<tr>\n<td>:clock130: <code>:clock130:</code></td>\n<td>:clock10: <code>:clock10:</code></td>\n<td>:clock1030: <code>:clock1030:</code></td>\n</tr>\n<tr>\n<td>:clock11: <code>:clock11:</code></td>\n<td>:clock1130: <code>:clock1130:</code></td>\n<td>:clock12: <code>:clock12:</code></td>\n</tr>\n<tr>\n<td>:clock1230: <code>:clock1230:</code></td>\n<td>:clock2: <code>:clock2:</code></td>\n<td>:clock230: <code>:clock230:</code></td>\n</tr>\n<tr>\n<td>:clock3: <code>:clock3:</code></td>\n<td>:clock330: <code>:clock330:</code></td>\n<td>:clock4: <code>:clock4:</code></td>\n</tr>\n<tr>\n<td>:clock430: <code>:clock430:</code></td>\n<td>:clock5: <code>:clock5:</code></td>\n<td>:clock530: <code>:clock530:</code></td>\n</tr>\n<tr>\n<td>:clock6: <code>:clock6:</code></td>\n<td>:clock630: <code>:clock630:</code></td>\n<td>:clock7: <code>:clock7:</code></td>\n</tr>\n<tr>\n<td>:clock730: <code>:clock730:</code></td>\n<td>:clock8: <code>:clock8:</code></td>\n<td>:clock830: <code>:clock830:</code></td>\n</tr>\n<tr>\n<td>:clock9: <code>:clock9:</code></td>\n<td>:clock930: <code>:clock930:</code></td>\n<td>:heavy_dollar_sign: <code>:heavy_dollar_sign:</code></td>\n</tr>\n<tr>\n<td>:copyright: <code>:copyright:</code></td>\n<td>:registered: <code>:registered:</code></td>\n<td>:tm: <code>:tm:</code></td>\n</tr>\n<tr>\n<td>:x: <code>:x:</code></td>\n<td>:heavy_exclamation_mark: <code>:heavy_exclamation_mark:</code></td>\n<td>:bangbang: <code>:bangbang:</code></td>\n</tr>\n<tr>\n<td>:interrobang: <code>:interrobang:</code></td>\n<td>:o: <code>:o:</code></td>\n<td>:heavy_multiplication_x: <code>:heavy_multiplication_x:</code></td>\n</tr>\n<tr>\n<td>:heavy_plus_sign: <code>:heavy_plus_sign:</code></td>\n<td>:heavy_minus_sign: <code>:heavy_minus_sign:</code></td>\n<td>:heavy_division_sign: <code>:heavy_division_sign:</code></td>\n</tr>\n<tr>\n<td>:white_flower: <code>:white_flower:</code></td>\n<td>:100: <code>:100:</code></td>\n<td>:heavy_check_mark: <code>:heavy_check_mark:</code></td>\n</tr>\n<tr>\n<td>:ballot_box_with_check: <code>:ballot_box_with_check:</code></td>\n<td>:radio_button: <code>:radio_button:</code></td>\n<td>:link: <code>:link:</code></td>\n</tr>\n<tr>\n<td>:curly_loop: <code>:curly_loop:</code></td>\n<td>:wavy_dash: <code>:wavy_dash:</code></td>\n<td>:part_alternation_mark: <code>:part_alternation_mark:</code></td>\n</tr>\n<tr>\n<td>:trident: <code>:trident:</code></td>\n<td>:black_square: <code>:black_square:</code></td>\n<td>:white_square: <code>:white_square:</code></td>\n</tr>\n<tr>\n<td>:white_check_mark: <code>:white_check_mark:</code></td>\n<td>:black_square_button: <code>:black_square_button:</code></td>\n<td>:white_square_button: <code>:white_square_button:</code></td>\n</tr>\n<tr>\n<td>:black_circle: <code>:black_circle:</code></td>\n<td>:white_circle: <code>:white_circle:</code></td>\n<td>:red_circle: <code>:red_circle:</code></td>\n</tr>\n<tr>\n<td>:large_blue_circle: <code>:large_blue_circle:</code></td>\n<td>:large_blue_diamond: <code>:large_blue_diamond:</code></td>\n<td>:large_orange_diamond: <code>:large_orange_diamond:</code></td>\n</tr>\n<tr>\n<td>:small_blue_diamond: <code>:small_blue_diamond:</code></td>\n<td>:small_orange_diamond: <code>:small_orange_diamond:</code></td>\n<td>:small_red_triangle: <code>:small_red_triangle:</code></td>\n</tr>\n<tr>\n<td>:small_red_triangle_down: <code>:small_red_triangle_down:</code></td>\n<td>:shipit: <code>:shipit:</code></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>People<br>github中常用emoji集合<br>","more":"<br>| :bowtie: <code>:bowtie:</code> | :smile: <code>:smile:</code> | :laughing: <code>:laughing:</code> |<br>|—|—|—|<br>| :blush: <code>:blush:</code> | :smiley: <code>:smiley:</code> | :relaxed: <code>:relaxed:</code> |<br>| :smirk: <code>:smirk:</code> | :heart_eyes: <code>:heart_eyes:</code> | :kissing_heart: <code>:kissing_heart:</code> |<br>| :kissing_closed_eyes: <code>:kissing_closed_eyes:</code> | :flushed: <code>:flushed:</code> | :relieved: <code>:relieved:</code> |<br>| :satisfied: <code>:satisfied:</code> | :grin: <code>:grin:</code> | :wink: <code>:wink:</code> |<br>| :stuck_out_tongue_winking_eye: <code>:stuck_out_tongue_winking_eye:</code> | :stuck_out_tongue_closed_eyes: <code>:stuck_out_tongue_closed_eyes:</code> | :grinning: <code>:grinning:</code> |<br>| :kissing: <code>:kissing:</code> | :kissing_smiling_eyes: <code>:kissing_smiling_eyes:</code> | :stuck_out_tongue: <code>:stuck_out_tongue:</code> |<br>| :sleeping: <code>:sleeping:</code> | :worried: <code>:worried:</code> | :frowning: <code>:frowning:</code> |<br>| :anguished: <code>:anguished:</code> | :open_mouth: <code>:open_mouth:</code> | :grimacing: <code>:grimacing:</code> |<br>| :confused: <code>:confused:</code> | :hushed: <code>:hushed:</code> | :expressionless: <code>:expressionless:</code> |<br>| :unamused: <code>:unamused:</code> | :sweat_smile: <code>:sweat_smile:</code> | :sweat: <code>:sweat:</code> |<br>| :disappointed_relieved: <code>:disappointed_relieved:</code> | :weary: <code>:weary:</code> | :pensive: <code>:pensive:</code> |<br>| :disappointed: <code>:disappointed:</code> | :confounded: <code>:confounded:</code> | :fearful: <code>:fearful:</code> |<br>| :cold_sweat: <code>:cold_sweat:</code> | :persevere: <code>:persevere:</code> | :cry: <code>:cry:</code> |<br>| :sob: <code>:sob:</code> | :joy: <code>:joy:</code> | :astonished: <code>:astonished:</code> |<br>| :scream: <code>:scream:</code> | :neckbeard: <code>:neckbeard:</code> | :tired_face: <code>:tired_face:</code> |<br>| :angry: <code>:angry:</code> | :rage: <code>:rage:</code> | :triumph: <code>:triumph:</code> |<br>| :sleepy: <code>:sleepy:</code> | :yum: <code>:yum:</code> | :mask: <code>:mask:</code> |<br>| :sunglasses: <code>:sunglasses:</code> | :dizzy_face: <code>:dizzy_face:</code> | :imp: <code>:imp:</code> |<br>| :smiling_imp: <code>:smiling_imp:</code> | :neutral_face: <code>:neutral_face:</code> | :no_mouth: <code>:no_mouth:</code> |<br>| :innocent: <code>:innocent:</code> | :alien: <code>:alien:</code> | :yellow_heart: <code>:yellow_heart:</code> |<br>| :blue_heart: <code>:blue_heart:</code> | :purple_heart: <code>:purple_heart:</code> | :heart: <code>:heart:</code> |<br>| :green_heart: <code>:green_heart:</code> | :broken_heart: <code>:broken_heart:</code> | :heartbeat: <code>:heartbeat:</code> |<br>| :heartpulse: <code>:heartpulse:</code> | :two_hearts: <code>:two_hearts:</code> | :revolving_hearts: <code>:revolving_hearts:</code> |<br>| :cupid: <code>:cupid:</code> | :sparkling_heart: <code>:sparkling_heart:</code> | :sparkles: <code>:sparkles:</code> |<br>| :star: <code>:star:</code> | :star2: <code>:star2:</code> | :dizzy: <code>:dizzy:</code> |<br>| :boom: <code>:boom:</code> | :collision: <code>:collision:</code> | :anger: <code>:anger:</code> |<br>| :exclamation: <code>:exclamation:</code> | :question: <code>:question:</code> | :grey_exclamation: <code>:grey_exclamation:</code> |<br>| :grey_question: <code>:grey_question:</code> | :zzz: <code>:zzz:</code> | :dash: <code>:dash:</code> |<br>| :sweat_drops: <code>:sweat_drops:</code> | :notes: <code>:notes:</code> | :musical_note: <code>:musical_note:</code> |<br>| :fire: <code>:fire:</code> | :hankey: <code>:hankey:</code> | :poop: <code>:poop:</code> |<br>| :shit: <code>:shit:</code> | :+1: <code>:+1:</code> | :thumbsup: <code>:thumbsup:</code> |<br>| :-1: <code>:-1:</code> | :thumbsdown: <code>:thumbsdown:</code> | :ok_hand: <code>:ok_hand:</code> |<br>| :punch: <code>:punch:</code> | :facepunch: <code>:facepunch:</code> | :fist: <code>:fist:</code> |<br>| :v: <code>:v:</code> | :wave: <code>:wave:</code> | :hand: <code>:hand:</code> |<br>| :raised_hand: <code>:raised_hand:</code> | :open_hands: <code>:open_hands:</code> | :point_up: <code>:point_up:</code> |<br>| :point_down: <code>:point_down:</code> | :point_left: <code>:point_left:</code> | :point_right: <code>:point_right:</code> |<br>| :raised_hands: <code>:raised_hands:</code> | :pray: <code>:pray:</code> | :point_up_2: <code>:point_up_2:</code> |<br>| :clap: <code>:clap:</code> | :muscle: <code>:muscle:</code> | :metal: <code>:metal:</code> |<br>| :fu: <code>:fu:</code> | :walking: <code>:walking:</code> | :runner: <code>:runner:</code> |<br>| :running: <code>:running:</code> | :couple: <code>:couple:</code> | :family: <code>:family:</code> |<br>| :two_men_holding_hands: <code>:two_men_holding_hands:</code> | :two_women_holding_hands: <code>:two_women_holding_hands:</code> | :dancer: <code>:dancer:</code> |<br>| :dancers: <code>:dancers:</code> | :ok_woman: <code>:ok_woman:</code> | :no_good: <code>:no_good:</code> |<br>| :information_desk_person: <code>:information_desk_person:</code> | :raising_hand: <code>:raising_hand:</code> | :bride_with_veil: <code>:bride_with_veil:</code> |<br>| :person_with_pouting_face: <code>:person_with_pouting_face:</code> | :person_frowning: <code>:person_frowning:</code> | :bow: <code>:bow:</code> |<br>| :couplekiss: <code>:couplekiss:</code> | :couple_with_heart: <code>:couple_with_heart:</code> | :massage: <code>:massage:</code> |<br>| :haircut: <code>:haircut:</code> | :nail_care: <code>:nail_care:</code> | :boy: <code>:boy:</code> |<br>| :girl: <code>:girl:</code> | :woman: <code>:woman:</code> | :man: <code>:man:</code> |<br>| :baby: <code>:baby:</code> | :older_woman: <code>:older_woman:</code> | :older_man: <code>:older_man:</code> |<br>| :person_with_blond_hair: <code>:person_with_blond_hair:</code> | :man_with_gua_pi_mao: <code>:man_with_gua_pi_mao:</code> | :man_with_turban: <code>:man_with_turban:</code> |<br>| :construction_worker: <code>:construction_worker:</code> | :cop: <code>:cop:</code> | :angel: <code>:angel:</code> |<br>| :princess: <code>:princess:</code> | :smiley_cat: <code>:smiley_cat:</code> | :smile_cat: <code>:smile_cat:</code> |<br>| :heart_eyes_cat: <code>:heart_eyes_cat:</code> | :kissing_cat: <code>:kissing_cat:</code> | :smirk_cat: <code>:smirk_cat:</code> |<br>| :scream_cat: <code>:scream_cat:</code> | :crying_cat_face: <code>:crying_cat_face:</code> | :joy_cat: <code>:joy_cat:</code> |<br>| :pouting_cat: <code>:pouting_cat:</code> | :japanese_ogre: <code>:japanese_ogre:</code> | :japanese_goblin: <code>:japanese_goblin:</code> |<br>| :see_no_evil: <code>:see_no_evil:</code> | :hear_no_evil: <code>:hear_no_evil:</code> | :speak_no_evil: <code>:speak_no_evil:</code> |<br>| :guardsman: <code>:guardsman:</code> | :skull: <code>:skull:</code> | :feet: <code>:feet:</code> |<br>| :lips: <code>:lips:</code> | :kiss: <code>:kiss:</code> | :droplet: <code>:droplet:</code> |<br>| :ear: <code>:ear:</code> | :eyes: <code>:eyes:</code> | :nose: <code>:nose:</code> |<br>| :tongue: <code>:tongue:</code> | :love_letter: <code>:love_letter:</code> | :bust_in_silhouette: <code>:bust_in_silhouette:</code> |<br>| :busts_in_silhouette: <code>:busts_in_silhouette:</code> | :speech_balloon: <code>:speech_balloon:</code> | :thought_balloon: <code>:thought_balloon:</code> |<br>| :feelsgood: <code>:feelsgood:</code> | :finnadie: <code>:finnadie:</code> | :goberserk: <code>:goberserk:</code> |<br>| :godmode: <code>:godmode:</code> | :hurtrealbad: <code>:hurtrealbad:</code> | :rage1: <code>:rage1:</code> |<br>| :rage2: <code>:rage2:</code> | :rage3: <code>:rage3:</code> | :rage4: <code>:rage4:</code> |<br>| :suspect: <code>:suspect:</code> | :trollface: <code>:trollface:</code> | </p>\n<p>Nature</p>\n<table>\n<thead>\n<tr>\n<th>:sunny: <code>:sunny:</code></th>\n<th>:umbrella: <code>:umbrella:</code></th>\n<th>:cloud: <code>:cloud:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:snowflake: <code>:snowflake:</code></td>\n<td>:snowman: <code>:snowman:</code></td>\n<td>:zap: <code>:zap:</code></td>\n</tr>\n<tr>\n<td>:cyclone: <code>:cyclone:</code></td>\n<td>:foggy: <code>:foggy:</code></td>\n<td>:ocean: <code>:ocean:</code></td>\n</tr>\n<tr>\n<td>:cat: <code>:cat:</code></td>\n<td>:dog: <code>:dog:</code></td>\n<td>:mouse: <code>:mouse:</code></td>\n</tr>\n<tr>\n<td>:hamster: <code>:hamster:</code></td>\n<td>:rabbit: <code>:rabbit:</code></td>\n<td>:wolf: <code>:wolf:</code></td>\n</tr>\n<tr>\n<td>:frog: <code>:frog:</code></td>\n<td>:tiger: <code>:tiger:</code></td>\n<td>:koala: <code>:koala:</code></td>\n</tr>\n<tr>\n<td>:bear: <code>:bear:</code></td>\n<td>:pig: <code>:pig:</code></td>\n<td>:pig_nose: <code>:pig_nose:</code></td>\n</tr>\n<tr>\n<td>:cow: <code>:cow:</code></td>\n<td>:boar: <code>:boar:</code></td>\n<td>:monkey_face: <code>:monkey_face:</code></td>\n</tr>\n<tr>\n<td>:monkey: <code>:monkey:</code></td>\n<td>:horse: <code>:horse:</code></td>\n<td>:racehorse: <code>:racehorse:</code></td>\n</tr>\n<tr>\n<td>:camel: <code>:camel:</code></td>\n<td>:sheep: <code>:sheep:</code></td>\n<td>:elephant: <code>:elephant:</code></td>\n</tr>\n<tr>\n<td>:panda_face: <code>:panda_face:</code></td>\n<td>:snake: <code>:snake:</code></td>\n<td>:bird: <code>:bird:</code></td>\n</tr>\n<tr>\n<td>:baby_chick: <code>:baby_chick:</code></td>\n<td>:hatched_chick: <code>:hatched_chick:</code></td>\n<td>:hatching_chick: <code>:hatching_chick:</code></td>\n</tr>\n<tr>\n<td>:chicken: <code>:chicken:</code></td>\n<td>:penguin: <code>:penguin:</code></td>\n<td>:turtle: <code>:turtle:</code></td>\n</tr>\n<tr>\n<td>:bug: <code>:bug:</code></td>\n<td>:honeybee: <code>:honeybee:</code></td>\n<td>:ant: <code>:ant:</code></td>\n</tr>\n<tr>\n<td>:beetle: <code>:beetle:</code></td>\n<td>:snail: <code>:snail:</code></td>\n<td>:octopus: <code>:octopus:</code></td>\n</tr>\n<tr>\n<td>:tropical_fish: <code>:tropical_fish:</code></td>\n<td>:fish: <code>:fish:</code></td>\n<td>:whale: <code>:whale:</code></td>\n</tr>\n<tr>\n<td>:whale2: <code>:whale2:</code></td>\n<td>:dolphin: <code>:dolphin:</code></td>\n<td>:cow2: <code>:cow2:</code></td>\n</tr>\n<tr>\n<td>:ram: <code>:ram:</code></td>\n<td>:rat: <code>:rat:</code></td>\n<td>:water_buffalo: <code>:water_buffalo:</code></td>\n</tr>\n<tr>\n<td>:tiger2: <code>:tiger2:</code></td>\n<td>:rabbit2: <code>:rabbit2:</code></td>\n<td>:dragon: <code>:dragon:</code></td>\n</tr>\n<tr>\n<td>:goat: <code>:goat:</code></td>\n<td>:rooster: <code>:rooster:</code></td>\n<td>:dog2: <code>:dog2:</code></td>\n</tr>\n<tr>\n<td>:pig2: <code>:pig2:</code></td>\n<td>:mouse2: <code>:mouse2:</code></td>\n<td>:ox: <code>:ox:</code></td>\n</tr>\n<tr>\n<td>:dragon_face: <code>:dragon_face:</code></td>\n<td>:blowfish: <code>:blowfish:</code></td>\n<td>:crocodile: <code>:crocodile:</code></td>\n</tr>\n<tr>\n<td>:dromedary_camel: <code>:dromedary_camel:</code></td>\n<td>:leopard: <code>:leopard:</code></td>\n<td>:cat2: <code>:cat2:</code></td>\n</tr>\n<tr>\n<td>:poodle: <code>:poodle:</code></td>\n<td>:paw_prints: <code>:paw_prints:</code></td>\n<td>:bouquet: <code>:bouquet:</code></td>\n</tr>\n<tr>\n<td>:cherry_blossom: <code>:cherry_blossom:</code></td>\n<td>:tulip: <code>:tulip:</code></td>\n<td>:four_leaf_clover: <code>:four_leaf_clover:</code></td>\n</tr>\n<tr>\n<td>:rose: <code>:rose:</code></td>\n<td>:sunflower: <code>:sunflower:</code></td>\n<td>:hibiscus: <code>:hibiscus:</code></td>\n</tr>\n<tr>\n<td>:maple_leaf: <code>:maple_leaf:</code></td>\n<td>:leaves: <code>:leaves:</code></td>\n<td>:fallen_leaf: <code>:fallen_leaf:</code></td>\n</tr>\n<tr>\n<td>:herb: <code>:herb:</code></td>\n<td>:mushroom: <code>:mushroom:</code></td>\n<td>:cactus: <code>:cactus:</code></td>\n</tr>\n<tr>\n<td>:palm_tree: <code>:palm_tree:</code></td>\n<td>:evergreen_tree: <code>:evergreen_tree:</code></td>\n<td>:deciduous_tree: <code>:deciduous_tree:</code></td>\n</tr>\n<tr>\n<td>:chestnut: <code>:chestnut:</code></td>\n<td>:seedling: <code>:seedling:</code></td>\n<td>:blossom: <code>:blossom:</code></td>\n</tr>\n<tr>\n<td>:ear_of_rice: <code>:ear_of_rice:</code></td>\n<td>:shell: <code>:shell:</code></td>\n<td>:globe_with_meridians: <code>:globe_with_meridians:</code></td>\n</tr>\n<tr>\n<td>:sun_with_face: <code>:sun_with_face:</code></td>\n<td>:full_moon_with_face: <code>:full_moon_with_face:</code></td>\n<td>:new_moon_with_face: <code>:new_moon_with_face:</code></td>\n</tr>\n<tr>\n<td>:new_moon: <code>:new_moon:</code></td>\n<td>:waxing_crescent_moon: <code>:waxing_crescent_moon:</code></td>\n<td>:first_quarter_moon: <code>:first_quarter_moon:</code></td>\n</tr>\n<tr>\n<td>:waxing_gibbous_moon: <code>:waxing_gibbous_moon:</code></td>\n<td>:full_moon: <code>:full_moon:</code></td>\n<td>:waning_gibbous_moon: <code>:waning_gibbous_moon:</code></td>\n</tr>\n<tr>\n<td>:last_quarter_moon: <code>:last_quarter_moon:</code></td>\n<td>:waning_crescent_moon: <code>:waning_crescent_moon:</code></td>\n<td>:last_quarter_moon_with_face: <code>:last_quarter_moon_with_face:</code></td>\n</tr>\n<tr>\n<td>:first_quarter_moon_with_face: <code>:first_quarter_moon_with_face:</code></td>\n<td>:moon: <code>:moon:</code></td>\n<td>:earth_africa: <code>:earth_africa:</code></td>\n</tr>\n<tr>\n<td>:earth_americas: <code>:earth_americas:</code></td>\n<td>:earth_asia: <code>:earth_asia:</code></td>\n<td>:volcano: <code>:volcano:</code></td>\n</tr>\n<tr>\n<td>:milky_way: <code>:milky_way:</code></td>\n<td>:partly_sunny: <code>:partly_sunny:</code></td>\n<td>:octocat: <code>:octocat:</code></td>\n</tr>\n<tr>\n<td>:squirrel: <code>:squirrel:</code></td>\n</tr>\n</tbody>\n</table>\n<p>Objects</p>\n<table>\n<thead>\n<tr>\n<th>:bamboo: <code>:bamboo:</code></th>\n<th>:gift_heart: <code>:gift_heart:</code></th>\n<th>:dolls: <code>:dolls:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:school_satchel: <code>:school_satchel:</code></td>\n<td>:mortar_board: <code>:mortar_board:</code></td>\n<td>:flags: <code>:flags:</code></td>\n</tr>\n<tr>\n<td>:fireworks: <code>:fireworks:</code></td>\n<td>:sparkler: <code>:sparkler:</code></td>\n<td>:wind_chime: <code>:wind_chime:</code></td>\n</tr>\n<tr>\n<td>:rice_scene: <code>:rice_scene:</code></td>\n<td>:jack_o_lantern: <code>:jack_o_lantern:</code></td>\n<td>:ghost: <code>:ghost:</code></td>\n</tr>\n<tr>\n<td>:santa: <code>:santa:</code></td>\n<td>:christmas_tree: <code>:christmas_tree:</code></td>\n<td>:gift: <code>:gift:</code></td>\n</tr>\n<tr>\n<td>:bell: <code>:bell:</code></td>\n<td>:no_bell: <code>:no_bell:</code></td>\n<td>:tanabata_tree: <code>:tanabata_tree:</code></td>\n</tr>\n<tr>\n<td>:tada: <code>:tada:</code></td>\n<td>:confetti_ball: <code>:confetti_ball:</code></td>\n<td>:balloon: <code>:balloon:</code></td>\n</tr>\n<tr>\n<td>:crystal_ball: <code>:crystal_ball:</code></td>\n<td>:cd: <code>:cd:</code></td>\n<td>:dvd: <code>:dvd:</code></td>\n</tr>\n<tr>\n<td>:floppy_disk: <code>:floppy_disk:</code></td>\n<td>:camera: <code>:camera:</code></td>\n<td>:video_camera: <code>:video_camera:</code></td>\n</tr>\n<tr>\n<td>:movie_camera: <code>:movie_camera:</code></td>\n<td>:computer: <code>:computer:</code></td>\n<td>:tv: <code>:tv:</code></td>\n</tr>\n<tr>\n<td>:iphone: <code>:iphone:</code></td>\n<td>:phone: <code>:phone:</code></td>\n<td>:telephone: <code>:telephone:</code></td>\n</tr>\n<tr>\n<td>:telephone_receiver: <code>:telephone_receiver:</code></td>\n<td>:pager: <code>:pager:</code></td>\n<td>:fax: <code>:fax:</code></td>\n</tr>\n<tr>\n<td>:minidisc: <code>:minidisc:</code></td>\n<td>:vhs: <code>:vhs:</code></td>\n<td>:sound: <code>:sound:</code></td>\n</tr>\n<tr>\n<td>:speaker: <code>:speaker:</code></td>\n<td>:mute: <code>:mute:</code></td>\n<td>:loudspeaker: <code>:loudspeaker:</code></td>\n</tr>\n<tr>\n<td>:mega: <code>:mega:</code></td>\n<td>:hourglass: <code>:hourglass:</code></td>\n<td>:hourglass_flowing_sand: <code>:hourglass_flowing_sand:</code></td>\n</tr>\n<tr>\n<td>:alarm_clock: <code>:alarm_clock:</code></td>\n<td>:watch: <code>:watch:</code></td>\n<td>:radio: <code>:radio:</code></td>\n</tr>\n<tr>\n<td>:satellite: <code>:satellite:</code></td>\n<td>:loop: <code>:loop:</code></td>\n<td>:mag: <code>:mag:</code></td>\n</tr>\n<tr>\n<td>:mag_right: <code>:mag_right:</code></td>\n<td>:unlock: <code>:unlock:</code></td>\n<td>:lock: <code>:lock:</code></td>\n</tr>\n<tr>\n<td>:lock_with_ink_pen: <code>:lock_with_ink_pen:</code></td>\n<td>:closed_lock_with_key: <code>:closed_lock_with_key:</code></td>\n<td>:key: <code>:key:</code></td>\n</tr>\n<tr>\n<td>:bulb: <code>:bulb:</code></td>\n<td>:flashlight: <code>:flashlight:</code></td>\n<td>:high_brightness: <code>:high_brightness:</code></td>\n</tr>\n<tr>\n<td>:low_brightness: <code>:low_brightness:</code></td>\n<td>:electric_plug: <code>:electric_plug:</code></td>\n<td>:battery: <code>:battery:</code></td>\n</tr>\n<tr>\n<td>:calling: <code>:calling:</code></td>\n<td>:email: <code>:email:</code></td>\n<td>:mailbox: <code>:mailbox:</code></td>\n</tr>\n<tr>\n<td>:postbox: <code>:postbox:</code></td>\n<td>:bath: <code>:bath:</code></td>\n<td>:bathtub: <code>:bathtub:</code></td>\n</tr>\n<tr>\n<td>:shower: <code>:shower:</code></td>\n<td>:toilet: <code>:toilet:</code></td>\n<td>:wrench: <code>:wrench:</code></td>\n</tr>\n<tr>\n<td>:nut_and_bolt: <code>:nut_and_bolt:</code></td>\n<td>:hammer: <code>:hammer:</code></td>\n<td>:seat: <code>:seat:</code></td>\n</tr>\n<tr>\n<td>:moneybag: <code>:moneybag:</code></td>\n<td>:yen: <code>:yen:</code></td>\n<td>:dollar: <code>:dollar:</code></td>\n</tr>\n<tr>\n<td>:pound: <code>:pound:</code></td>\n<td>:euro: <code>:euro:</code></td>\n<td>:credit_card: <code>:credit_card:</code></td>\n</tr>\n<tr>\n<td>:money_with_wings: <code>:money_with_wings:</code></td>\n<td>:e-mail: <code>:e-mail:</code></td>\n<td>:inbox_tray: <code>:inbox_tray:</code></td>\n</tr>\n<tr>\n<td>:outbox_tray: <code>:outbox_tray:</code></td>\n<td>:envelope: <code>:envelope:</code></td>\n<td>:incoming_envelope: <code>:incoming_envelope:</code></td>\n</tr>\n<tr>\n<td>:postal_horn: <code>:postal_horn:</code></td>\n<td>:mailbox_closed: <code>:mailbox_closed:</code></td>\n<td>:mailbox_with_mail: <code>:mailbox_with_mail:</code></td>\n</tr>\n<tr>\n<td>:mailbox_with_no_mail: <code>:mailbox_with_no_mail:</code></td>\n<td>:door: <code>:door:</code></td>\n<td>:smoking: <code>:smoking:</code></td>\n</tr>\n<tr>\n<td>:bomb: <code>:bomb:</code></td>\n<td>:gun: <code>:gun:</code></td>\n<td>:hocho: <code>:hocho:</code></td>\n</tr>\n<tr>\n<td>:pill: <code>:pill:</code></td>\n<td>:syringe: <code>:syringe:</code></td>\n<td>:page_facing_up: <code>:page_facing_up:</code></td>\n</tr>\n<tr>\n<td>:page_with_curl: <code>:page_with_curl:</code></td>\n<td>:bookmark_tabs: <code>:bookmark_tabs:</code></td>\n<td>:bar_chart: <code>:bar_chart:</code></td>\n</tr>\n<tr>\n<td>:chart_with_upwards_trend: <code>:chart_with_upwards_trend:</code></td>\n<td>:chart_with_downwards_trend: <code>:chart_with_downwards_trend:</code></td>\n<td>:scroll: <code>:scroll:</code></td>\n</tr>\n<tr>\n<td>:clipboard: <code>:clipboard:</code></td>\n<td>:calendar: <code>:calendar:</code></td>\n<td>:date: <code>:date:</code></td>\n</tr>\n<tr>\n<td>:card_index: <code>:card_index:</code></td>\n<td>:file_folder: <code>:file_folder:</code></td>\n<td>:open_file_folder: <code>:open_file_folder:</code></td>\n</tr>\n<tr>\n<td>:scissors: <code>:scissors:</code></td>\n<td>:pushpin: <code>:pushpin:</code></td>\n<td>:paperclip: <code>:paperclip:</code></td>\n</tr>\n<tr>\n<td>:black_nib: <code>:black_nib:</code></td>\n<td>:pencil2: <code>:pencil2:</code></td>\n<td>:straight_ruler: <code>:straight_ruler:</code></td>\n</tr>\n<tr>\n<td>:triangular_ruler: <code>:triangular_ruler:</code></td>\n<td>:closed_book: <code>:closed_book:</code></td>\n<td>:green_book: <code>:green_book:</code></td>\n</tr>\n<tr>\n<td>:blue_book: <code>:blue_book:</code></td>\n<td>:orange_book: <code>:orange_book:</code></td>\n<td>:notebook: <code>:notebook:</code></td>\n</tr>\n<tr>\n<td>:notebook_with_decorative_cover: <code>:notebook_with_decorative_cover:</code></td>\n<td>:ledger: <code>:ledger:</code></td>\n<td>:books: <code>:books:</code></td>\n</tr>\n<tr>\n<td>:bookmark: <code>:bookmark:</code></td>\n<td>:name_badge: <code>:name_badge:</code></td>\n<td>:microscope: <code>:microscope:</code></td>\n</tr>\n<tr>\n<td>:telescope: <code>:telescope:</code></td>\n<td>:newspaper: <code>:newspaper:</code></td>\n<td>:football: <code>:football:</code></td>\n</tr>\n<tr>\n<td>:basketball: <code>:basketball:</code></td>\n<td>:soccer: <code>:soccer:</code></td>\n<td>:baseball: <code>:baseball:</code></td>\n</tr>\n<tr>\n<td>:tennis: <code>:tennis:</code></td>\n<td>:8ball: <code>:8ball:</code></td>\n<td>:rugby_football: <code>:rugby_football:</code></td>\n</tr>\n<tr>\n<td>:bowling: <code>:bowling:</code></td>\n<td>:golf: <code>:golf:</code></td>\n<td>:mountain_bicyclist: <code>:mountain_bicyclist:</code></td>\n</tr>\n<tr>\n<td>:bicyclist: <code>:bicyclist:</code></td>\n<td>:horse_racing: <code>:horse_racing:</code></td>\n<td>:snowboarder: <code>:snowboarder:</code></td>\n</tr>\n<tr>\n<td>:swimmer: <code>:swimmer:</code></td>\n<td>:surfer: <code>:surfer:</code></td>\n<td>:ski: <code>:ski:</code></td>\n</tr>\n<tr>\n<td>:spades: <code>:spades:</code></td>\n<td>:hearts: <code>:hearts:</code></td>\n<td>:clubs: <code>:clubs:</code></td>\n</tr>\n<tr>\n<td>:diamonds: <code>:diamonds:</code></td>\n<td>:gem: <code>:gem:</code></td>\n<td>:ring: <code>:ring:</code></td>\n</tr>\n<tr>\n<td>:trophy: <code>:trophy:</code></td>\n<td>:musical_score: <code>:musical_score:</code></td>\n<td>:musical_keyboard: <code>:musical_keyboard:</code></td>\n</tr>\n<tr>\n<td>:violin: <code>:violin:</code></td>\n<td>:space_invader: <code>:space_invader:</code></td>\n<td>:video_game: <code>:video_game:</code></td>\n</tr>\n<tr>\n<td>:black_joker: <code>:black_joker:</code></td>\n<td>:flower_playing_cards: <code>:flower_playing_cards:</code></td>\n<td>:game_die: <code>:game_die:</code></td>\n</tr>\n<tr>\n<td>:dart: <code>:dart:</code></td>\n<td>:mahjong: <code>:mahjong:</code></td>\n<td>:clapper: <code>:clapper:</code></td>\n</tr>\n<tr>\n<td>:memo: <code>:memo:</code></td>\n<td>:pencil: <code>:pencil:</code></td>\n<td>:book: <code>:book:</code></td>\n</tr>\n<tr>\n<td>:art: <code>:art:</code></td>\n<td>:microphone: <code>:microphone:</code></td>\n<td>:headphones: <code>:headphones:</code></td>\n</tr>\n<tr>\n<td>:trumpet: <code>:trumpet:</code></td>\n<td>:saxophone: <code>:saxophone:</code></td>\n<td>:guitar: <code>:guitar:</code></td>\n</tr>\n<tr>\n<td>:shoe: <code>:shoe:</code></td>\n<td>:sandal: <code>:sandal:</code></td>\n<td>:high_heel: <code>:high_heel:</code></td>\n</tr>\n<tr>\n<td>:lipstick: <code>:lipstick:</code></td>\n<td>:boot: <code>:boot:</code></td>\n<td>:shirt: <code>:shirt:</code></td>\n</tr>\n<tr>\n<td>:tshirt: <code>:tshirt:</code></td>\n<td>:necktie: <code>:necktie:</code></td>\n<td>:womans_clothes: <code>:womans_clothes:</code></td>\n</tr>\n<tr>\n<td>:dress: <code>:dress:</code></td>\n<td>:running_shirt_with_sash: <code>:running_shirt_with_sash:</code></td>\n<td>:jeans: <code>:jeans:</code></td>\n</tr>\n<tr>\n<td>:kimono: <code>:kimono:</code></td>\n<td>:bikini: <code>:bikini:</code></td>\n<td>:ribbon: <code>:ribbon:</code></td>\n</tr>\n<tr>\n<td>:tophat: <code>:tophat:</code></td>\n<td>:crown: <code>:crown:</code></td>\n<td>:womans_hat: <code>:womans_hat:</code></td>\n</tr>\n<tr>\n<td>:mans_shoe: <code>:mans_shoe:</code></td>\n<td>:closed_umbrella: <code>:closed_umbrella:</code></td>\n<td>:briefcase: <code>:briefcase:</code></td>\n</tr>\n<tr>\n<td>:handbag: <code>:handbag:</code></td>\n<td>:pouch: <code>:pouch:</code></td>\n<td>:purse: <code>:purse:</code></td>\n</tr>\n<tr>\n<td>:eyeglasses: <code>:eyeglasses:</code></td>\n<td>:fishing_pole_and_fish: <code>:fishing_pole_and_fish:</code></td>\n<td>:coffee: <code>:coffee:</code></td>\n</tr>\n<tr>\n<td>:tea: <code>:tea:</code></td>\n<td>:sake: <code>:sake:</code></td>\n<td>:baby_bottle: <code>:baby_bottle:</code></td>\n</tr>\n<tr>\n<td>:beer: <code>:beer:</code></td>\n<td>:beers: <code>:beers:</code></td>\n<td>:cocktail: <code>:cocktail:</code></td>\n</tr>\n<tr>\n<td>:tropical_drink: <code>:tropical_drink:</code></td>\n<td>:wine_glass: <code>:wine_glass:</code></td>\n<td>:fork_and_knife: <code>:fork_and_knife:</code></td>\n</tr>\n<tr>\n<td>:pizza: <code>:pizza:</code></td>\n<td>:hamburger: <code>:hamburger:</code></td>\n<td>:fries: <code>:fries:</code></td>\n</tr>\n<tr>\n<td>:poultry_leg: <code>:poultry_leg:</code></td>\n<td>:meat_on_bone: <code>:meat_on_bone:</code></td>\n<td>:spaghetti: <code>:spaghetti:</code></td>\n</tr>\n<tr>\n<td>:curry: <code>:curry:</code></td>\n<td>:fried_shrimp: <code>:fried_shrimp:</code></td>\n<td>:bento: <code>:bento:</code></td>\n</tr>\n<tr>\n<td>:sushi: <code>:sushi:</code></td>\n<td>:fish_cake: <code>:fish_cake:</code></td>\n<td>:rice_ball: <code>:rice_ball:</code></td>\n</tr>\n<tr>\n<td>:rice_cracker: <code>:rice_cracker:</code></td>\n<td>:rice: <code>:rice:</code></td>\n<td>:ramen: <code>:ramen:</code></td>\n</tr>\n<tr>\n<td>:stew: <code>:stew:</code></td>\n<td>:oden: <code>:oden:</code></td>\n<td>:dango: <code>:dango:</code></td>\n</tr>\n<tr>\n<td>:egg: <code>:egg:</code></td>\n<td>:bread: <code>:bread:</code></td>\n<td>:doughnut: <code>:doughnut:</code></td>\n</tr>\n<tr>\n<td>:custard: <code>:custard:</code></td>\n<td>:icecream: <code>:icecream:</code></td>\n<td>:ice_cream: <code>:ice_cream:</code></td>\n</tr>\n<tr>\n<td>:shaved_ice: <code>:shaved_ice:</code></td>\n<td>:birthday: <code>:birthday:</code></td>\n<td>:cake: <code>:cake:</code></td>\n</tr>\n<tr>\n<td>:cookie: <code>:cookie:</code></td>\n<td>:chocolate_bar: <code>:chocolate_bar:</code></td>\n<td>:candy: <code>:candy:</code></td>\n</tr>\n<tr>\n<td>:lollipop: <code>:lollipop:</code></td>\n<td>:honey_pot: <code>:honey_pot:</code></td>\n<td>:apple: <code>:apple:</code></td>\n</tr>\n<tr>\n<td>:green_apple: <code>:green_apple:</code></td>\n<td>:tangerine: <code>:tangerine:</code></td>\n<td>:lemon: <code>:lemon:</code></td>\n</tr>\n<tr>\n<td>:cherries: <code>:cherries:</code></td>\n<td>:grapes: <code>:grapes:</code></td>\n<td>:watermelon: <code>:watermelon:</code></td>\n</tr>\n<tr>\n<td>:strawberry: <code>:strawberry:</code></td>\n<td>:peach: <code>:peach:</code></td>\n<td>:melon: <code>:melon:</code></td>\n</tr>\n<tr>\n<td>:banana: <code>:banana:</code></td>\n<td>:pear: <code>:pear:</code></td>\n<td>:pineapple: <code>:pineapple:</code></td>\n</tr>\n<tr>\n<td>:sweet_potato: <code>:sweet_potato:</code></td>\n<td>:eggplant: <code>:eggplant:</code></td>\n<td>:tomato: <code>:tomato:</code></td>\n</tr>\n<tr>\n<td>:corn: <code>:corn:</code></td>\n</tr>\n</tbody>\n</table>\n<p>Places</p>\n<table>\n<thead>\n<tr>\n<th>:house: <code>:house:</code></th>\n<th>:house_with_garden: <code>:house_with_garden:</code></th>\n<th>:school: <code>:school:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:office: <code>:office:</code></td>\n<td>:post_office: <code>:post_office:</code></td>\n<td>:hospital: <code>:hospital:</code></td>\n</tr>\n<tr>\n<td>:bank: <code>:bank:</code></td>\n<td>:convenience_store: <code>:convenience_store:</code></td>\n<td>:love_hotel: <code>:love_hotel:</code></td>\n</tr>\n<tr>\n<td>:hotel: <code>:hotel:</code></td>\n<td>:wedding: <code>:wedding:</code></td>\n<td>:church: <code>:church:</code></td>\n</tr>\n<tr>\n<td>:department_store: <code>:department_store:</code></td>\n<td>:european_post_office: <code>:european_post_office:</code></td>\n<td>:city_sunrise: <code>:city_sunrise:</code></td>\n</tr>\n<tr>\n<td>:city_sunset: <code>:city_sunset:</code></td>\n<td>:japanese_castle: <code>:japanese_castle:</code></td>\n<td>:european_castle: <code>:european_castle:</code></td>\n</tr>\n<tr>\n<td>:tent: <code>:tent:</code></td>\n<td>:factory: <code>:factory:</code></td>\n<td>:tokyo_tower: <code>:tokyo_tower:</code></td>\n</tr>\n<tr>\n<td>:japan: <code>:japan:</code></td>\n<td>:mount_fuji: <code>:mount_fuji:</code></td>\n<td>:sunrise_over_mountains: <code>:sunrise_over_mountains:</code></td>\n</tr>\n<tr>\n<td>:sunrise: <code>:sunrise:</code></td>\n<td>:stars: <code>:stars:</code></td>\n<td>:statue_of_liberty: <code>:statue_of_liberty:</code></td>\n</tr>\n<tr>\n<td>:bridge_at_night: <code>:bridge_at_night:</code></td>\n<td>:carousel_horse: <code>:carousel_horse:</code></td>\n<td>:rainbow: <code>:rainbow:</code></td>\n</tr>\n<tr>\n<td>:ferris_wheel: <code>:ferris_wheel:</code></td>\n<td>:fountain: <code>:fountain:</code></td>\n<td>:roller_coaster: <code>:roller_coaster:</code></td>\n</tr>\n<tr>\n<td>:ship: <code>:ship:</code></td>\n<td>:speedboat: <code>:speedboat:</code></td>\n<td>:boat: <code>:boat:</code></td>\n</tr>\n<tr>\n<td>:sailboat: <code>:sailboat:</code></td>\n<td>:rowboat: <code>:rowboat:</code></td>\n<td>:anchor: <code>:anchor:</code></td>\n</tr>\n<tr>\n<td>:rocket: <code>:rocket:</code></td>\n<td>:airplane: <code>:airplane:</code></td>\n<td>:helicopter: <code>:helicopter:</code></td>\n</tr>\n<tr>\n<td>:steam_locomotive: <code>:steam_locomotive:</code></td>\n<td>:tram: <code>:tram:</code></td>\n<td>:mountain_railway: <code>:mountain_railway:</code></td>\n</tr>\n<tr>\n<td>:bike: <code>:bike:</code></td>\n<td>:aerial_tramway: <code>:aerial_tramway:</code></td>\n<td>:suspension_railway: <code>:suspension_railway:</code></td>\n</tr>\n<tr>\n<td>:mountain_cableway: <code>:mountain_cableway:</code></td>\n<td>:tractor: <code>:tractor:</code></td>\n<td>:blue_car: <code>:blue_car:</code></td>\n</tr>\n<tr>\n<td>:oncoming_automobile: <code>:oncoming_automobile:</code></td>\n<td>:car: <code>:car:</code></td>\n<td>:red_car: <code>:red_car:</code></td>\n</tr>\n<tr>\n<td>:taxi: <code>:taxi:</code></td>\n<td>:oncoming_taxi: <code>:oncoming_taxi:</code></td>\n<td>:articulated_lorry: <code>:articulated_lorry:</code></td>\n</tr>\n<tr>\n<td>:bus: <code>:bus:</code></td>\n<td>:oncoming_bus: <code>:oncoming_bus:</code></td>\n<td>:rotating_light: <code>:rotating_light:</code></td>\n</tr>\n<tr>\n<td>:police_car: <code>:police_car:</code></td>\n<td>:oncoming_police_car: <code>:oncoming_police_car:</code></td>\n<td>:fire_engine: <code>:fire_engine:</code></td>\n</tr>\n<tr>\n<td>:ambulance: <code>:ambulance:</code></td>\n<td>:minibus: <code>:minibus:</code></td>\n<td>:truck: <code>:truck:</code></td>\n</tr>\n<tr>\n<td>:train: <code>:train:</code></td>\n<td>:station: <code>:station:</code></td>\n<td>:train2: <code>:train2:</code></td>\n</tr>\n<tr>\n<td>:bullettrain_front: <code>:bullettrain_front:</code></td>\n<td>:bullettrain_side: <code>:bullettrain_side:</code></td>\n<td>:light_rail: <code>:light_rail:</code></td>\n</tr>\n<tr>\n<td>:monorail: <code>:monorail:</code></td>\n<td>:railway_car: <code>:railway_car:</code></td>\n<td>:trolleybus: <code>:trolleybus:</code></td>\n</tr>\n<tr>\n<td>:ticket: <code>:ticket:</code></td>\n<td>:fuelpump: <code>:fuelpump:</code></td>\n<td>:vertical_traffic_light: <code>:vertical_traffic_light:</code></td>\n</tr>\n<tr>\n<td>:traffic_light: <code>:traffic_light:</code></td>\n<td>:warning: <code>:warning:</code></td>\n<td>:construction: <code>:construction:</code></td>\n</tr>\n<tr>\n<td>:beginner: <code>:beginner:</code></td>\n<td>:atm: <code>:atm:</code></td>\n<td>:slot_machine: <code>:slot_machine:</code></td>\n</tr>\n<tr>\n<td>:busstop: <code>:busstop:</code></td>\n<td>:barber: <code>:barber:</code></td>\n<td>:hotsprings: <code>:hotsprings:</code></td>\n</tr>\n<tr>\n<td>:checkered_flag: <code>:checkered_flag:</code></td>\n<td>:crossed_flags: <code>:crossed_flags:</code></td>\n<td>:izakaya_lantern: <code>:izakaya_lantern:</code></td>\n</tr>\n<tr>\n<td>:moyai: <code>:moyai:</code></td>\n<td>:circus_tent: <code>:circus_tent:</code></td>\n<td>:performing_arts: <code>:performing_arts:</code></td>\n</tr>\n<tr>\n<td>:round_pushpin: <code>:round_pushpin:</code></td>\n<td>:triangular_flag_on_post: <code>:triangular_flag_on_post:</code></td>\n<td>:jp: <code>:jp:</code></td>\n</tr>\n<tr>\n<td>:kr: <code>:kr:</code></td>\n<td>:cn: <code>:cn:</code></td>\n<td>:us: <code>:us:</code></td>\n</tr>\n<tr>\n<td>:fr: <code>:fr:</code></td>\n<td>:es: <code>:es:</code></td>\n<td>:it: <code>:it:</code></td>\n</tr>\n<tr>\n<td>:ru: <code>:ru:</code></td>\n<td>:gb: <code>:gb:</code></td>\n<td>:uk: <code>:uk:</code></td>\n</tr>\n<tr>\n<td>:de: <code>:de:</code></td>\n</tr>\n</tbody>\n</table>\n<p>Symbols</p>\n<table>\n<thead>\n<tr>\n<th>:one: <code>:one:</code></th>\n<th>:two: <code>:two:</code></th>\n<th>:three: <code>:three:</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:four: <code>:four:</code></td>\n<td>:five: <code>:five:</code></td>\n<td>:six: <code>:six:</code></td>\n</tr>\n<tr>\n<td>:seven: <code>:seven:</code></td>\n<td>:eight: <code>:eight:</code></td>\n<td>:nine: <code>:nine:</code></td>\n</tr>\n<tr>\n<td>:keycap_ten: <code>:keycap_ten:</code></td>\n<td>:1234: <code>:1234:</code></td>\n<td>:zero: <code>:zero:</code></td>\n</tr>\n<tr>\n<td>:hash: <code>:hash:</code></td>\n<td>:symbols: <code>:symbols:</code></td>\n<td>:arrow_backward: <code>:arrow_backward:</code></td>\n</tr>\n<tr>\n<td>:arrow_down: <code>:arrow_down:</code></td>\n<td>:arrow_forward: <code>:arrow_forward:</code></td>\n<td>:arrow_left: <code>:arrow_left:</code></td>\n</tr>\n<tr>\n<td>:capital_abcd: <code>:capital_abcd:</code></td>\n<td>:abcd: <code>:abcd:</code></td>\n<td>:abc: <code>:abc:</code></td>\n</tr>\n<tr>\n<td>:arrow_lower_left: <code>:arrow_lower_left:</code></td>\n<td>:arrow_lower_right: <code>:arrow_lower_right:</code></td>\n<td>:arrow_right: <code>:arrow_right:</code></td>\n</tr>\n<tr>\n<td>:arrow_up: <code>:arrow_up:</code></td>\n<td>:arrow_upper_left: <code>:arrow_upper_left:</code></td>\n<td>:arrow_upper_right: <code>:arrow_upper_right:</code></td>\n</tr>\n<tr>\n<td>:arrow_double_down: <code>:arrow_double_down:</code></td>\n<td>:arrow_double_up: <code>:arrow_double_up:</code></td>\n<td>:arrow_down_small: <code>:arrow_down_small:</code></td>\n</tr>\n<tr>\n<td>:arrow_heading_down: <code>:arrow_heading_down:</code></td>\n<td>:arrow_heading_up: <code>:arrow_heading_up:</code></td>\n<td>:leftwards_arrow_with_hook: <code>:leftwards_arrow_with_hook:</code></td>\n</tr>\n<tr>\n<td>:arrow_right_hook: <code>:arrow_right_hook:</code></td>\n<td>:left_right_arrow: <code>:left_right_arrow:</code></td>\n<td>:arrow_up_down: <code>:arrow_up_down:</code></td>\n</tr>\n<tr>\n<td>:arrow_up_small: <code>:arrow_up_small:</code></td>\n<td>:arrows_clockwise: <code>:arrows_clockwise:</code></td>\n<td>:arrows_counterclockwise: <code>:arrows_counterclockwise:</code></td>\n</tr>\n<tr>\n<td>:rewind: <code>:rewind:</code></td>\n<td>:fast_forward: <code>:fast_forward:</code></td>\n<td>:information_source: <code>:information_source:</code></td>\n</tr>\n<tr>\n<td>:ok: <code>:ok:</code></td>\n<td>:twisted_rightwards_arrows: <code>:twisted_rightwards_arrows:</code></td>\n<td>:repeat: <code>:repeat:</code></td>\n</tr>\n<tr>\n<td>:repeat_one: <code>:repeat_one:</code></td>\n<td>:new: <code>:new:</code></td>\n<td>:top: <code>:top:</code></td>\n</tr>\n<tr>\n<td>:up: <code>:up:</code></td>\n<td>:cool: <code>:cool:</code></td>\n<td>:free: <code>:free:</code></td>\n</tr>\n<tr>\n<td>:ng: <code>:ng:</code></td>\n<td>:cinema: <code>:cinema:</code></td>\n<td>:koko: <code>:koko:</code></td>\n</tr>\n<tr>\n<td>:signal_strength: <code>:signal_strength:</code></td>\n<td>:u5272: <code>:u5272:</code></td>\n<td>:u5408: <code>:u5408:</code></td>\n</tr>\n<tr>\n<td>:u55b6: <code>:u55b6:</code></td>\n<td>:u6307: <code>:u6307:</code></td>\n<td>:u6708: <code>:u6708:</code></td>\n</tr>\n<tr>\n<td>:u6709: <code>:u6709:</code></td>\n<td>:u6e80: <code>:u6e80:</code></td>\n<td>:u7121: <code>:u7121:</code></td>\n</tr>\n<tr>\n<td>:u7533: <code>:u7533:</code></td>\n<td>:u7a7a: <code>:u7a7a:</code></td>\n<td>:u7981: <code>:u7981:</code></td>\n</tr>\n<tr>\n<td>:sa: <code>:sa:</code></td>\n<td>:restroom: <code>:restroom:</code></td>\n<td>:mens: <code>:mens:</code></td>\n</tr>\n<tr>\n<td>:womens: <code>:womens:</code></td>\n<td>:baby_symbol: <code>:baby_symbol:</code></td>\n<td>:no_smoking: <code>:no_smoking:</code></td>\n</tr>\n<tr>\n<td>:parking: <code>:parking:</code></td>\n<td>:wheelchair: <code>:wheelchair:</code></td>\n<td>:metro: <code>:metro:</code></td>\n</tr>\n<tr>\n<td>:baggage_claim: <code>:baggage_claim:</code></td>\n<td>:accept: <code>:accept:</code></td>\n<td>:wc: <code>:wc:</code></td>\n</tr>\n<tr>\n<td>:potable_water: <code>:potable_water:</code></td>\n<td>:put_litter_in_its_place: <code>:put_litter_in_its_place:</code></td>\n<td>:secret: <code>:secret:</code></td>\n</tr>\n<tr>\n<td>:congratulations: <code>:congratulations:</code></td>\n<td>:m: <code>:m:</code></td>\n<td>:passport_control: <code>:passport_control:</code></td>\n</tr>\n<tr>\n<td>:left_luggage: <code>:left_luggage:</code></td>\n<td>:customs: <code>:customs:</code></td>\n<td>:ideograph_advantage: <code>:ideograph_advantage:</code></td>\n</tr>\n<tr>\n<td>:cl: <code>:cl:</code></td>\n<td>:sos: <code>:sos:</code></td>\n<td>:id: <code>:id:</code></td>\n</tr>\n<tr>\n<td>:no_entry_sign: <code>:no_entry_sign:</code></td>\n<td>:underage: <code>:underage:</code></td>\n<td>:no_mobile_phones: <code>:no_mobile_phones:</code></td>\n</tr>\n<tr>\n<td>:do_not_litter: <code>:do_not_litter:</code></td>\n<td>:non-potable_water: <code>:non-potable_water:</code></td>\n<td>:no_bicycles: <code>:no_bicycles:</code></td>\n</tr>\n<tr>\n<td>:no_pedestrians: <code>:no_pedestrians:</code></td>\n<td>:children_crossing: <code>:children_crossing:</code></td>\n<td>:no_entry: <code>:no_entry:</code></td>\n</tr>\n<tr>\n<td>:eight_spoked_asterisk: <code>:eight_spoked_asterisk:</code></td>\n<td>:eight_pointed_black_star: <code>:eight_pointed_black_star:</code></td>\n<td>:heart_decoration: <code>:heart_decoration:</code></td>\n</tr>\n<tr>\n<td>:vs: <code>:vs:</code></td>\n<td>:vibration_mode: <code>:vibration_mode:</code></td>\n<td>:mobile_phone_off: <code>:mobile_phone_off:</code></td>\n</tr>\n<tr>\n<td>:chart: <code>:chart:</code></td>\n<td>:currency_exchange: <code>:currency_exchange:</code></td>\n<td>:aries: <code>:aries:</code></td>\n</tr>\n<tr>\n<td>:taurus: <code>:taurus:</code></td>\n<td>:gemini: <code>:gemini:</code></td>\n<td>:cancer: <code>:cancer:</code></td>\n</tr>\n<tr>\n<td>:leo: <code>:leo:</code></td>\n<td>:virgo: <code>:virgo:</code></td>\n<td>:libra: <code>:libra:</code></td>\n</tr>\n<tr>\n<td>:scorpius: <code>:scorpius:</code></td>\n<td>:sagittarius: <code>:sagittarius:</code></td>\n<td>:capricorn: <code>:capricorn:</code></td>\n</tr>\n<tr>\n<td>:aquarius: <code>:aquarius:</code></td>\n<td>:pisces: <code>:pisces:</code></td>\n<td>:ophiuchus: <code>:ophiuchus:</code></td>\n</tr>\n<tr>\n<td>:six_pointed_star: <code>:six_pointed_star:</code></td>\n<td>:negative_squared_cross_mark: <code>:negative_squared_cross_mark:</code></td>\n<td>:a: <code>:a:</code></td>\n</tr>\n<tr>\n<td>:b: <code>:b:</code></td>\n<td>:ab: <code>:ab:</code></td>\n<td>:o2: <code>:o2:</code></td>\n</tr>\n<tr>\n<td>:diamond_shape_with_a_dot_inside: <code>:diamond_shape_with_a_dot_inside:</code></td>\n<td>:recycle: <code>:recycle:</code></td>\n<td>:end: <code>:end:</code></td>\n</tr>\n<tr>\n<td>:on: <code>:on:</code></td>\n<td>:soon: <code>:soon:</code></td>\n<td>:clock1: <code>:clock1:</code></td>\n</tr>\n<tr>\n<td>:clock130: <code>:clock130:</code></td>\n<td>:clock10: <code>:clock10:</code></td>\n<td>:clock1030: <code>:clock1030:</code></td>\n</tr>\n<tr>\n<td>:clock11: <code>:clock11:</code></td>\n<td>:clock1130: <code>:clock1130:</code></td>\n<td>:clock12: <code>:clock12:</code></td>\n</tr>\n<tr>\n<td>:clock1230: <code>:clock1230:</code></td>\n<td>:clock2: <code>:clock2:</code></td>\n<td>:clock230: <code>:clock230:</code></td>\n</tr>\n<tr>\n<td>:clock3: <code>:clock3:</code></td>\n<td>:clock330: <code>:clock330:</code></td>\n<td>:clock4: <code>:clock4:</code></td>\n</tr>\n<tr>\n<td>:clock430: <code>:clock430:</code></td>\n<td>:clock5: <code>:clock5:</code></td>\n<td>:clock530: <code>:clock530:</code></td>\n</tr>\n<tr>\n<td>:clock6: <code>:clock6:</code></td>\n<td>:clock630: <code>:clock630:</code></td>\n<td>:clock7: <code>:clock7:</code></td>\n</tr>\n<tr>\n<td>:clock730: <code>:clock730:</code></td>\n<td>:clock8: <code>:clock8:</code></td>\n<td>:clock830: <code>:clock830:</code></td>\n</tr>\n<tr>\n<td>:clock9: <code>:clock9:</code></td>\n<td>:clock930: <code>:clock930:</code></td>\n<td>:heavy_dollar_sign: <code>:heavy_dollar_sign:</code></td>\n</tr>\n<tr>\n<td>:copyright: <code>:copyright:</code></td>\n<td>:registered: <code>:registered:</code></td>\n<td>:tm: <code>:tm:</code></td>\n</tr>\n<tr>\n<td>:x: <code>:x:</code></td>\n<td>:heavy_exclamation_mark: <code>:heavy_exclamation_mark:</code></td>\n<td>:bangbang: <code>:bangbang:</code></td>\n</tr>\n<tr>\n<td>:interrobang: <code>:interrobang:</code></td>\n<td>:o: <code>:o:</code></td>\n<td>:heavy_multiplication_x: <code>:heavy_multiplication_x:</code></td>\n</tr>\n<tr>\n<td>:heavy_plus_sign: <code>:heavy_plus_sign:</code></td>\n<td>:heavy_minus_sign: <code>:heavy_minus_sign:</code></td>\n<td>:heavy_division_sign: <code>:heavy_division_sign:</code></td>\n</tr>\n<tr>\n<td>:white_flower: <code>:white_flower:</code></td>\n<td>:100: <code>:100:</code></td>\n<td>:heavy_check_mark: <code>:heavy_check_mark:</code></td>\n</tr>\n<tr>\n<td>:ballot_box_with_check: <code>:ballot_box_with_check:</code></td>\n<td>:radio_button: <code>:radio_button:</code></td>\n<td>:link: <code>:link:</code></td>\n</tr>\n<tr>\n<td>:curly_loop: <code>:curly_loop:</code></td>\n<td>:wavy_dash: <code>:wavy_dash:</code></td>\n<td>:part_alternation_mark: <code>:part_alternation_mark:</code></td>\n</tr>\n<tr>\n<td>:trident: <code>:trident:</code></td>\n<td>:black_square: <code>:black_square:</code></td>\n<td>:white_square: <code>:white_square:</code></td>\n</tr>\n<tr>\n<td>:white_check_mark: <code>:white_check_mark:</code></td>\n<td>:black_square_button: <code>:black_square_button:</code></td>\n<td>:white_square_button: <code>:white_square_button:</code></td>\n</tr>\n<tr>\n<td>:black_circle: <code>:black_circle:</code></td>\n<td>:white_circle: <code>:white_circle:</code></td>\n<td>:red_circle: <code>:red_circle:</code></td>\n</tr>\n<tr>\n<td>:large_blue_circle: <code>:large_blue_circle:</code></td>\n<td>:large_blue_diamond: <code>:large_blue_diamond:</code></td>\n<td>:large_orange_diamond: <code>:large_orange_diamond:</code></td>\n</tr>\n<tr>\n<td>:small_blue_diamond: <code>:small_blue_diamond:</code></td>\n<td>:small_orange_diamond: <code>:small_orange_diamond:</code></td>\n<td>:small_red_triangle: <code>:small_red_triangle:</code></td>\n</tr>\n<tr>\n<td>:small_red_triangle_down: <code>:small_red_triangle_down:</code></td>\n<td>:shipit: <code>:shipit:</code></td>\n</tr>\n</tbody>\n</table>"},{"title":"git merge","_content":"# git merge 的几种形式\n> 转载[连接](https://liuliqiang.info/post/difference-between-merge-squash-and-rebase)\n<div class=\"post-content\">\n<p>这几天我就遇到了一个问题，其实也不是遇到问题，而是遇到了疑惑，那就是我在 github 系统中 merge 同时的 PR 的时候发现有好几个选项，但是，却说不清楚这几个选项分别代表什么含义，所以就稍微花了点时间了解了下，顺带做个总结。</p>\n<h3 id=\"toc-0\">merge 的几种形式</h3>\n<p>在 merge pr 的时候，默认是有三种选项的，分别是</p>\n<ul>\n<li>普通的 merge</li>\n<li>rebase merge</li>\n<li>squash merge</li>\n</ul>\n<p>这其实对应于我们在合并分支的时候的几种方式，所以我就以本地分支的形式来说说有啥区别。</p>\n<h3 id=\"toc-1\">一个简单的模型</h3>\n<p>假设我们一开始的 master 分支上已经有了几个提交，就像这样：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101468869266.jpg\" alt=\"\"></p>\n<p>然后，我们切出一条开发的分支，进行了一些 Feature 的开发，然后我们的分支可能就是这种情况：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478786848.jpg\" alt=\"\"></p>\n<p>这种情况还好，也比较常遇到，但是，现在问题来了，如果在这个时候 master 有了一些新提交（可能是其他分支合并进来的），那么这个时候情形就成了这样：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478014577.jpg\" alt=\"\"></p>\n<p>这个情况很有趣，但是我们不讨论，因为这和我们今天的主题无关，以后可以另外开一个话题来说，今天要说的是第二个情况。</p>\n<h3 id=\"toc-2\">普通 Merge</h3>\n<p>说到合并分支，可能我们最熟悉的操作是这样的：</p>\n<ul>\n<li>先切换到目标分支（master）</li>\n<li>执行命令：<code>git merge devel</code></li>\n<li>删除旧分支（可以在上面一同做）：<code>git branch -D devel</code></li>\n<!--more-->\n<li>提交到远程分支：<code>git push origin master</code></li>\n</ul>\n<p>好像这样没啥问题的样子，但是这样操作之后，你知道结果是怎么样吗？假设合并之前的这样的：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478786848.jpg\" alt=\"15101478786848\"></p>\n<p>我们这么一番操作之后，那么最后我们的分支的历史将会是这样的：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101481294797.jpg\" alt=\"\"></p>\n<p>是的，看上去很不错，也是一条直直的 commit line，我们在 devel 分支中的 commit 也是一个不差得保留在了 master 中。但是，很多时候，我们并不需要那么多的 commit，假设你给一个开源项目提交一个 Bug Fixes，然后一个简单的修改因为你的粗心大意 pr 了十几个 commit 过去，如果作者给你 merge 了，这就在这个项目的历史长河中增加了十几个 commit 啊，以后的人看 commit history 估计都崩溃了吧；同时，对于你自己管理的项目来说，当你 merge 之后发现有问题，想回滚都蛋疼！</p>\n<h3 id=\"toc-3\">squash merge</h3>\n<p>在使用 git 的过程中，可能你遇到过想要合并多个 commit 为一个，然后很多人会告诉你用 <code>git commit --amend</code>，然后你发现里面有你的多个 commit 历史，你可以通过 pick 选择，squash 合并等等。同样得，merge 的时候也可以这么干，你只需要这么简单的两步：</p>\n<ul>\n<li>切换到目标分支：<code>git checkout master</code></li>\n<li>以 squash 的形式 merge：<code>git merge --squash devel</code></li>\n</ul>\n<p>你会发现，在 master 分支上居然有未提交的修改，然后你就需要在 master 上主动提交了修改，注意，这里是你 commit 的，也就是改变了 commit 的 author。结果是这样的：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101488495274.jpg\" alt=\"\"></p>\n<p>这里好了，比前面普通的 merge 来说，我们只有一个 commit 了，不管在分支中 commit 了多少，这里都只有一个！</p>\n<h3 id=\"toc-4\">rebase merge</h3>\n<p>但是，作为处女座的程序员肯定是不能忍受目前的情况的，因为我们既想合并 commits，又想保留作者的信息，那么有没有什么好办法呢？肯定是有的啦，这个时候我们可以尝试一下 rebase，操作步骤是这样的：</p>\n<ul>\n<li><strong>先切换到 devel 分支</strong>（不一样咯）：<code>git checkout devel</code></li>\n<li>变基：<code>git rebase -i master</code></li>\n<li>切换回目标分支：<code>git checkout master</code></li>\n<li>合并: <code>git merge devel</code></li>\n</ul>\n<p>这里完成了第二步之后我想你应该大概知道发生了什么事了，我们在 devel 里面对照 master 进行了变基，所谓的变基其实就是找到两个分支共同的祖先，然后在当前分支上合并从共同祖先到现在的所有 commit，所以我们在第二步的时候会选择怎么处理这些 commit，然后我们就得到了一个从公共commit 到现在的单个 commit，这个时候别人讲我们这个 commit 合并到 master 也只会在 master 上留下一个 commit 记录，就像这样：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101517152753.jpg\" alt=\"\"></p>\n<p>虽然这个 commit history 线看上去很不错，而且也比较符合实际情况，但是我们需要注意到的有点就是分支上的开发者需要自己执行变基操作，从而导致他的原始 commit history 变化了（可以理解成被合并了）。</p>\n<h3 id=\"toc-5\">对比</h3>\n<p>相比一下前面三种方式，我们可以总结出一些东西：</p>\n<ol>\n<li>rebase 可以尽可能保持 master 分支干净整洁，并且易于识别 author</li>\n<li>squash 也可以保持 master 分支干净，但是 master 中 author 都是 maintainer，而不是原 owner</li>\n<li>merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好</li>\n</ol>\n<p>所以，相比这么多，我是推荐使用 rebase 的，但是，当你在使用过程中，你会发现它的要求有点高，[/手动哭脸]</p>\n<h3 id=\"toc-6\">Reference</h3>\n<ol>\n<li><a href=\"https://book.douban.com/subject/3420144/\">Pro Git</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2427238/in-git-what-is-the-difference-between-merge-squash-and-rebase\">In git, what is the difference between merge --squash and rebase?</a> </li>\n</ol>","source":"_posts/git merge.md","raw":"---\ntitle: git merge\ntags: \n- Git\n---\n# git merge 的几种形式\n> 转载[连接](https://liuliqiang.info/post/difference-between-merge-squash-and-rebase)\n<div class=\"post-content\">\n<p>这几天我就遇到了一个问题，其实也不是遇到问题，而是遇到了疑惑，那就是我在 github 系统中 merge 同时的 PR 的时候发现有好几个选项，但是，却说不清楚这几个选项分别代表什么含义，所以就稍微花了点时间了解了下，顺带做个总结。</p>\n<h3 id=\"toc-0\">merge 的几种形式</h3>\n<p>在 merge pr 的时候，默认是有三种选项的，分别是</p>\n<ul>\n<li>普通的 merge</li>\n<li>rebase merge</li>\n<li>squash merge</li>\n</ul>\n<p>这其实对应于我们在合并分支的时候的几种方式，所以我就以本地分支的形式来说说有啥区别。</p>\n<h3 id=\"toc-1\">一个简单的模型</h3>\n<p>假设我们一开始的 master 分支上已经有了几个提交，就像这样：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101468869266.jpg\" alt=\"\"></p>\n<p>然后，我们切出一条开发的分支，进行了一些 Feature 的开发，然后我们的分支可能就是这种情况：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478786848.jpg\" alt=\"\"></p>\n<p>这种情况还好，也比较常遇到，但是，现在问题来了，如果在这个时候 master 有了一些新提交（可能是其他分支合并进来的），那么这个时候情形就成了这样：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478014577.jpg\" alt=\"\"></p>\n<p>这个情况很有趣，但是我们不讨论，因为这和我们今天的主题无关，以后可以另外开一个话题来说，今天要说的是第二个情况。</p>\n<h3 id=\"toc-2\">普通 Merge</h3>\n<p>说到合并分支，可能我们最熟悉的操作是这样的：</p>\n<ul>\n<li>先切换到目标分支（master）</li>\n<li>执行命令：<code>git merge devel</code></li>\n<li>删除旧分支（可以在上面一同做）：<code>git branch -D devel</code></li>\n<!--more-->\n<li>提交到远程分支：<code>git push origin master</code></li>\n</ul>\n<p>好像这样没啥问题的样子，但是这样操作之后，你知道结果是怎么样吗？假设合并之前的这样的：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478786848.jpg\" alt=\"15101478786848\"></p>\n<p>我们这么一番操作之后，那么最后我们的分支的历史将会是这样的：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101481294797.jpg\" alt=\"\"></p>\n<p>是的，看上去很不错，也是一条直直的 commit line，我们在 devel 分支中的 commit 也是一个不差得保留在了 master 中。但是，很多时候，我们并不需要那么多的 commit，假设你给一个开源项目提交一个 Bug Fixes，然后一个简单的修改因为你的粗心大意 pr 了十几个 commit 过去，如果作者给你 merge 了，这就在这个项目的历史长河中增加了十几个 commit 啊，以后的人看 commit history 估计都崩溃了吧；同时，对于你自己管理的项目来说，当你 merge 之后发现有问题，想回滚都蛋疼！</p>\n<h3 id=\"toc-3\">squash merge</h3>\n<p>在使用 git 的过程中，可能你遇到过想要合并多个 commit 为一个，然后很多人会告诉你用 <code>git commit --amend</code>，然后你发现里面有你的多个 commit 历史，你可以通过 pick 选择，squash 合并等等。同样得，merge 的时候也可以这么干，你只需要这么简单的两步：</p>\n<ul>\n<li>切换到目标分支：<code>git checkout master</code></li>\n<li>以 squash 的形式 merge：<code>git merge --squash devel</code></li>\n</ul>\n<p>你会发现，在 master 分支上居然有未提交的修改，然后你就需要在 master 上主动提交了修改，注意，这里是你 commit 的，也就是改变了 commit 的 author。结果是这样的：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101488495274.jpg\" alt=\"\"></p>\n<p>这里好了，比前面普通的 merge 来说，我们只有一个 commit 了，不管在分支中 commit 了多少，这里都只有一个！</p>\n<h3 id=\"toc-4\">rebase merge</h3>\n<p>但是，作为处女座的程序员肯定是不能忍受目前的情况的，因为我们既想合并 commits，又想保留作者的信息，那么有没有什么好办法呢？肯定是有的啦，这个时候我们可以尝试一下 rebase，操作步骤是这样的：</p>\n<ul>\n<li><strong>先切换到 devel 分支</strong>（不一样咯）：<code>git checkout devel</code></li>\n<li>变基：<code>git rebase -i master</code></li>\n<li>切换回目标分支：<code>git checkout master</code></li>\n<li>合并: <code>git merge devel</code></li>\n</ul>\n<p>这里完成了第二步之后我想你应该大概知道发生了什么事了，我们在 devel 里面对照 master 进行了变基，所谓的变基其实就是找到两个分支共同的祖先，然后在当前分支上合并从共同祖先到现在的所有 commit，所以我们在第二步的时候会选择怎么处理这些 commit，然后我们就得到了一个从公共commit 到现在的单个 commit，这个时候别人讲我们这个 commit 合并到 master 也只会在 master 上留下一个 commit 记录，就像这样：</p>\n<p><img src=\"http://images.liuliqiang.info/2017-11-08-15101517152753.jpg\" alt=\"\"></p>\n<p>虽然这个 commit history 线看上去很不错，而且也比较符合实际情况，但是我们需要注意到的有点就是分支上的开发者需要自己执行变基操作，从而导致他的原始 commit history 变化了（可以理解成被合并了）。</p>\n<h3 id=\"toc-5\">对比</h3>\n<p>相比一下前面三种方式，我们可以总结出一些东西：</p>\n<ol>\n<li>rebase 可以尽可能保持 master 分支干净整洁，并且易于识别 author</li>\n<li>squash 也可以保持 master 分支干净，但是 master 中 author 都是 maintainer，而不是原 owner</li>\n<li>merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好</li>\n</ol>\n<p>所以，相比这么多，我是推荐使用 rebase 的，但是，当你在使用过程中，你会发现它的要求有点高，[/手动哭脸]</p>\n<h3 id=\"toc-6\">Reference</h3>\n<ol>\n<li><a href=\"https://book.douban.com/subject/3420144/\">Pro Git</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2427238/in-git-what-is-the-difference-between-merge-squash-and-rebase\">In git, what is the difference between merge --squash and rebase?</a> </li>\n</ol>","slug":"git merge","published":1,"date":"2019-12-19T15:52:56.141Z","updated":"2019-12-19T15:52:56.142Z","_id":"ck4cwgni30011ckukve8rwca6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"git-merge-的几种形式\"><a href=\"#git-merge-的几种形式\" class=\"headerlink\" title=\"git merge 的几种形式\"></a>git merge 的几种形式</h1><blockquote>\n<p>转载<a href=\"https://liuliqiang.info/post/difference-between-merge-squash-and-rebase\" target=\"_blank\" rel=\"noopener\">连接</a></p>\n</blockquote>\n<p><div class=\"post-content\"></div></p>\n<p></p><p>这几天我就遇到了一个问题，其实也不是遇到问题，而是遇到了疑惑，那就是我在 github 系统中 merge 同时的 PR 的时候发现有好几个选项，但是，却说不清楚这几个选项分别代表什么含义，所以就稍微花了点时间了解了下，顺带做个总结。</p><p></p>\n<p></p><h3 id=\"toc-0\">merge 的几种形式</h3><p></p>\n<p></p><p>在 merge pr 的时候，默认是有三种选项的，分别是</p><p></p>\n<p><ul></ul></p>\n<p><li>普通的 merge</li></p>\n<p><li>rebase merge</li></p>\n<p><li>squash merge</li><br></p>\n<p></p><p>这其实对应于我们在合并分支的时候的几种方式，所以我就以本地分支的形式来说说有啥区别。</p><p></p>\n<p></p><h3 id=\"toc-1\">一个简单的模型</h3><p></p>\n<p></p><p>假设我们一开始的 master 分支上已经有了几个提交，就像这样：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101468869266.jpg\" alt></p><p></p>\n<p></p><p>然后，我们切出一条开发的分支，进行了一些 Feature 的开发，然后我们的分支可能就是这种情况：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478786848.jpg\" alt></p><p></p>\n<p></p><p>这种情况还好，也比较常遇到，但是，现在问题来了，如果在这个时候 master 有了一些新提交（可能是其他分支合并进来的），那么这个时候情形就成了这样：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478014577.jpg\" alt></p><p></p>\n<p></p><p>这个情况很有趣，但是我们不讨论，因为这和我们今天的主题无关，以后可以另外开一个话题来说，今天要说的是第二个情况。</p><p></p>\n<p></p><h3 id=\"toc-2\">普通 Merge</h3><p></p>\n<p></p><p>说到合并分支，可能我们最熟悉的操作是这样的：</p><p></p>\n<p><ul></ul></p>\n<p><li>先切换到目标分支（master）</li></p>\n<p><li>执行命令：<code>git merge devel</code></li></p>\n<p><li>删除旧分支（可以在上面一同做）：<code>git branch -D devel</code></li><br><a id=\"more\"></a></p>\n<p><li>提交到远程分支：<code>git push origin master</code></li><br></p>\n<p></p><p>好像这样没啥问题的样子，但是这样操作之后，你知道结果是怎么样吗？假设合并之前的这样的：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478786848.jpg\" alt=\"15101478786848\"></p><p></p>\n<p></p><p>我们这么一番操作之后，那么最后我们的分支的历史将会是这样的：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101481294797.jpg\" alt></p><p></p>\n<p></p><p>是的，看上去很不错，也是一条直直的 commit line，我们在 devel 分支中的 commit 也是一个不差得保留在了 master 中。但是，很多时候，我们并不需要那么多的 commit，假设你给一个开源项目提交一个 Bug Fixes，然后一个简单的修改因为你的粗心大意 pr 了十几个 commit 过去，如果作者给你 merge 了，这就在这个项目的历史长河中增加了十几个 commit 啊，以后的人看 commit history 估计都崩溃了吧；同时，对于你自己管理的项目来说，当你 merge 之后发现有问题，想回滚都蛋疼！</p><p></p>\n<p></p><h3 id=\"toc-3\">squash merge</h3><p></p>\n<p></p><p>在使用 git 的过程中，可能你遇到过想要合并多个 commit 为一个，然后很多人会告诉你用 <code>git commit –amend</code>，然后你发现里面有你的多个 commit 历史，你可以通过 pick 选择，squash 合并等等。同样得，merge 的时候也可以这么干，你只需要这么简单的两步：</p><p></p>\n<p><ul></ul></p>\n<p><li>切换到目标分支：<code>git checkout master</code></li></p>\n<p><li>以 squash 的形式 merge：<code>git merge –squash devel</code></li><br></p>\n<p></p><p>你会发现，在 master 分支上居然有未提交的修改，然后你就需要在 master 上主动提交了修改，注意，这里是你 commit 的，也就是改变了 commit 的 author。结果是这样的：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101488495274.jpg\" alt></p><p></p>\n<p></p><p>这里好了，比前面普通的 merge 来说，我们只有一个 commit 了，不管在分支中 commit 了多少，这里都只有一个！</p><p></p>\n<p></p><h3 id=\"toc-4\">rebase merge</h3><p></p>\n<p></p><p>但是，作为处女座的程序员肯定是不能忍受目前的情况的，因为我们既想合并 commits，又想保留作者的信息，那么有没有什么好办法呢？肯定是有的啦，这个时候我们可以尝试一下 rebase，操作步骤是这样的：</p><p></p>\n<p><ul></ul></p>\n<p><li><strong>先切换到 devel 分支</strong>（不一样咯）：<code>git checkout devel</code></li></p>\n<p><li>变基：<code>git rebase -i master</code></li></p>\n<p><li>切换回目标分支：<code>git checkout master</code></li></p>\n<p><li>合并: <code>git merge devel</code></li><br></p>\n<p></p><p>这里完成了第二步之后我想你应该大概知道发生了什么事了，我们在 devel 里面对照 master 进行了变基，所谓的变基其实就是找到两个分支共同的祖先，然后在当前分支上合并从共同祖先到现在的所有 commit，所以我们在第二步的时候会选择怎么处理这些 commit，然后我们就得到了一个从公共commit 到现在的单个 commit，这个时候别人讲我们这个 commit 合并到 master 也只会在 master 上留下一个 commit 记录，就像这样：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101517152753.jpg\" alt></p><p></p>\n<p></p><p>虽然这个 commit history 线看上去很不错，而且也比较符合实际情况，但是我们需要注意到的有点就是分支上的开发者需要自己执行变基操作，从而导致他的原始 commit history 变化了（可以理解成被合并了）。</p><p></p>\n<p></p><h3 id=\"toc-5\">对比</h3><p></p>\n<p></p><p>相比一下前面三种方式，我们可以总结出一些东西：</p><p></p>\n<ol><br><li>rebase 可以尽可能保持 master 分支干净整洁，并且易于识别 author</li><br><li>squash 也可以保持 master 分支干净，但是 master 中 author 都是 maintainer，而不是原 owner</li><br><li>merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好</li><br></ol><br><p>所以，相比这么多，我是推荐使用 rebase 的，但是，当你在使用过程中，你会发现它的要求有点高，[/手动哭脸]</p><br><h3 id=\"toc-6\">Reference</h3><br><ol><br><li><a href=\"https://book.douban.com/subject/3420144/\" target=\"_blank\" rel=\"noopener\">Pro Git</a></li><br><li><a href=\"https://stackoverflow.com/questions/2427238/in-git-what-is-the-difference-between-merge-squash-and-rebase\" target=\"_blank\" rel=\"noopener\">In git, what is the difference between merge –squash and rebase?</a> </li><br></ol>","site":{"data":{}},"excerpt":"<h1 id=\"git-merge-的几种形式\"><a href=\"#git-merge-的几种形式\" class=\"headerlink\" title=\"git merge 的几种形式\"></a>git merge 的几种形式</h1><blockquote>\n<p>转载<a href=\"https://liuliqiang.info/post/difference-between-merge-squash-and-rebase\" target=\"_blank\" rel=\"noopener\">连接</a></p>\n</blockquote>\n<p><div class=\"post-content\"></div></p>\n<p></p><p>这几天我就遇到了一个问题，其实也不是遇到问题，而是遇到了疑惑，那就是我在 github 系统中 merge 同时的 PR 的时候发现有好几个选项，但是，却说不清楚这几个选项分别代表什么含义，所以就稍微花了点时间了解了下，顺带做个总结。</p><p></p>\n<p></p><h3 id=\"toc-0\">merge 的几种形式</h3><p></p>\n<p></p><p>在 merge pr 的时候，默认是有三种选项的，分别是</p><p></p>\n<p><ul></ul></p>\n<p><li>普通的 merge</li></p>\n<p><li>rebase merge</li></p>\n<p><li>squash merge</li><br></p>\n<p></p><p>这其实对应于我们在合并分支的时候的几种方式，所以我就以本地分支的形式来说说有啥区别。</p><p></p>\n<p></p><h3 id=\"toc-1\">一个简单的模型</h3><p></p>\n<p></p><p>假设我们一开始的 master 分支上已经有了几个提交，就像这样：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101468869266.jpg\" alt></p><p></p>\n<p></p><p>然后，我们切出一条开发的分支，进行了一些 Feature 的开发，然后我们的分支可能就是这种情况：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478786848.jpg\" alt></p><p></p>\n<p></p><p>这种情况还好，也比较常遇到，但是，现在问题来了，如果在这个时候 master 有了一些新提交（可能是其他分支合并进来的），那么这个时候情形就成了这样：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478014577.jpg\" alt></p><p></p>\n<p></p><p>这个情况很有趣，但是我们不讨论，因为这和我们今天的主题无关，以后可以另外开一个话题来说，今天要说的是第二个情况。</p><p></p>\n<p></p><h3 id=\"toc-2\">普通 Merge</h3><p></p>\n<p></p><p>说到合并分支，可能我们最熟悉的操作是这样的：</p><p></p>\n<p><ul></ul></p>\n<p><li>先切换到目标分支（master）</li></p>\n<p><li>执行命令：<code>git merge devel</code></li></p>\n<p><li>删除旧分支（可以在上面一同做）：<code>git branch -D devel</code></li><br>","more":"</p>\n<p><li>提交到远程分支：<code>git push origin master</code></li><br></p>\n<p></p><p>好像这样没啥问题的样子，但是这样操作之后，你知道结果是怎么样吗？假设合并之前的这样的：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101478786848.jpg\" alt=\"15101478786848\"></p><p></p>\n<p></p><p>我们这么一番操作之后，那么最后我们的分支的历史将会是这样的：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101481294797.jpg\" alt></p><p></p>\n<p></p><p>是的，看上去很不错，也是一条直直的 commit line，我们在 devel 分支中的 commit 也是一个不差得保留在了 master 中。但是，很多时候，我们并不需要那么多的 commit，假设你给一个开源项目提交一个 Bug Fixes，然后一个简单的修改因为你的粗心大意 pr 了十几个 commit 过去，如果作者给你 merge 了，这就在这个项目的历史长河中增加了十几个 commit 啊，以后的人看 commit history 估计都崩溃了吧；同时，对于你自己管理的项目来说，当你 merge 之后发现有问题，想回滚都蛋疼！</p><p></p>\n<p></p><h3 id=\"toc-3\">squash merge</h3><p></p>\n<p></p><p>在使用 git 的过程中，可能你遇到过想要合并多个 commit 为一个，然后很多人会告诉你用 <code>git commit –amend</code>，然后你发现里面有你的多个 commit 历史，你可以通过 pick 选择，squash 合并等等。同样得，merge 的时候也可以这么干，你只需要这么简单的两步：</p><p></p>\n<p><ul></ul></p>\n<p><li>切换到目标分支：<code>git checkout master</code></li></p>\n<p><li>以 squash 的形式 merge：<code>git merge –squash devel</code></li><br></p>\n<p></p><p>你会发现，在 master 分支上居然有未提交的修改，然后你就需要在 master 上主动提交了修改，注意，这里是你 commit 的，也就是改变了 commit 的 author。结果是这样的：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101488495274.jpg\" alt></p><p></p>\n<p></p><p>这里好了，比前面普通的 merge 来说，我们只有一个 commit 了，不管在分支中 commit 了多少，这里都只有一个！</p><p></p>\n<p></p><h3 id=\"toc-4\">rebase merge</h3><p></p>\n<p></p><p>但是，作为处女座的程序员肯定是不能忍受目前的情况的，因为我们既想合并 commits，又想保留作者的信息，那么有没有什么好办法呢？肯定是有的啦，这个时候我们可以尝试一下 rebase，操作步骤是这样的：</p><p></p>\n<p><ul></ul></p>\n<p><li><strong>先切换到 devel 分支</strong>（不一样咯）：<code>git checkout devel</code></li></p>\n<p><li>变基：<code>git rebase -i master</code></li></p>\n<p><li>切换回目标分支：<code>git checkout master</code></li></p>\n<p><li>合并: <code>git merge devel</code></li><br></p>\n<p></p><p>这里完成了第二步之后我想你应该大概知道发生了什么事了，我们在 devel 里面对照 master 进行了变基，所谓的变基其实就是找到两个分支共同的祖先，然后在当前分支上合并从共同祖先到现在的所有 commit，所以我们在第二步的时候会选择怎么处理这些 commit，然后我们就得到了一个从公共commit 到现在的单个 commit，这个时候别人讲我们这个 commit 合并到 master 也只会在 master 上留下一个 commit 记录，就像这样：</p><p></p>\n<p></p><p><img src=\"http://images.liuliqiang.info/2017-11-08-15101517152753.jpg\" alt></p><p></p>\n<p></p><p>虽然这个 commit history 线看上去很不错，而且也比较符合实际情况，但是我们需要注意到的有点就是分支上的开发者需要自己执行变基操作，从而导致他的原始 commit history 变化了（可以理解成被合并了）。</p><p></p>\n<p></p><h3 id=\"toc-5\">对比</h3><p></p>\n<p></p><p>相比一下前面三种方式，我们可以总结出一些东西：</p><p></p>\n<ol><br><li>rebase 可以尽可能保持 master 分支干净整洁，并且易于识别 author</li><br><li>squash 也可以保持 master 分支干净，但是 master 中 author 都是 maintainer，而不是原 owner</li><br><li>merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好</li><br></ol><br><p>所以，相比这么多，我是推荐使用 rebase 的，但是，当你在使用过程中，你会发现它的要求有点高，[/手动哭脸]</p><br><h3 id=\"toc-6\">Reference</h3><br><ol><br><li><a href=\"https://book.douban.com/subject/3420144/\" target=\"_blank\" rel=\"noopener\">Pro Git</a></li><br><li><a href=\"https://stackoverflow.com/questions/2427238/in-git-what-is-the-difference-between-merge-squash-and-rebase\" target=\"_blank\" rel=\"noopener\">In git, what is the difference between merge –squash and rebase?</a> </li><br></ol>"},{"title":"iTerm2插件git的缩写大全","_content":"### iTerm2插件git的缩写大全\n\n>  引用链接\nhttps://github.com/muwenzi/Program-Blog/issues/4\n\n## Aliases\n\n[完整版](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git)\n<!--more-->\n| Alias | Command |\n| :-- | :-- |\n| ga | git add |\n| 【gaa】 | git add --all |\n| gapa | git add --patch |\n| gb | git branch |\n| 【gba 】 | git branch -a |\n| gbr | git branch --remote |\n| 【gcam】 | git commit -a -m |\n| 【gcb】 | git checkout -b  新建一个开发分支myfeature |\n| gcf | git config --list |\n| gcl | git clone --recursive |\n| 【gcm】 | git checkout master |\n| gcmsg | git commit -m |\n| 【gco】 | git checkout |\n| gcs | git commit -S |\n| gd | git diff |\n| gdca | git diff --cached |\n| gdt | git diff-tree --no-commit-id --name-only -r |\n| gdw | git diff --word-diff |\n| gf | git fetch |\n| gfa | git fetch --all --prune |\n| gfo | git fetch origin |\n| gg | git gui citool |\n| gga | git gui citool --amend |\n| ggpull | ggl |\n| ggpur | ggu |\n| ggsup | git branch --set-upstream-to = origin/$(current_branch) |\n| gpsup | git push --set-upstream origin $(current_branch) |\n| 【gl 】 | git pull |\n| glo | git log --oneline --decorate --color |\n| 【 glol 】 | git log --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit |\n| glola | git log --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all |\n| gm | git merge |\n| gmom | git merge origin/master |\n| gmt | git mergetool --no-prompt |\n| gmtvim | git mergetool --no-prompt --tool = vimdiff |\n| gmum | git merge upstream/master |\n| 【gp  】 | git push |\n| gpd | git push --dry-run |\n| gpoat | git push origin --all && git push origin --tags |\n| gpu | git push upstream |\n| gpv | git push -v |\n| gr | git remote |\n| gra | git remote add |\n| grb | git rebase |\n| grba | git rebase --abort |\n| grbc | git rebase --continue |\n| grbi | git rebase -i |\n| grbm | git rebase master |\n| grbs | git rebase --skip |\n| grh | git reset HEAD |\n| grhh | git reset HEAD --hard |\n| grmv | git remote rename |\n| grrm | git remote remove |\n| grset | git remote set-url |\n| gru | git reset -- |\n| grup | git remote update |\n| grv | git remote -v |\n| gsb | git status -sb |\n| gss | git status -s |\n| 【gst】 | git status |\n| gsta | git stash |\n| gstaa | git stash apply |\n| gstd | git stash drop |\n| gstl | git stash list |\n| gstp | git stash pop |\n| gsts | git stash show --text |\n| gsu | git submodule update |\n| gts | git tag -s |\n| gunignore | git update-index --no-assume-unchanged |\n| gup | git pull --rebase |\n| gupv | git pull --rebase -v |\n| glum | git pull upstream master |\n| gvt | git verify-tag |\n| gwch | git whatchanged -p --abbrev-commit --pretty = medium |\n| gwip | git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit -m \"--wip--\" |\n## Deprecated Aliases\n\nThese are aliases that have been removed, renamed, or otherwise modified in a way that may, or may not, receive further support.\n\n| Alias | Command | Modification |\n| :-- | :-- | --- |\n| gap | git add --patch | new alias `gapa` |\n| gcl | git config --list | new alias `gcf` |\n| gdc | git diff --cached | new alias `gdca` |\n| gdt | git difftool | no replacement |\n| ggpur | git pull --rebase origin $(current_branch) | new alias `ggu` (`ggpur` still exists for now though) |\n| ggpush | git push origin $(current_branch) | new alias `ggp` (`ggpush` still exists for now though) |\n| gk | gitk --all --branches | now aliased to `\\gitk --all --branches` |\n| glg | git log --stat --max-count = 10 | now aliased to `git log --stat --color` |\n| glgg | git log --graph --max-count = 10 | now aliased to `git log --graph --color` |\n| gwc | git whatchanged -p --abbrev-commit --pretty = medium | new alias `gwch` |\n| gwip | git add -A; git ls-files --deleted -z | xargs -r0 git rm; git commit -m \"--wip--\" | now aliased to `git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit -m \"--wip--\"` |\n## Functions\n### Current\n\n| Command | Description |\n| :-- | :-- |\n| current_branch | Return the name of the current branch |\n| current_repository | Return the names of the current remotes |\n| git_current_user_name | Returns the `user.name` config value |\n| git_current_user_email | Returns the `user.email` config value |\n","source":"_posts/git在zash中的缩写.md","raw":"---\ntitle: iTerm2插件git的缩写大全\ntags: \n- Git\n---\n### iTerm2插件git的缩写大全\n\n>  引用链接\nhttps://github.com/muwenzi/Program-Blog/issues/4\n\n## Aliases\n\n[完整版](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git)\n<!--more-->\n| Alias | Command |\n| :-- | :-- |\n| ga | git add |\n| 【gaa】 | git add --all |\n| gapa | git add --patch |\n| gb | git branch |\n| 【gba 】 | git branch -a |\n| gbr | git branch --remote |\n| 【gcam】 | git commit -a -m |\n| 【gcb】 | git checkout -b  新建一个开发分支myfeature |\n| gcf | git config --list |\n| gcl | git clone --recursive |\n| 【gcm】 | git checkout master |\n| gcmsg | git commit -m |\n| 【gco】 | git checkout |\n| gcs | git commit -S |\n| gd | git diff |\n| gdca | git diff --cached |\n| gdt | git diff-tree --no-commit-id --name-only -r |\n| gdw | git diff --word-diff |\n| gf | git fetch |\n| gfa | git fetch --all --prune |\n| gfo | git fetch origin |\n| gg | git gui citool |\n| gga | git gui citool --amend |\n| ggpull | ggl |\n| ggpur | ggu |\n| ggsup | git branch --set-upstream-to = origin/$(current_branch) |\n| gpsup | git push --set-upstream origin $(current_branch) |\n| 【gl 】 | git pull |\n| glo | git log --oneline --decorate --color |\n| 【 glol 】 | git log --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit |\n| glola | git log --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all |\n| gm | git merge |\n| gmom | git merge origin/master |\n| gmt | git mergetool --no-prompt |\n| gmtvim | git mergetool --no-prompt --tool = vimdiff |\n| gmum | git merge upstream/master |\n| 【gp  】 | git push |\n| gpd | git push --dry-run |\n| gpoat | git push origin --all && git push origin --tags |\n| gpu | git push upstream |\n| gpv | git push -v |\n| gr | git remote |\n| gra | git remote add |\n| grb | git rebase |\n| grba | git rebase --abort |\n| grbc | git rebase --continue |\n| grbi | git rebase -i |\n| grbm | git rebase master |\n| grbs | git rebase --skip |\n| grh | git reset HEAD |\n| grhh | git reset HEAD --hard |\n| grmv | git remote rename |\n| grrm | git remote remove |\n| grset | git remote set-url |\n| gru | git reset -- |\n| grup | git remote update |\n| grv | git remote -v |\n| gsb | git status -sb |\n| gss | git status -s |\n| 【gst】 | git status |\n| gsta | git stash |\n| gstaa | git stash apply |\n| gstd | git stash drop |\n| gstl | git stash list |\n| gstp | git stash pop |\n| gsts | git stash show --text |\n| gsu | git submodule update |\n| gts | git tag -s |\n| gunignore | git update-index --no-assume-unchanged |\n| gup | git pull --rebase |\n| gupv | git pull --rebase -v |\n| glum | git pull upstream master |\n| gvt | git verify-tag |\n| gwch | git whatchanged -p --abbrev-commit --pretty = medium |\n| gwip | git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit -m \"--wip--\" |\n## Deprecated Aliases\n\nThese are aliases that have been removed, renamed, or otherwise modified in a way that may, or may not, receive further support.\n\n| Alias | Command | Modification |\n| :-- | :-- | --- |\n| gap | git add --patch | new alias `gapa` |\n| gcl | git config --list | new alias `gcf` |\n| gdc | git diff --cached | new alias `gdca` |\n| gdt | git difftool | no replacement |\n| ggpur | git pull --rebase origin $(current_branch) | new alias `ggu` (`ggpur` still exists for now though) |\n| ggpush | git push origin $(current_branch) | new alias `ggp` (`ggpush` still exists for now though) |\n| gk | gitk --all --branches | now aliased to `\\gitk --all --branches` |\n| glg | git log --stat --max-count = 10 | now aliased to `git log --stat --color` |\n| glgg | git log --graph --max-count = 10 | now aliased to `git log --graph --color` |\n| gwc | git whatchanged -p --abbrev-commit --pretty = medium | new alias `gwch` |\n| gwip | git add -A; git ls-files --deleted -z | xargs -r0 git rm; git commit -m \"--wip--\" | now aliased to `git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit -m \"--wip--\"` |\n## Functions\n### Current\n\n| Command | Description |\n| :-- | :-- |\n| current_branch | Return the name of the current branch |\n| current_repository | Return the names of the current remotes |\n| git_current_user_name | Returns the `user.name` config value |\n| git_current_user_email | Returns the `user.email` config value |\n","slug":"git在zash中的缩写","published":1,"date":"2019-12-19T15:52:56.142Z","updated":"2019-12-19T15:52:56.142Z","_id":"ck4cwgni40014ckuksrs3hk8d","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"iTerm2插件git的缩写大全\"><a href=\"#iTerm2插件git的缩写大全\" class=\"headerlink\" title=\"iTerm2插件git的缩写大全\"></a>iTerm2插件git的缩写大全</h3><blockquote>\n<p> 引用链接<br><a href=\"https://github.com/muwenzi/Program-Blog/issues/4\" target=\"_blank\" rel=\"noopener\">https://github.com/muwenzi/Program-Blog/issues/4</a></p>\n</blockquote>\n<h2 id=\"Aliases\"><a href=\"#Aliases\" class=\"headerlink\" title=\"Aliases\"></a>Aliases</h2><p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\" target=\"_blank\" rel=\"noopener\">完整版</a><br><a id=\"more\"></a><br>| Alias | Command |<br>| :– | :– |<br>| ga | git add |<br>| 【gaa】 | git add –all |<br>| gapa | git add –patch |<br>| gb | git branch |<br>| 【gba 】 | git branch -a |<br>| gbr | git branch –remote |<br>| 【gcam】 | git commit -a -m |<br>| 【gcb】 | git checkout -b  新建一个开发分支myfeature |<br>| gcf | git config –list |<br>| gcl | git clone –recursive |<br>| 【gcm】 | git checkout master |<br>| gcmsg | git commit -m |<br>| 【gco】 | git checkout |<br>| gcs | git commit -S |<br>| gd | git diff |<br>| gdca | git diff –cached |<br>| gdt | git diff-tree –no-commit-id –name-only -r |<br>| gdw | git diff –word-diff |<br>| gf | git fetch |<br>| gfa | git fetch –all –prune |<br>| gfo | git fetch origin |<br>| gg | git gui citool |<br>| gga | git gui citool –amend |<br>| ggpull | ggl |<br>| ggpur | ggu |<br>| ggsup | git branch –set-upstream-to = origin/$(current_branch) |<br>| gpsup | git push –set-upstream origin $(current_branch) |<br>| 【gl 】 | git pull |<br>| glo | git log –oneline –decorate –color |<br>| 【 glol 】 | git log –graph –pretty = format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit |<br>| glola | git log –graph –pretty = format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit –all |<br>| gm | git merge |<br>| gmom | git merge origin/master |<br>| gmt | git mergetool –no-prompt |<br>| gmtvim | git mergetool –no-prompt –tool = vimdiff |<br>| gmum | git merge upstream/master |<br>| 【gp  】 | git push |<br>| gpd | git push –dry-run |<br>| gpoat | git push origin –all &amp;&amp; git push origin –tags |<br>| gpu | git push upstream |<br>| gpv | git push -v |<br>| gr | git remote |<br>| gra | git remote add |<br>| grb | git rebase |<br>| grba | git rebase –abort |<br>| grbc | git rebase –continue |<br>| grbi | git rebase -i |<br>| grbm | git rebase master |<br>| grbs | git rebase –skip |<br>| grh | git reset HEAD |<br>| grhh | git reset HEAD –hard |<br>| grmv | git remote rename |<br>| grrm | git remote remove |<br>| grset | git remote set-url |<br>| gru | git reset – |<br>| grup | git remote update |<br>| grv | git remote -v |<br>| gsb | git status -sb |<br>| gss | git status -s |<br>| 【gst】 | git status |<br>| gsta | git stash |<br>| gstaa | git stash apply |<br>| gstd | git stash drop |<br>| gstl | git stash list |<br>| gstp | git stash pop |<br>| gsts | git stash show –text |<br>| gsu | git submodule update |<br>| gts | git tag -s |<br>| gunignore | git update-index –no-assume-unchanged |<br>| gup | git pull –rebase |<br>| gupv | git pull –rebase -v |<br>| glum | git pull upstream master |<br>| gvt | git verify-tag |<br>| gwch | git whatchanged -p –abbrev-commit –pretty = medium |<br>| gwip | git add -A; git rm $(git ls-files –deleted) 2&gt; /dev/null; git commit -m “–wip–” |</p>\n<h2 id=\"Deprecated-Aliases\"><a href=\"#Deprecated-Aliases\" class=\"headerlink\" title=\"Deprecated Aliases\"></a>Deprecated Aliases</h2><p>These are aliases that have been removed, renamed, or otherwise modified in a way that may, or may not, receive further support.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Alias</th>\n<th style=\"text-align:left\">Command</th>\n<th>Modification</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">gap</td>\n<td style=\"text-align:left\">git add –patch</td>\n<td>new alias <code>gapa</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gcl</td>\n<td style=\"text-align:left\">git config –list</td>\n<td>new alias <code>gcf</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gdc</td>\n<td style=\"text-align:left\">git diff –cached</td>\n<td>new alias <code>gdca</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gdt</td>\n<td style=\"text-align:left\">git difftool</td>\n<td>no replacement</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ggpur</td>\n<td style=\"text-align:left\">git pull –rebase origin $(current_branch)</td>\n<td>new alias <code>ggu</code> (<code>ggpur</code> still exists for now though)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ggpush</td>\n<td style=\"text-align:left\">git push origin $(current_branch)</td>\n<td>new alias <code>ggp</code> (<code>ggpush</code> still exists for now though)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gk</td>\n<td style=\"text-align:left\">gitk –all –branches</td>\n<td>now aliased to <code>\\gitk --all --branches</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">glg</td>\n<td style=\"text-align:left\">git log –stat –max-count = 10</td>\n<td>now aliased to <code>git log --stat --color</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">glgg</td>\n<td style=\"text-align:left\">git log –graph –max-count = 10</td>\n<td>now aliased to <code>git log --graph --color</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gwc</td>\n<td style=\"text-align:left\">git whatchanged -p –abbrev-commit –pretty = medium</td>\n<td>new alias <code>gwch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gwip</td>\n<td style=\"text-align:left\">git add -A; git ls-files –deleted -z</td>\n<td>xargs -r0 git rm; git commit -m “–wip–”</td>\n<td>now aliased to <code>git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit -m &quot;--wip--&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h2><h3 id=\"Current\"><a href=\"#Current\" class=\"headerlink\" title=\"Current\"></a>Current</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Command</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">current_branch</td>\n<td style=\"text-align:left\">Return the name of the current branch</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">current_repository</td>\n<td style=\"text-align:left\">Return the names of the current remotes</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">git_current_user_name</td>\n<td style=\"text-align:left\">Returns the <code>user.name</code> config value</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">git_current_user_email</td>\n<td style=\"text-align:left\">Returns the <code>user.email</code> config value</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h3 id=\"iTerm2插件git的缩写大全\"><a href=\"#iTerm2插件git的缩写大全\" class=\"headerlink\" title=\"iTerm2插件git的缩写大全\"></a>iTerm2插件git的缩写大全</h3><blockquote>\n<p> 引用链接<br><a href=\"https://github.com/muwenzi/Program-Blog/issues/4\" target=\"_blank\" rel=\"noopener\">https://github.com/muwenzi/Program-Blog/issues/4</a></p>\n</blockquote>\n<h2 id=\"Aliases\"><a href=\"#Aliases\" class=\"headerlink\" title=\"Aliases\"></a>Aliases</h2><p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\" target=\"_blank\" rel=\"noopener\">完整版</a><br>","more":"<br>| Alias | Command |<br>| :– | :– |<br>| ga | git add |<br>| 【gaa】 | git add –all |<br>| gapa | git add –patch |<br>| gb | git branch |<br>| 【gba 】 | git branch -a |<br>| gbr | git branch –remote |<br>| 【gcam】 | git commit -a -m |<br>| 【gcb】 | git checkout -b  新建一个开发分支myfeature |<br>| gcf | git config –list |<br>| gcl | git clone –recursive |<br>| 【gcm】 | git checkout master |<br>| gcmsg | git commit -m |<br>| 【gco】 | git checkout |<br>| gcs | git commit -S |<br>| gd | git diff |<br>| gdca | git diff –cached |<br>| gdt | git diff-tree –no-commit-id –name-only -r |<br>| gdw | git diff –word-diff |<br>| gf | git fetch |<br>| gfa | git fetch –all –prune |<br>| gfo | git fetch origin |<br>| gg | git gui citool |<br>| gga | git gui citool –amend |<br>| ggpull | ggl |<br>| ggpur | ggu |<br>| ggsup | git branch –set-upstream-to = origin/$(current_branch) |<br>| gpsup | git push –set-upstream origin $(current_branch) |<br>| 【gl 】 | git pull |<br>| glo | git log –oneline –decorate –color |<br>| 【 glol 】 | git log –graph –pretty = format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit |<br>| glola | git log –graph –pretty = format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit –all |<br>| gm | git merge |<br>| gmom | git merge origin/master |<br>| gmt | git mergetool –no-prompt |<br>| gmtvim | git mergetool –no-prompt –tool = vimdiff |<br>| gmum | git merge upstream/master |<br>| 【gp  】 | git push |<br>| gpd | git push –dry-run |<br>| gpoat | git push origin –all &amp;&amp; git push origin –tags |<br>| gpu | git push upstream |<br>| gpv | git push -v |<br>| gr | git remote |<br>| gra | git remote add |<br>| grb | git rebase |<br>| grba | git rebase –abort |<br>| grbc | git rebase –continue |<br>| grbi | git rebase -i |<br>| grbm | git rebase master |<br>| grbs | git rebase –skip |<br>| grh | git reset HEAD |<br>| grhh | git reset HEAD –hard |<br>| grmv | git remote rename |<br>| grrm | git remote remove |<br>| grset | git remote set-url |<br>| gru | git reset – |<br>| grup | git remote update |<br>| grv | git remote -v |<br>| gsb | git status -sb |<br>| gss | git status -s |<br>| 【gst】 | git status |<br>| gsta | git stash |<br>| gstaa | git stash apply |<br>| gstd | git stash drop |<br>| gstl | git stash list |<br>| gstp | git stash pop |<br>| gsts | git stash show –text |<br>| gsu | git submodule update |<br>| gts | git tag -s |<br>| gunignore | git update-index –no-assume-unchanged |<br>| gup | git pull –rebase |<br>| gupv | git pull –rebase -v |<br>| glum | git pull upstream master |<br>| gvt | git verify-tag |<br>| gwch | git whatchanged -p –abbrev-commit –pretty = medium |<br>| gwip | git add -A; git rm $(git ls-files –deleted) 2&gt; /dev/null; git commit -m “–wip–” |</p>\n<h2 id=\"Deprecated-Aliases\"><a href=\"#Deprecated-Aliases\" class=\"headerlink\" title=\"Deprecated Aliases\"></a>Deprecated Aliases</h2><p>These are aliases that have been removed, renamed, or otherwise modified in a way that may, or may not, receive further support.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Alias</th>\n<th style=\"text-align:left\">Command</th>\n<th>Modification</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">gap</td>\n<td style=\"text-align:left\">git add –patch</td>\n<td>new alias <code>gapa</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gcl</td>\n<td style=\"text-align:left\">git config –list</td>\n<td>new alias <code>gcf</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gdc</td>\n<td style=\"text-align:left\">git diff –cached</td>\n<td>new alias <code>gdca</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gdt</td>\n<td style=\"text-align:left\">git difftool</td>\n<td>no replacement</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ggpur</td>\n<td style=\"text-align:left\">git pull –rebase origin $(current_branch)</td>\n<td>new alias <code>ggu</code> (<code>ggpur</code> still exists for now though)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ggpush</td>\n<td style=\"text-align:left\">git push origin $(current_branch)</td>\n<td>new alias <code>ggp</code> (<code>ggpush</code> still exists for now though)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gk</td>\n<td style=\"text-align:left\">gitk –all –branches</td>\n<td>now aliased to <code>\\gitk --all --branches</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">glg</td>\n<td style=\"text-align:left\">git log –stat –max-count = 10</td>\n<td>now aliased to <code>git log --stat --color</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">glgg</td>\n<td style=\"text-align:left\">git log –graph –max-count = 10</td>\n<td>now aliased to <code>git log --graph --color</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gwc</td>\n<td style=\"text-align:left\">git whatchanged -p –abbrev-commit –pretty = medium</td>\n<td>new alias <code>gwch</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gwip</td>\n<td style=\"text-align:left\">git add -A; git ls-files –deleted -z</td>\n<td>xargs -r0 git rm; git commit -m “–wip–”</td>\n<td>now aliased to <code>git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit -m &quot;--wip--&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h2><h3 id=\"Current\"><a href=\"#Current\" class=\"headerlink\" title=\"Current\"></a>Current</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Command</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">current_branch</td>\n<td style=\"text-align:left\">Return the name of the current branch</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">current_repository</td>\n<td style=\"text-align:left\">Return the names of the current remotes</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">git_current_user_name</td>\n<td style=\"text-align:left\">Returns the <code>user.name</code> config value</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">git_current_user_email</td>\n<td style=\"text-align:left\">Returns the <code>user.email</code> config value</td>\n</tr>\n</tbody>\n</table>"},{"title":"git常用命令","_content":"### git常用操作\n\n<!--more-->\n\n```\n新建文件： mkdir git-test \n初始化git:    git init\n查看隐藏目录： ls -a \n\n版本回退：（git commit -m \"xxx\"）\ngit log  查看提交的文件日志\ngit reset --hard Head^ : 返回上次修改的部分，^^上上次提交的位置\ngit reset --hard 版本号前几位         返回到上次的某个版本\ngit reflog 当回到某个版本，又后悔了，想回到之前的那个版本 找到版本id 用上个语句返回\neg: git reset --hard HEAD@{1}\n\ncat readme.txt 查看文本内容\n\n撤销修改：\n没有提交到暂存区：\ngit checkout -- readme.txt 撤销对文本的修改（本质是使用版本库中的内容覆盖到工作区）\n\n提交到暂存区后撤销：（git add readme.txt）\n将暂存区的修改撤销，重新放到工作区\ngit reset  HEAD readme.txt\ngit checkout -- reademe.txt 撤销修改\n\n提交到版本库(git commit -m \"hehh\") \n参考版本回退\n\n删除内容：\n删除工作区文件 rm test.txt\n删除后悔可以用 git checkout -- reademe.txt 从版本库恢复\n删除版本库中\ngit  rm test.txt （彻底删除）\n\ngit commit -m \"remove test.txt \"\n\n创建gitHub项目，建立连接\n将本地从仓库和在gitHub上新建的库连接起来 new Repository -->获得SSH\ngit remote add origin git@github.com:USTC-Han/git-test.git\n将本地仓库推到远程库git push -u origin master (首次)\n以后向同一地方提交：git push origin master \n\n从远程仓库到本地：\ngit clone git@github.com:USTC-Han/git-test.git\n\n分支：\n查看分枝：git branch\n创建分支：git branch  <name>\n切换分支：git checkout <name>\n创建并切换分支： git checkout -b <name>\n合并某分支到当前的分支：git merge <name>\n删除分支：git branch -d <name>\n\n将其它分支上的commit 内容倒到另外分支上；\ngit cherry-pick 版本号\ngit push \n\n修改commit 描述：git commit --amend \n\n删除远端某个commit: git reset --hard <版本号>\n// 注意使用 --hard 参数会抛弃当前工作区的修改\n// 使用 --soft 参数的话会回退到之前的版本，但是保留当前工作区的修改，可以重新提交\ngit push origin <分支名>\n报错后强推到远端\ngit push origin <分支名> --force\n\n删除远端分支：\ngb -r 查看远端分支\ngb -r -d origin/分支名\ngit push origin :分支名\n```\n","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ntags: \n- Git\n---\n### git常用操作\n\n<!--more-->\n\n```\n新建文件： mkdir git-test \n初始化git:    git init\n查看隐藏目录： ls -a \n\n版本回退：（git commit -m \"xxx\"）\ngit log  查看提交的文件日志\ngit reset --hard Head^ : 返回上次修改的部分，^^上上次提交的位置\ngit reset --hard 版本号前几位         返回到上次的某个版本\ngit reflog 当回到某个版本，又后悔了，想回到之前的那个版本 找到版本id 用上个语句返回\neg: git reset --hard HEAD@{1}\n\ncat readme.txt 查看文本内容\n\n撤销修改：\n没有提交到暂存区：\ngit checkout -- readme.txt 撤销对文本的修改（本质是使用版本库中的内容覆盖到工作区）\n\n提交到暂存区后撤销：（git add readme.txt）\n将暂存区的修改撤销，重新放到工作区\ngit reset  HEAD readme.txt\ngit checkout -- reademe.txt 撤销修改\n\n提交到版本库(git commit -m \"hehh\") \n参考版本回退\n\n删除内容：\n删除工作区文件 rm test.txt\n删除后悔可以用 git checkout -- reademe.txt 从版本库恢复\n删除版本库中\ngit  rm test.txt （彻底删除）\n\ngit commit -m \"remove test.txt \"\n\n创建gitHub项目，建立连接\n将本地从仓库和在gitHub上新建的库连接起来 new Repository -->获得SSH\ngit remote add origin git@github.com:USTC-Han/git-test.git\n将本地仓库推到远程库git push -u origin master (首次)\n以后向同一地方提交：git push origin master \n\n从远程仓库到本地：\ngit clone git@github.com:USTC-Han/git-test.git\n\n分支：\n查看分枝：git branch\n创建分支：git branch  <name>\n切换分支：git checkout <name>\n创建并切换分支： git checkout -b <name>\n合并某分支到当前的分支：git merge <name>\n删除分支：git branch -d <name>\n\n将其它分支上的commit 内容倒到另外分支上；\ngit cherry-pick 版本号\ngit push \n\n修改commit 描述：git commit --amend \n\n删除远端某个commit: git reset --hard <版本号>\n// 注意使用 --hard 参数会抛弃当前工作区的修改\n// 使用 --soft 参数的话会回退到之前的版本，但是保留当前工作区的修改，可以重新提交\ngit push origin <分支名>\n报错后强推到远端\ngit push origin <分支名> --force\n\n删除远端分支：\ngb -r 查看远端分支\ngb -r -d origin/分支名\ngit push origin :分支名\n```\n","slug":"git常用命令","published":1,"date":"2019-12-19T15:52:56.142Z","updated":"2019-12-19T15:52:56.142Z","_id":"ck4cwgni50016ckukdxchzw5g","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"git常用操作\"><a href=\"#git常用操作\" class=\"headerlink\" title=\"git常用操作\"></a>git常用操作</h3><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新建文件： mkdir git-test </span><br><span class=\"line\">初始化git:    git init</span><br><span class=\"line\">查看隐藏目录： ls -a </span><br><span class=\"line\"></span><br><span class=\"line\">版本回退：（git commit -m &quot;xxx&quot;）</span><br><span class=\"line\">git log  查看提交的文件日志</span><br><span class=\"line\">git reset --hard Head^ : 返回上次修改的部分，^^上上次提交的位置</span><br><span class=\"line\">git reset --hard 版本号前几位         返回到上次的某个版本</span><br><span class=\"line\">git reflog 当回到某个版本，又后悔了，想回到之前的那个版本 找到版本id 用上个语句返回</span><br><span class=\"line\">eg: git reset --hard HEAD@&#123;1&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cat readme.txt 查看文本内容</span><br><span class=\"line\"></span><br><span class=\"line\">撤销修改：</span><br><span class=\"line\">没有提交到暂存区：</span><br><span class=\"line\">git checkout -- readme.txt 撤销对文本的修改（本质是使用版本库中的内容覆盖到工作区）</span><br><span class=\"line\"></span><br><span class=\"line\">提交到暂存区后撤销：（git add readme.txt）</span><br><span class=\"line\">将暂存区的修改撤销，重新放到工作区</span><br><span class=\"line\">git reset  HEAD readme.txt</span><br><span class=\"line\">git checkout -- reademe.txt 撤销修改</span><br><span class=\"line\"></span><br><span class=\"line\">提交到版本库(git commit -m &quot;hehh&quot;) </span><br><span class=\"line\">参考版本回退</span><br><span class=\"line\"></span><br><span class=\"line\">删除内容：</span><br><span class=\"line\">删除工作区文件 rm test.txt</span><br><span class=\"line\">删除后悔可以用 git checkout -- reademe.txt 从版本库恢复</span><br><span class=\"line\">删除版本库中</span><br><span class=\"line\">git  rm test.txt （彻底删除）</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;remove test.txt &quot;</span><br><span class=\"line\"></span><br><span class=\"line\">创建gitHub项目，建立连接</span><br><span class=\"line\">将本地从仓库和在gitHub上新建的库连接起来 new Repository --&gt;获得SSH</span><br><span class=\"line\">git remote add origin git@github.com:USTC-Han/git-test.git</span><br><span class=\"line\">将本地仓库推到远程库git push -u origin master (首次)</span><br><span class=\"line\">以后向同一地方提交：git push origin master </span><br><span class=\"line\"></span><br><span class=\"line\">从远程仓库到本地：</span><br><span class=\"line\">git clone git@github.com:USTC-Han/git-test.git</span><br><span class=\"line\"></span><br><span class=\"line\">分支：</span><br><span class=\"line\">查看分枝：git branch</span><br><span class=\"line\">创建分支：git branch  &lt;name&gt;</span><br><span class=\"line\">切换分支：git checkout &lt;name&gt;</span><br><span class=\"line\">创建并切换分支： git checkout -b &lt;name&gt;</span><br><span class=\"line\">合并某分支到当前的分支：git merge &lt;name&gt;</span><br><span class=\"line\">删除分支：git branch -d &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">将其它分支上的commit 内容倒到另外分支上；</span><br><span class=\"line\">git cherry-pick 版本号</span><br><span class=\"line\">git push </span><br><span class=\"line\"></span><br><span class=\"line\">修改commit 描述：git commit --amend </span><br><span class=\"line\"></span><br><span class=\"line\">删除远端某个commit: git reset --hard &lt;版本号&gt;</span><br><span class=\"line\">// 注意使用 --hard 参数会抛弃当前工作区的修改</span><br><span class=\"line\">// 使用 --soft 参数的话会回退到之前的版本，但是保留当前工作区的修改，可以重新提交</span><br><span class=\"line\">git push origin &lt;分支名&gt;</span><br><span class=\"line\">报错后强推到远端</span><br><span class=\"line\">git push origin &lt;分支名&gt; --force</span><br><span class=\"line\"></span><br><span class=\"line\">删除远端分支：</span><br><span class=\"line\">gb -r 查看远端分支</span><br><span class=\"line\">gb -r -d origin/分支名</span><br><span class=\"line\">git push origin :分支名</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"git常用操作\"><a href=\"#git常用操作\" class=\"headerlink\" title=\"git常用操作\"></a>git常用操作</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新建文件： mkdir git-test </span><br><span class=\"line\">初始化git:    git init</span><br><span class=\"line\">查看隐藏目录： ls -a </span><br><span class=\"line\"></span><br><span class=\"line\">版本回退：（git commit -m &quot;xxx&quot;）</span><br><span class=\"line\">git log  查看提交的文件日志</span><br><span class=\"line\">git reset --hard Head^ : 返回上次修改的部分，^^上上次提交的位置</span><br><span class=\"line\">git reset --hard 版本号前几位         返回到上次的某个版本</span><br><span class=\"line\">git reflog 当回到某个版本，又后悔了，想回到之前的那个版本 找到版本id 用上个语句返回</span><br><span class=\"line\">eg: git reset --hard HEAD@&#123;1&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cat readme.txt 查看文本内容</span><br><span class=\"line\"></span><br><span class=\"line\">撤销修改：</span><br><span class=\"line\">没有提交到暂存区：</span><br><span class=\"line\">git checkout -- readme.txt 撤销对文本的修改（本质是使用版本库中的内容覆盖到工作区）</span><br><span class=\"line\"></span><br><span class=\"line\">提交到暂存区后撤销：（git add readme.txt）</span><br><span class=\"line\">将暂存区的修改撤销，重新放到工作区</span><br><span class=\"line\">git reset  HEAD readme.txt</span><br><span class=\"line\">git checkout -- reademe.txt 撤销修改</span><br><span class=\"line\"></span><br><span class=\"line\">提交到版本库(git commit -m &quot;hehh&quot;) </span><br><span class=\"line\">参考版本回退</span><br><span class=\"line\"></span><br><span class=\"line\">删除内容：</span><br><span class=\"line\">删除工作区文件 rm test.txt</span><br><span class=\"line\">删除后悔可以用 git checkout -- reademe.txt 从版本库恢复</span><br><span class=\"line\">删除版本库中</span><br><span class=\"line\">git  rm test.txt （彻底删除）</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;remove test.txt &quot;</span><br><span class=\"line\"></span><br><span class=\"line\">创建gitHub项目，建立连接</span><br><span class=\"line\">将本地从仓库和在gitHub上新建的库连接起来 new Repository --&gt;获得SSH</span><br><span class=\"line\">git remote add origin git@github.com:USTC-Han/git-test.git</span><br><span class=\"line\">将本地仓库推到远程库git push -u origin master (首次)</span><br><span class=\"line\">以后向同一地方提交：git push origin master </span><br><span class=\"line\"></span><br><span class=\"line\">从远程仓库到本地：</span><br><span class=\"line\">git clone git@github.com:USTC-Han/git-test.git</span><br><span class=\"line\"></span><br><span class=\"line\">分支：</span><br><span class=\"line\">查看分枝：git branch</span><br><span class=\"line\">创建分支：git branch  &lt;name&gt;</span><br><span class=\"line\">切换分支：git checkout &lt;name&gt;</span><br><span class=\"line\">创建并切换分支： git checkout -b &lt;name&gt;</span><br><span class=\"line\">合并某分支到当前的分支：git merge &lt;name&gt;</span><br><span class=\"line\">删除分支：git branch -d &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">将其它分支上的commit 内容倒到另外分支上；</span><br><span class=\"line\">git cherry-pick 版本号</span><br><span class=\"line\">git push </span><br><span class=\"line\"></span><br><span class=\"line\">修改commit 描述：git commit --amend </span><br><span class=\"line\"></span><br><span class=\"line\">删除远端某个commit: git reset --hard &lt;版本号&gt;</span><br><span class=\"line\">// 注意使用 --hard 参数会抛弃当前工作区的修改</span><br><span class=\"line\">// 使用 --soft 参数的话会回退到之前的版本，但是保留当前工作区的修改，可以重新提交</span><br><span class=\"line\">git push origin &lt;分支名&gt;</span><br><span class=\"line\">报错后强推到远端</span><br><span class=\"line\">git push origin &lt;分支名&gt; --force</span><br><span class=\"line\"></span><br><span class=\"line\">删除远端分支：</span><br><span class=\"line\">gb -r 查看远端分支</span><br><span class=\"line\">gb -r -d origin/分支名</span><br><span class=\"line\">git push origin :分支名</span><br></pre></td></tr></table></figure>"},{"title":"http缓存","_content":"[链接一](https://juejin.im/post/5b3c87386fb9a04f9a5cb037#heading-3)\n[链接二](https://juejin.im/post/5a1d4e546fb9a0450f21af23)\n[链接三](https://excaliburhan.com/post/things-you-should-know-about-browser-cache.html)","source":"_posts/http缓存.md","raw":"---\ntitle: http缓存\ntags: \n- Web\n- http 缓存\n---\n[链接一](https://juejin.im/post/5b3c87386fb9a04f9a5cb037#heading-3)\n[链接二](https://juejin.im/post/5a1d4e546fb9a0450f21af23)\n[链接三](https://excaliburhan.com/post/things-you-should-know-about-browser-cache.html)","slug":"http缓存","published":1,"date":"2019-12-19T15:52:56.142Z","updated":"2019-12-19T15:52:56.143Z","_id":"ck4cwgni60018ckukvckry13g","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://juejin.im/post/5b3c87386fb9a04f9a5cb037#heading-3\" target=\"_blank\" rel=\"noopener\">链接一</a><br><a href=\"https://juejin.im/post/5a1d4e546fb9a0450f21af23\" target=\"_blank\" rel=\"noopener\">链接二</a><br><a href=\"https://excaliburhan.com/post/things-you-should-know-about-browser-cache.html\" target=\"_blank\" rel=\"noopener\">链接三</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://juejin.im/post/5b3c87386fb9a04f9a5cb037#heading-3\" target=\"_blank\" rel=\"noopener\">链接一</a><br><a href=\"https://juejin.im/post/5a1d4e546fb9a0450f21af23\" target=\"_blank\" rel=\"noopener\">链接二</a><br><a href=\"https://excaliburhan.com/post/things-you-should-know-about-browser-cache.html\" target=\"_blank\" rel=\"noopener\">链接三</a></p>\n"},{"title":"immutable的理解","toc":true,"_content":"## immutable的理解：\n### 什么是immutable:\n Immutable 实现的原理是 **Persistent Data Structure**（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 **Structural Sharing**（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。\n <!--more-->\n\n####  如下图所示：\n ![image](https://camo.githubusercontent.com/9e129aaf95d2a645a860dc26532796817e8085c0/687474703a2f2f696d672e616c6963646e2e636f6d2f7470732f69322f5442317a7a695f4b5858585858637458465858627262384f5658582d3631332d3537352e676966)\n \n ### immutable对react的优化思路：\n JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 `foo={a: 1}; bar=foo; bar.a=2` 你会发现此时 `foo.a` 也被改成了 `2`。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。\n \n 为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费，因为每次state数据的改变都会重新渲染rende函数，造成不必要的浪费。要想搞清楚为什么需要了解下react生命周期中的shouldComponentUpdate().\n \n  \n ![image](https://github.com/USTC-Han/USTC-Han.github.io/blob/master/pic/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg)\n \n React的重复渲染优化的核心其实就是在shouldComponentUpdate里面做数据比较。在优化之前，shouldComponentUpdate是默认返回true的，这导致任何时候触发任何的数据变化都会使component重新渲染。这必然会导致资源的浪费和性能的低下——你可能会感觉比较原生的响应更慢。\n 然而immutable只更新改变的节点和其相关父节点，减少了不必要节点的更新。大大的提高了效率。\n###  seamless-immutable\nseamless-immutable扩展了 JavaScript 的 Array 和 Object 对象，代码压缩后比较小，非常适合应用在react的开发项目中；\n#### 常用API\n\n```\nconst arr = Immutable([1, 2, 3])// 创建Immutable数组\n\nconst obj = Immutable({foo: 'bar'})// 创建Immutable数组\n\n```\n对象合并：merge\n\n```\nvar obj = Immutable({status: \"good\", hypothesis: \"plausible\", errors: 0});\nImmutable.merge(obj, {status: \"funky\", hypothesis: \"confirmed\"});\n// returns Immutable({status: \"funky\", hypothesis: \"confirmed\", errors: 0})\n```\n对象/数组赋值：set单层\n\n```\nvar obj = Immutable({type: \"parrot\", subtype: \"Norwegian Blue\", status: \"alive\"});\nImmutable.merge(obj, {status: \"dead\"});\n// returns Immutable({type: \"parrot\", subtype: \"Norwegian Blue\", status: \"dead\"})\n\nvar array = Immutable([\"hello\", \"world\"]); // 数组\nvar mutatedArray = Immutable.set(array, 1, \"you\");\n\nmutatedArray // [\"hello\", \"you\"]\n```\n对象深层赋值：setIn\n\n```\nvar obj = Immutable({type: {main: \"parrot\", sub: \"Norwegian Blue\"}, status: \"alive\"});\nImmutable.setIn(obj, [\"type\", \"sub\"], \"Norwegian Ridgeback\");\n// returns Immutable({type: {main: \"parrot\", sub: \"Norwegian Ridgeback\"}, status: \"alive\"})\n\n数组：\nvar array = Immutable([[\"one fish\", \"two fish\"], [\"red fish\", \"blue fish\"]]);\nvar mutatedArray = Immutable.setIn(array, [1, 1], \"green fish\");\n\nmutatedArray // [[\"one fish\", \"two fish\"], [\"red fish\", \"green fish\"]]\n```\n对象取值：getIn\n```\nvar obj = Immutable({type: {main: \"parrot\", subtype: \"Norwegian Blue\"}, status: \"alive\"});\nImmutable.getIn(obj, [\"type\", \"subtype\"]);\n// returns \"Norwegian Blue\"\n\nImmutable.getIn(obj, [\"type\", \"class\"], \"Aves\");//默认值\n// returns \"Aves\"\n```\n对象中某值作为函数参数：update/updateIn\n```\nfunction add (x, y) { return x + y }\nvar obj = Immutable({foo: 1});\nImmutable.update(obj, \"foo\", add, 10);\n// returns Immutable({foo: 11})\n\nfunction add (x, y) { return x + y }\nvar obj = Immutable({foo: {bar: 1}});\nImmutable.updateIn(obj, [\"foo\", \"bar\"], add, 10);\n// returns Immutable({foo: {bar: 11}})\n```\n去掉对象中某个键值对：without\n```\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, \"with\");\n// returns Immutable({the: \"forests\", will: \"echo\"})\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, [\"will\", \"with\"]);\n// returns Immutable({the: \"forests\"})\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, \"will\", \"with\");\n// returns Immutable({the: \"forests\"})\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, (value, key) => key === \"the\" || value === \"echo\");\n// returns Immutable({with: \"laughter\"})\n```\n\n\n\n\n\n\n\n","source":"_posts/immutable优化react.md","raw":"---\ntitle: immutable的理解\ntags: \n- React\n- immutable\ntoc: true\n---\n## immutable的理解：\n### 什么是immutable:\n Immutable 实现的原理是 **Persistent Data Structure**（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 **Structural Sharing**（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。\n <!--more-->\n\n####  如下图所示：\n ![image](https://camo.githubusercontent.com/9e129aaf95d2a645a860dc26532796817e8085c0/687474703a2f2f696d672e616c6963646e2e636f6d2f7470732f69322f5442317a7a695f4b5858585858637458465858627262384f5658582d3631332d3537352e676966)\n \n ### immutable对react的优化思路：\n JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 `foo={a: 1}; bar=foo; bar.a=2` 你会发现此时 `foo.a` 也被改成了 `2`。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。\n \n 为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费，因为每次state数据的改变都会重新渲染rende函数，造成不必要的浪费。要想搞清楚为什么需要了解下react生命周期中的shouldComponentUpdate().\n \n  \n ![image](https://github.com/USTC-Han/USTC-Han.github.io/blob/master/pic/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg)\n \n React的重复渲染优化的核心其实就是在shouldComponentUpdate里面做数据比较。在优化之前，shouldComponentUpdate是默认返回true的，这导致任何时候触发任何的数据变化都会使component重新渲染。这必然会导致资源的浪费和性能的低下——你可能会感觉比较原生的响应更慢。\n 然而immutable只更新改变的节点和其相关父节点，减少了不必要节点的更新。大大的提高了效率。\n###  seamless-immutable\nseamless-immutable扩展了 JavaScript 的 Array 和 Object 对象，代码压缩后比较小，非常适合应用在react的开发项目中；\n#### 常用API\n\n```\nconst arr = Immutable([1, 2, 3])// 创建Immutable数组\n\nconst obj = Immutable({foo: 'bar'})// 创建Immutable数组\n\n```\n对象合并：merge\n\n```\nvar obj = Immutable({status: \"good\", hypothesis: \"plausible\", errors: 0});\nImmutable.merge(obj, {status: \"funky\", hypothesis: \"confirmed\"});\n// returns Immutable({status: \"funky\", hypothesis: \"confirmed\", errors: 0})\n```\n对象/数组赋值：set单层\n\n```\nvar obj = Immutable({type: \"parrot\", subtype: \"Norwegian Blue\", status: \"alive\"});\nImmutable.merge(obj, {status: \"dead\"});\n// returns Immutable({type: \"parrot\", subtype: \"Norwegian Blue\", status: \"dead\"})\n\nvar array = Immutable([\"hello\", \"world\"]); // 数组\nvar mutatedArray = Immutable.set(array, 1, \"you\");\n\nmutatedArray // [\"hello\", \"you\"]\n```\n对象深层赋值：setIn\n\n```\nvar obj = Immutable({type: {main: \"parrot\", sub: \"Norwegian Blue\"}, status: \"alive\"});\nImmutable.setIn(obj, [\"type\", \"sub\"], \"Norwegian Ridgeback\");\n// returns Immutable({type: {main: \"parrot\", sub: \"Norwegian Ridgeback\"}, status: \"alive\"})\n\n数组：\nvar array = Immutable([[\"one fish\", \"two fish\"], [\"red fish\", \"blue fish\"]]);\nvar mutatedArray = Immutable.setIn(array, [1, 1], \"green fish\");\n\nmutatedArray // [[\"one fish\", \"two fish\"], [\"red fish\", \"green fish\"]]\n```\n对象取值：getIn\n```\nvar obj = Immutable({type: {main: \"parrot\", subtype: \"Norwegian Blue\"}, status: \"alive\"});\nImmutable.getIn(obj, [\"type\", \"subtype\"]);\n// returns \"Norwegian Blue\"\n\nImmutable.getIn(obj, [\"type\", \"class\"], \"Aves\");//默认值\n// returns \"Aves\"\n```\n对象中某值作为函数参数：update/updateIn\n```\nfunction add (x, y) { return x + y }\nvar obj = Immutable({foo: 1});\nImmutable.update(obj, \"foo\", add, 10);\n// returns Immutable({foo: 11})\n\nfunction add (x, y) { return x + y }\nvar obj = Immutable({foo: {bar: 1}});\nImmutable.updateIn(obj, [\"foo\", \"bar\"], add, 10);\n// returns Immutable({foo: {bar: 11}})\n```\n去掉对象中某个键值对：without\n```\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, \"with\");\n// returns Immutable({the: \"forests\", will: \"echo\"})\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, [\"will\", \"with\"]);\n// returns Immutable({the: \"forests\"})\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, \"will\", \"with\");\n// returns Immutable({the: \"forests\"})\n\nvar obj = Immutable({the: \"forests\", will: \"echo\", with: \"laughter\"});\nImmutable.without(obj, (value, key) => key === \"the\" || value === \"echo\");\n// returns Immutable({with: \"laughter\"})\n```\n\n\n\n\n\n\n\n","slug":"immutable优化react","published":1,"date":"2019-12-19T15:52:56.143Z","updated":"2019-12-19T15:52:56.143Z","_id":"ck4cwgni70019ckukhhy4q65b","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"immutable的理解：\"><a href=\"#immutable的理解：\" class=\"headerlink\" title=\"immutable的理解：\"></a>immutable的理解：</h2><h3 id=\"什么是immutable\"><a href=\"#什么是immutable\" class=\"headerlink\" title=\"什么是immutable:\"></a>什么是immutable:</h3><p> Immutable 实现的原理是 <strong>Persistent Data Structure</strong>（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 <strong>Structural Sharing</strong>（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。<br> <a id=\"more\"></a></p>\n<h4 id=\"如下图所示：\"><a href=\"#如下图所示：\" class=\"headerlink\" title=\"如下图所示：\"></a>如下图所示：</h4><p> <img src=\"https://camo.githubusercontent.com/9e129aaf95d2a645a860dc26532796817e8085c0/687474703a2f2f696d672e616c6963646e2e636f6d2f7470732f69322f5442317a7a695f4b5858585858637458465858627262384f5658582d3631332d3537352e676966\" alt=\"image\"></p>\n<h3 id=\"immutable对react的优化思路：\"><a href=\"#immutable对react的优化思路：\" class=\"headerlink\" title=\"immutable对react的优化思路：\"></a>immutable对react的优化思路：</h3><p> JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 <code>foo={a: 1}; bar=foo; bar.a=2</code> 你会发现此时 <code>foo.a</code> 也被改成了 <code>2</code>。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。</p>\n<p> 为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费，因为每次state数据的改变都会重新渲染rende函数，造成不必要的浪费。要想搞清楚为什么需要了解下react生命周期中的shouldComponentUpdate().</p>\n<p> <img src=\"https://github.com/USTC-Han/USTC-Han.github.io/blob/master/pic/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg\" alt=\"image\"></p>\n<p> React的重复渲染优化的核心其实就是在shouldComponentUpdate里面做数据比较。在优化之前，shouldComponentUpdate是默认返回true的，这导致任何时候触发任何的数据变化都会使component重新渲染。这必然会导致资源的浪费和性能的低下——你可能会感觉比较原生的响应更慢。<br> 然而immutable只更新改变的节点和其相关父节点，减少了不必要节点的更新。大大的提高了效率。</p>\n<h3 id=\"seamless-immutable\"><a href=\"#seamless-immutable\" class=\"headerlink\" title=\"seamless-immutable\"></a>seamless-immutable</h3><p>seamless-immutable扩展了 JavaScript 的 Array 和 Object 对象，代码压缩后比较小，非常适合应用在react的开发项目中；</p>\n<h4 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = Immutable([1, 2, 3])// 创建Immutable数组</span><br><span class=\"line\"></span><br><span class=\"line\">const obj = Immutable(&#123;foo: &apos;bar&apos;&#125;)// 创建Immutable数组</span><br></pre></td></tr></table></figure>\n<p>对象合并：merge</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = Immutable(&#123;status: &quot;good&quot;, hypothesis: &quot;plausible&quot;, errors: 0&#125;);</span><br><span class=\"line\">Immutable.merge(obj, &#123;status: &quot;funky&quot;, hypothesis: &quot;confirmed&quot;&#125;);</span><br><span class=\"line\">// returns Immutable(&#123;status: &quot;funky&quot;, hypothesis: &quot;confirmed&quot;, errors: 0&#125;)</span><br></pre></td></tr></table></figure>\n<p>对象/数组赋值：set单层</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = Immutable(&#123;type: &quot;parrot&quot;, subtype: &quot;Norwegian Blue&quot;, status: &quot;alive&quot;&#125;);</span><br><span class=\"line\">Immutable.merge(obj, &#123;status: &quot;dead&quot;&#125;);</span><br><span class=\"line\">// returns Immutable(&#123;type: &quot;parrot&quot;, subtype: &quot;Norwegian Blue&quot;, status: &quot;dead&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var array = Immutable([&quot;hello&quot;, &quot;world&quot;]); // 数组</span><br><span class=\"line\">var mutatedArray = Immutable.set(array, 1, &quot;you&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">mutatedArray // [&quot;hello&quot;, &quot;you&quot;]</span><br></pre></td></tr></table></figure>\n<p>对象深层赋值：setIn</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = Immutable(&#123;type: &#123;main: &quot;parrot&quot;, sub: &quot;Norwegian Blue&quot;&#125;, status: &quot;alive&quot;&#125;);</span><br><span class=\"line\">Immutable.setIn(obj, [&quot;type&quot;, &quot;sub&quot;], &quot;Norwegian Ridgeback&quot;);</span><br><span class=\"line\">// returns Immutable(&#123;type: &#123;main: &quot;parrot&quot;, sub: &quot;Norwegian Ridgeback&quot;&#125;, status: &quot;alive&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">数组：</span><br><span class=\"line\">var array = Immutable([[&quot;one fish&quot;, &quot;two fish&quot;], [&quot;red fish&quot;, &quot;blue fish&quot;]]);</span><br><span class=\"line\">var mutatedArray = Immutable.setIn(array, [1, 1], &quot;green fish&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">mutatedArray // [[&quot;one fish&quot;, &quot;two fish&quot;], [&quot;red fish&quot;, &quot;green fish&quot;]]</span><br></pre></td></tr></table></figure>\n<p>对象取值：getIn<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = Immutable(&#123;type: &#123;main: &quot;parrot&quot;, subtype: &quot;Norwegian Blue&quot;&#125;, status: &quot;alive&quot;&#125;);</span><br><span class=\"line\">Immutable.getIn(obj, [&quot;type&quot;, &quot;subtype&quot;]);</span><br><span class=\"line\">// returns &quot;Norwegian Blue&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Immutable.getIn(obj, [&quot;type&quot;, &quot;class&quot;], &quot;Aves&quot;);//默认值</span><br><span class=\"line\">// returns &quot;Aves&quot;</span><br></pre></td></tr></table></figure></p>\n<p>对象中某值作为函数参数：update/updateIn<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add (x, y) &#123; return x + y &#125;</span><br><span class=\"line\">var obj = Immutable(&#123;foo: 1&#125;);</span><br><span class=\"line\">Immutable.update(obj, &quot;foo&quot;, add, 10);</span><br><span class=\"line\">// returns Immutable(&#123;foo: 11&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">function add (x, y) &#123; return x + y &#125;</span><br><span class=\"line\">var obj = Immutable(&#123;foo: &#123;bar: 1&#125;&#125;);</span><br><span class=\"line\">Immutable.updateIn(obj, [&quot;foo&quot;, &quot;bar&quot;], add, 10);</span><br><span class=\"line\">// returns Immutable(&#123;foo: &#123;bar: 11&#125;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>去掉对象中某个键值对：without<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var obj = Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;, with: &quot;laughter&quot;&#125;);</span><br><span class=\"line\">Immutable.without(obj, &quot;with&quot;);</span><br><span class=\"line\">// returns Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;, with: &quot;laughter&quot;&#125;);</span><br><span class=\"line\">Immutable.without(obj, [&quot;will&quot;, &quot;with&quot;]);</span><br><span class=\"line\">// returns Immutable(&#123;the: &quot;forests&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;, with: &quot;laughter&quot;&#125;);</span><br><span class=\"line\">Immutable.without(obj, &quot;will&quot;, &quot;with&quot;);</span><br><span class=\"line\">// returns Immutable(&#123;the: &quot;forests&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;, with: &quot;laughter&quot;&#125;);</span><br><span class=\"line\">Immutable.without(obj, (value, key) =&gt; key === &quot;the&quot; || value === &quot;echo&quot;);</span><br><span class=\"line\">// returns Immutable(&#123;with: &quot;laughter&quot;&#125;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"immutable的理解：\"><a href=\"#immutable的理解：\" class=\"headerlink\" title=\"immutable的理解：\"></a>immutable的理解：</h2><h3 id=\"什么是immutable\"><a href=\"#什么是immutable\" class=\"headerlink\" title=\"什么是immutable:\"></a>什么是immutable:</h3><p> Immutable 实现的原理是 <strong>Persistent Data Structure</strong>（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 <strong>Structural Sharing</strong>（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。<br>","more":"</p>\n<h4 id=\"如下图所示：\"><a href=\"#如下图所示：\" class=\"headerlink\" title=\"如下图所示：\"></a>如下图所示：</h4><p> <img src=\"https://camo.githubusercontent.com/9e129aaf95d2a645a860dc26532796817e8085c0/687474703a2f2f696d672e616c6963646e2e636f6d2f7470732f69322f5442317a7a695f4b5858585858637458465858627262384f5658582d3631332d3537352e676966\" alt=\"image\"></p>\n<h3 id=\"immutable对react的优化思路：\"><a href=\"#immutable对react的优化思路：\" class=\"headerlink\" title=\"immutable对react的优化思路：\"></a>immutable对react的优化思路：</h3><p> JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 <code>foo={a: 1}; bar=foo; bar.a=2</code> 你会发现此时 <code>foo.a</code> 也被改成了 <code>2</code>。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。</p>\n<p> 为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费，因为每次state数据的改变都会重新渲染rende函数，造成不必要的浪费。要想搞清楚为什么需要了解下react生命周期中的shouldComponentUpdate().</p>\n<p> <img src=\"https://github.com/USTC-Han/USTC-Han.github.io/blob/master/pic/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg\" alt=\"image\"></p>\n<p> React的重复渲染优化的核心其实就是在shouldComponentUpdate里面做数据比较。在优化之前，shouldComponentUpdate是默认返回true的，这导致任何时候触发任何的数据变化都会使component重新渲染。这必然会导致资源的浪费和性能的低下——你可能会感觉比较原生的响应更慢。<br> 然而immutable只更新改变的节点和其相关父节点，减少了不必要节点的更新。大大的提高了效率。</p>\n<h3 id=\"seamless-immutable\"><a href=\"#seamless-immutable\" class=\"headerlink\" title=\"seamless-immutable\"></a>seamless-immutable</h3><p>seamless-immutable扩展了 JavaScript 的 Array 和 Object 对象，代码压缩后比较小，非常适合应用在react的开发项目中；</p>\n<h4 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = Immutable([1, 2, 3])// 创建Immutable数组</span><br><span class=\"line\"></span><br><span class=\"line\">const obj = Immutable(&#123;foo: &apos;bar&apos;&#125;)// 创建Immutable数组</span><br></pre></td></tr></table></figure>\n<p>对象合并：merge</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = Immutable(&#123;status: &quot;good&quot;, hypothesis: &quot;plausible&quot;, errors: 0&#125;);</span><br><span class=\"line\">Immutable.merge(obj, &#123;status: &quot;funky&quot;, hypothesis: &quot;confirmed&quot;&#125;);</span><br><span class=\"line\">// returns Immutable(&#123;status: &quot;funky&quot;, hypothesis: &quot;confirmed&quot;, errors: 0&#125;)</span><br></pre></td></tr></table></figure>\n<p>对象/数组赋值：set单层</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = Immutable(&#123;type: &quot;parrot&quot;, subtype: &quot;Norwegian Blue&quot;, status: &quot;alive&quot;&#125;);</span><br><span class=\"line\">Immutable.merge(obj, &#123;status: &quot;dead&quot;&#125;);</span><br><span class=\"line\">// returns Immutable(&#123;type: &quot;parrot&quot;, subtype: &quot;Norwegian Blue&quot;, status: &quot;dead&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var array = Immutable([&quot;hello&quot;, &quot;world&quot;]); // 数组</span><br><span class=\"line\">var mutatedArray = Immutable.set(array, 1, &quot;you&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">mutatedArray // [&quot;hello&quot;, &quot;you&quot;]</span><br></pre></td></tr></table></figure>\n<p>对象深层赋值：setIn</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = Immutable(&#123;type: &#123;main: &quot;parrot&quot;, sub: &quot;Norwegian Blue&quot;&#125;, status: &quot;alive&quot;&#125;);</span><br><span class=\"line\">Immutable.setIn(obj, [&quot;type&quot;, &quot;sub&quot;], &quot;Norwegian Ridgeback&quot;);</span><br><span class=\"line\">// returns Immutable(&#123;type: &#123;main: &quot;parrot&quot;, sub: &quot;Norwegian Ridgeback&quot;&#125;, status: &quot;alive&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">数组：</span><br><span class=\"line\">var array = Immutable([[&quot;one fish&quot;, &quot;two fish&quot;], [&quot;red fish&quot;, &quot;blue fish&quot;]]);</span><br><span class=\"line\">var mutatedArray = Immutable.setIn(array, [1, 1], &quot;green fish&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">mutatedArray // [[&quot;one fish&quot;, &quot;two fish&quot;], [&quot;red fish&quot;, &quot;green fish&quot;]]</span><br></pre></td></tr></table></figure>\n<p>对象取值：getIn<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = Immutable(&#123;type: &#123;main: &quot;parrot&quot;, subtype: &quot;Norwegian Blue&quot;&#125;, status: &quot;alive&quot;&#125;);</span><br><span class=\"line\">Immutable.getIn(obj, [&quot;type&quot;, &quot;subtype&quot;]);</span><br><span class=\"line\">// returns &quot;Norwegian Blue&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Immutable.getIn(obj, [&quot;type&quot;, &quot;class&quot;], &quot;Aves&quot;);//默认值</span><br><span class=\"line\">// returns &quot;Aves&quot;</span><br></pre></td></tr></table></figure></p>\n<p>对象中某值作为函数参数：update/updateIn<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add (x, y) &#123; return x + y &#125;</span><br><span class=\"line\">var obj = Immutable(&#123;foo: 1&#125;);</span><br><span class=\"line\">Immutable.update(obj, &quot;foo&quot;, add, 10);</span><br><span class=\"line\">// returns Immutable(&#123;foo: 11&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">function add (x, y) &#123; return x + y &#125;</span><br><span class=\"line\">var obj = Immutable(&#123;foo: &#123;bar: 1&#125;&#125;);</span><br><span class=\"line\">Immutable.updateIn(obj, [&quot;foo&quot;, &quot;bar&quot;], add, 10);</span><br><span class=\"line\">// returns Immutable(&#123;foo: &#123;bar: 11&#125;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>去掉对象中某个键值对：without<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var obj = Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;, with: &quot;laughter&quot;&#125;);</span><br><span class=\"line\">Immutable.without(obj, &quot;with&quot;);</span><br><span class=\"line\">// returns Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;, with: &quot;laughter&quot;&#125;);</span><br><span class=\"line\">Immutable.without(obj, [&quot;will&quot;, &quot;with&quot;]);</span><br><span class=\"line\">// returns Immutable(&#123;the: &quot;forests&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;, with: &quot;laughter&quot;&#125;);</span><br><span class=\"line\">Immutable.without(obj, &quot;will&quot;, &quot;with&quot;);</span><br><span class=\"line\">// returns Immutable(&#123;the: &quot;forests&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = Immutable(&#123;the: &quot;forests&quot;, will: &quot;echo&quot;, with: &quot;laughter&quot;&#125;);</span><br><span class=\"line\">Immutable.without(obj, (value, key) =&gt; key === &quot;the&quot; || value === &quot;echo&quot;);</span><br><span class=\"line\">// returns Immutable(&#123;with: &quot;laughter&quot;&#125;)</span><br></pre></td></tr></table></figure></p>"},{"title":"for...in 和 for...of对比","toc":true,"_content":"# for...in 和 for...of 对比\n## 1. 关于for...in\n\n### 1.1 MDN的定义\n> for...in语句以**任意顺序**遍历一个对象`自有的、继承的、可枚举的、非Symbol的属性`。对于每个不同的属性，语句都会被执行。\n\n思考：通过这个定义，我得到三点结论：\n  * for...in 遍历的结果不一定和被遍历对象的顺序相同。\n  * for...in 不但可以遍历被遍历对象的自有属性，还可以遍历原型上的和继承来的可枚举属性。\n  *  String 的 indexOf()  方法或 Object的toString()方法，这些显然是原型上不可枚举的属性\n### 1.2 for...in 语法\n```js\nfor (variable in object) {...}\n```\n其中 variable为属性名，object是被遍历对象。\n### 1.3 for...in 能不能遍历数组？\n> 数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。不能保证for ... in将以任何特定的顺序返回索引。\n\n考虑到遍历数组不能直接得到数组元素和索引顺序的不确定性，所以最好不要使用for...in。另外for...in的便利还有可能把数组原型上的属性遍历出来。\n<!--More-->\n#### 1.3.1 数组使用for...in举例\n```js\n//向数组的原型上添加属性\nArray.prototype.sayHello = function(){\n    console.log(\"Hello\")\n}\nArray.prototype.str = 'world';\n\nvar myArray = [1,2,10,30,100];\nmyArray.name='数组';\n\nfor(let index in myArray){\n    console.log(index);\n}\n/*\n0\n1\n2\n3\n4\nname\nsayHello\nstr\n*/\n```\n### 1.4 for...in 遍历对象\n使用for...in遍历对象可以直接知道对象的key,间接知道对象每项对应的值，这么使用显然是合理的。\n\n#### 1.4.1 对象使用for...in举例\n```js\n\n// 向原型上添加属性\nObject.prototype.sayHello = function(){\n  console.log('Hello');\n}\nObject.prototype.str = 'World';\nvar myObject = {name: 'zhangsan', age: 100};\n\nfor(let index in myObject){\n    console.log(index);\n}\n/*\nname\nage\nsayHello\nstr\n*/\n```\n#### 1.4.2 如何只遍历自有属性\n  使用`hasOwnProperty()`,可以保证只迭代自身属性\n```js\nfor(let index in myObject){\n    if(myObject.hasOwnProperty(index)){\n        console.log(index)\n    }\n}\n```\n## 2. 关于for...of\n### 2.1 MDN的定义\n> for...of 语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。\n\n思考：通过这个定义，我得到三点结论：\n* for...of 只能用于可迭代对象，且可以通过迭代的过程中直接拿到属性值。\n* 对象是不可以迭代的，显然不适用于for...of。\n* for...of 和forEach()在遍历数组的时候会有什么不同呢？\n### 2.2 for...of 语法\n\n```js\nfor (variable of iterable) {\n    //statements\n}\n```\nvariable对应每次迭代中属性的值，iterable对应的是被迭代的对象。\n### 2.3 for...of 遍历可迭代的对象\n#### 2.3.1 for...of迭代数组\n```js\nlet iterable = [10, 20, 30];\n\nfor (let value of iterable) {\n    value += 1;\n    console.log(value);\n}\n// 11\n// 21\n// 31\n\n```\n#### 2.3.2 for...of迭代字符串\n```js\nlet iterable = \"boo\";\n\nfor (let value of iterable) {\n  console.log(value);\n}\n// \"b\"\n// \"o\"\n// \"o\"\n```\n\n    对字符串和数组的迭代是比较常用的，其它可迭代的数据类型在项目中见的比较少\n#### 2.3.3 for...of迭代set\n```js\nlet iterable = new Set([1, 1, 2, 2, 3, 3]);\n\nfor (let value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n    这个例子也佐证了利用set可以对数组去重。[...iterable]解构给数组即可\n\n### 2.3.4 for...of迭代Map\n```js\nlet iterable = new Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\n\nfor (let entry of iterable) {\n  console.log(entry);\n}\n// [\"a\", 1]\n// [\"b\", 2]\n// [\"c\", 3]\n\nfor (let [key, value] of iterable) {\n  console.log(value);\n}\n\n// 1\n// 2\n// 3\n```\n    Map这个迭代引发思考：[key, value]是 entry的解构写法？那iterable是不是某种迭代器的简写？\n#### 2.3.4.1 集合对象迭代器：\nES6中有三种类型的集合对象：Array Set和 Map，\n这是三者都包含三种迭代器：\n* entries() 返回一个迭代器，其值为多个键值对的集合 [key,value]\n* values()  返回一个迭代器，其值为集合的值 value\n* keys() 返回一个迭代器，其值为集合中所有的键名 key\n\n思考：\n* 对于Array和Set类型的对象，这三个迭代器意义不大。数组的index用遍历器迭代没啥意义，对于Set,键值相同。\n* 对于Map是有意义的，可以得到Map中每个元素的键和值\n\neg: 对于Set\n```js\nlet iterable = new Set([3322, 2233]);\n\nfor (let entry of iterable.entries()) {\n  console.log(entry);\n}\n/*\n[3322, 3322]\n[2233, 2233]\n*/\n```\neg: 对于Map\n```js\nlet iterable = new Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\n// 键：\nfor (let key of iterable.keys()) {\n  console.log(key);\n}\n// 值\nfor (let value of iterable.values()) {\n  console.log(value);\n}\n```\n### 2.3.5 for...in迭代arguments\n```js\nfunction iterator(){\n for (let argument of arguments) {\n    console.log(argument);\n  }\n}\niterator('han','robbie','TS')\n// han\n// robbie\n// TS\n```\n# 3. for...in 和for...of总结\n     对于for...in，它可以遍历自有的、原型上的、继承来的可枚举属性，适合去遍历对象,并得到属性名\n     对于for...of，它可以遍历可迭代的对象，可以得到可迭代对象属性的值，适合遍历字符串、数组、Set、Map等\n","source":"_posts/for..in和for...of.md","raw":"---\ntitle: for...in 和 for...of对比\ntoc: true\ntags: \n- JS\n- for...in \n- for...of\n---\n# for...in 和 for...of 对比\n## 1. 关于for...in\n\n### 1.1 MDN的定义\n> for...in语句以**任意顺序**遍历一个对象`自有的、继承的、可枚举的、非Symbol的属性`。对于每个不同的属性，语句都会被执行。\n\n思考：通过这个定义，我得到三点结论：\n  * for...in 遍历的结果不一定和被遍历对象的顺序相同。\n  * for...in 不但可以遍历被遍历对象的自有属性，还可以遍历原型上的和继承来的可枚举属性。\n  *  String 的 indexOf()  方法或 Object的toString()方法，这些显然是原型上不可枚举的属性\n### 1.2 for...in 语法\n```js\nfor (variable in object) {...}\n```\n其中 variable为属性名，object是被遍历对象。\n### 1.3 for...in 能不能遍历数组？\n> 数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。不能保证for ... in将以任何特定的顺序返回索引。\n\n考虑到遍历数组不能直接得到数组元素和索引顺序的不确定性，所以最好不要使用for...in。另外for...in的便利还有可能把数组原型上的属性遍历出来。\n<!--More-->\n#### 1.3.1 数组使用for...in举例\n```js\n//向数组的原型上添加属性\nArray.prototype.sayHello = function(){\n    console.log(\"Hello\")\n}\nArray.prototype.str = 'world';\n\nvar myArray = [1,2,10,30,100];\nmyArray.name='数组';\n\nfor(let index in myArray){\n    console.log(index);\n}\n/*\n0\n1\n2\n3\n4\nname\nsayHello\nstr\n*/\n```\n### 1.4 for...in 遍历对象\n使用for...in遍历对象可以直接知道对象的key,间接知道对象每项对应的值，这么使用显然是合理的。\n\n#### 1.4.1 对象使用for...in举例\n```js\n\n// 向原型上添加属性\nObject.prototype.sayHello = function(){\n  console.log('Hello');\n}\nObject.prototype.str = 'World';\nvar myObject = {name: 'zhangsan', age: 100};\n\nfor(let index in myObject){\n    console.log(index);\n}\n/*\nname\nage\nsayHello\nstr\n*/\n```\n#### 1.4.2 如何只遍历自有属性\n  使用`hasOwnProperty()`,可以保证只迭代自身属性\n```js\nfor(let index in myObject){\n    if(myObject.hasOwnProperty(index)){\n        console.log(index)\n    }\n}\n```\n## 2. 关于for...of\n### 2.1 MDN的定义\n> for...of 语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。\n\n思考：通过这个定义，我得到三点结论：\n* for...of 只能用于可迭代对象，且可以通过迭代的过程中直接拿到属性值。\n* 对象是不可以迭代的，显然不适用于for...of。\n* for...of 和forEach()在遍历数组的时候会有什么不同呢？\n### 2.2 for...of 语法\n\n```js\nfor (variable of iterable) {\n    //statements\n}\n```\nvariable对应每次迭代中属性的值，iterable对应的是被迭代的对象。\n### 2.3 for...of 遍历可迭代的对象\n#### 2.3.1 for...of迭代数组\n```js\nlet iterable = [10, 20, 30];\n\nfor (let value of iterable) {\n    value += 1;\n    console.log(value);\n}\n// 11\n// 21\n// 31\n\n```\n#### 2.3.2 for...of迭代字符串\n```js\nlet iterable = \"boo\";\n\nfor (let value of iterable) {\n  console.log(value);\n}\n// \"b\"\n// \"o\"\n// \"o\"\n```\n\n    对字符串和数组的迭代是比较常用的，其它可迭代的数据类型在项目中见的比较少\n#### 2.3.3 for...of迭代set\n```js\nlet iterable = new Set([1, 1, 2, 2, 3, 3]);\n\nfor (let value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n    这个例子也佐证了利用set可以对数组去重。[...iterable]解构给数组即可\n\n### 2.3.4 for...of迭代Map\n```js\nlet iterable = new Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\n\nfor (let entry of iterable) {\n  console.log(entry);\n}\n// [\"a\", 1]\n// [\"b\", 2]\n// [\"c\", 3]\n\nfor (let [key, value] of iterable) {\n  console.log(value);\n}\n\n// 1\n// 2\n// 3\n```\n    Map这个迭代引发思考：[key, value]是 entry的解构写法？那iterable是不是某种迭代器的简写？\n#### 2.3.4.1 集合对象迭代器：\nES6中有三种类型的集合对象：Array Set和 Map，\n这是三者都包含三种迭代器：\n* entries() 返回一个迭代器，其值为多个键值对的集合 [key,value]\n* values()  返回一个迭代器，其值为集合的值 value\n* keys() 返回一个迭代器，其值为集合中所有的键名 key\n\n思考：\n* 对于Array和Set类型的对象，这三个迭代器意义不大。数组的index用遍历器迭代没啥意义，对于Set,键值相同。\n* 对于Map是有意义的，可以得到Map中每个元素的键和值\n\neg: 对于Set\n```js\nlet iterable = new Set([3322, 2233]);\n\nfor (let entry of iterable.entries()) {\n  console.log(entry);\n}\n/*\n[3322, 3322]\n[2233, 2233]\n*/\n```\neg: 对于Map\n```js\nlet iterable = new Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\n// 键：\nfor (let key of iterable.keys()) {\n  console.log(key);\n}\n// 值\nfor (let value of iterable.values()) {\n  console.log(value);\n}\n```\n### 2.3.5 for...in迭代arguments\n```js\nfunction iterator(){\n for (let argument of arguments) {\n    console.log(argument);\n  }\n}\niterator('han','robbie','TS')\n// han\n// robbie\n// TS\n```\n# 3. for...in 和for...of总结\n     对于for...in，它可以遍历自有的、原型上的、继承来的可枚举属性，适合去遍历对象,并得到属性名\n     对于for...of，它可以遍历可迭代的对象，可以得到可迭代对象属性的值，适合遍历字符串、数组、Set、Map等\n","slug":"for..in和for...of","published":1,"date":"2019-12-19T15:52:56.141Z","updated":"2019-12-19T15:52:56.141Z","_id":"ck4cwgni7001ackukiculahdv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"for…in-和-for…of-对比\"><a href=\"#for…in-和-for…of-对比\" class=\"headerlink\" title=\"for…in 和 for…of 对比\"></a>for…in 和 for…of 对比</h1><h2 id=\"1-关于for…in\"><a href=\"#1-关于for…in\" class=\"headerlink\" title=\"1. 关于for…in\"></a>1. 关于for…in</h2><h3 id=\"1-1-MDN的定义\"><a href=\"#1-1-MDN的定义\" class=\"headerlink\" title=\"1.1 MDN的定义\"></a>1.1 MDN的定义</h3><blockquote>\n<p>for…in语句以<strong>任意顺序</strong>遍历一个对象<code>自有的、继承的、可枚举的、非Symbol的属性</code>。对于每个不同的属性，语句都会被执行。</p>\n</blockquote>\n<p>思考：通过这个定义，我得到三点结论：</p>\n<ul>\n<li>for…in 遍历的结果不一定和被遍历对象的顺序相同。</li>\n<li>for…in 不但可以遍历被遍历对象的自有属性，还可以遍历原型上的和继承来的可枚举属性。</li>\n<li>String 的 indexOf()  方法或 Object的toString()方法，这些显然是原型上不可枚举的属性<h3 id=\"1-2-for…in-语法\"><a href=\"#1-2-for…in-语法\" class=\"headerlink\" title=\"1.2 for…in 语法\"></a>1.2 for…in 语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (variable <span class=\"keyword\">in</span> object) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中 variable为属性名，object是被遍历对象。</p>\n<h3 id=\"1-3-for…in-能不能遍历数组？\"><a href=\"#1-3-for…in-能不能遍历数组？\" class=\"headerlink\" title=\"1.3 for…in 能不能遍历数组？\"></a>1.3 for…in 能不能遍历数组？</h3><blockquote>\n<p>数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。不能保证for … in将以任何特定的顺序返回索引。</p>\n</blockquote>\n<p>考虑到遍历数组不能直接得到数组元素和索引顺序的不确定性，所以最好不要使用for…in。另外for…in的便利还有可能把数组原型上的属性遍历出来。<br><a id=\"more\"></a></p>\n<h4 id=\"1-3-1-数组使用for…in举例\"><a href=\"#1-3-1-数组使用for…in举例\" class=\"headerlink\" title=\"1.3.1 数组使用for…in举例\"></a>1.3.1 数组使用for…in举例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向数组的原型上添加属性</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.str = <span class=\"string\">'world'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myArray = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">30</span>,<span class=\"number\">100</span>];</span><br><span class=\"line\">myArray.name=<span class=\"string\">'数组'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> myArray)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">4</span></span><br><span class=\"line\"><span class=\"comment\">name</span></span><br><span class=\"line\"><span class=\"comment\">sayHello</span></span><br><span class=\"line\"><span class=\"comment\">str</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-for…in-遍历对象\"><a href=\"#1-4-for…in-遍历对象\" class=\"headerlink\" title=\"1.4 for…in 遍历对象\"></a>1.4 for…in 遍历对象</h3><p>使用for…in遍历对象可以直接知道对象的key,间接知道对象每项对应的值，这么使用显然是合理的。</p>\n<h4 id=\"1-4-1-对象使用for…in举例\"><a href=\"#1-4-1-对象使用for…in举例\" class=\"headerlink\" title=\"1.4.1 对象使用for…in举例\"></a>1.4.1 对象使用for…in举例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向原型上添加属性</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.str = <span class=\"string\">'World'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'zhangsan'</span>, <span class=\"attr\">age</span>: <span class=\"number\">100</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> myObject)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">name</span></span><br><span class=\"line\"><span class=\"comment\">age</span></span><br><span class=\"line\"><span class=\"comment\">sayHello</span></span><br><span class=\"line\"><span class=\"comment\">str</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-4-2-如何只遍历自有属性\"><a href=\"#1-4-2-如何只遍历自有属性\" class=\"headerlink\" title=\"1.4.2 如何只遍历自有属性\"></a>1.4.2 如何只遍历自有属性</h4><p>  使用<code>hasOwnProperty()</code>,可以保证只迭代自身属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> myObject)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(myObject.hasOwnProperty(index))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(index)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-关于for…of\"><a href=\"#2-关于for…of\" class=\"headerlink\" title=\"2. 关于for…of\"></a>2. 关于for…of</h2><h3 id=\"2-1-MDN的定义\"><a href=\"#2-1-MDN的定义\" class=\"headerlink\" title=\"2.1 MDN的定义\"></a>2.1 MDN的定义</h3><blockquote>\n<p>for…of 语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。</p>\n</blockquote>\n<p>思考：通过这个定义，我得到三点结论：</p>\n<ul>\n<li>for…of 只能用于可迭代对象，且可以通过迭代的过程中直接拿到属性值。</li>\n<li>对象是不可以迭代的，显然不适用于for…of。</li>\n<li>for…of 和forEach()在遍历数组的时候会有什么不同呢？<h3 id=\"2-2-for…of-语法\"><a href=\"#2-2-for…of-语法\" class=\"headerlink\" title=\"2.2 for…of 语法\"></a>2.2 for…of 语法</h3></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (variable <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//statements</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>variable对应每次迭代中属性的值，iterable对应的是被迭代的对象。</p>\n<h3 id=\"2-3-for…of-遍历可迭代的对象\"><a href=\"#2-3-for…of-遍历可迭代的对象\" class=\"headerlink\" title=\"2.3 for…of 遍历可迭代的对象\"></a>2.3 for…of 遍历可迭代的对象</h3><h4 id=\"2-3-1-for…of迭代数组\"><a href=\"#2-3-1-for…of迭代数组\" class=\"headerlink\" title=\"2.3.1 for…of迭代数组\"></a>2.3.1 for…of迭代数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">    value += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"comment\">// 21</span></span><br><span class=\"line\"><span class=\"comment\">// 31</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-2-for…of迭代字符串\"><a href=\"#2-3-2-for…of迭代字符串\" class=\"headerlink\" title=\"2.3.2 for…of迭代字符串\"></a>2.3.2 for…of迭代字符串</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"string\">\"boo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"b\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n<pre><code>对字符串和数组的迭代是比较常用的，其它可迭代的数据类型在项目中见的比较少\n</code></pre><h4 id=\"2-3-3-for…of迭代set\"><a href=\"#2-3-3-for…of迭代set\" class=\"headerlink\" title=\"2.3.3 for…of迭代set\"></a>2.3.3 for…of迭代set</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<pre><code>这个例子也佐证了利用set可以对数组去重。[...iterable]解构给数组即可\n</code></pre><h3 id=\"2-3-4-for…of迭代Map\"><a href=\"#2-3-4-for…of迭代Map\" class=\"headerlink\" title=\"2.3.4 for…of迭代Map\"></a>2.3.4 for…of迭代Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entry <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entry);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", 1]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"b\", 2]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"c\", 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<pre><code>Map这个迭代引发思考：[key, value]是 entry的解构写法？那iterable是不是某种迭代器的简写？\n</code></pre><h4 id=\"2-3-4-1-集合对象迭代器：\"><a href=\"#2-3-4-1-集合对象迭代器：\" class=\"headerlink\" title=\"2.3.4.1 集合对象迭代器：\"></a>2.3.4.1 集合对象迭代器：</h4><p>ES6中有三种类型的集合对象：Array Set和 Map，<br>这是三者都包含三种迭代器：</p>\n<ul>\n<li>entries() 返回一个迭代器，其值为多个键值对的集合 [key,value]</li>\n<li>values()  返回一个迭代器，其值为集合的值 value</li>\n<li>keys() 返回一个迭代器，其值为集合中所有的键名 key</li>\n</ul>\n<p>思考：</p>\n<ul>\n<li>对于Array和Set类型的对象，这三个迭代器意义不大。数组的index用遍历器迭代没啥意义，对于Set,键值相同。</li>\n<li>对于Map是有意义的，可以得到Map中每个元素的键和值</li>\n</ul>\n<p>eg: 对于Set<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">3322</span>, <span class=\"number\">2233</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entry <span class=\"keyword\">of</span> iterable.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entry);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">[3322, 3322]</span></span><br><span class=\"line\"><span class=\"comment\">[2233, 2233]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<p>eg: 对于Map<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>]]);</span><br><span class=\"line\"><span class=\"comment\">// 键：</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> iterable.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterable.values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-5-for…in迭代arguments\"><a href=\"#2-3-5-for…in迭代arguments\" class=\"headerlink\" title=\"2.3.5 for…in迭代arguments\"></a>2.3.5 for…in迭代arguments</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> argument <span class=\"keyword\">of</span> <span class=\"built_in\">arguments</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(argument);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">iterator(<span class=\"string\">'han'</span>,<span class=\"string\">'robbie'</span>,<span class=\"string\">'TS'</span>)</span><br><span class=\"line\"><span class=\"comment\">// han</span></span><br><span class=\"line\"><span class=\"comment\">// robbie</span></span><br><span class=\"line\"><span class=\"comment\">// TS</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-for…in-和for…of总结\"><a href=\"#3-for…in-和for…of总结\" class=\"headerlink\" title=\"3. for…in 和for…of总结\"></a>3. for…in 和for…of总结</h1><pre><code>对于for...in，它可以遍历自有的、原型上的、继承来的可枚举属性，适合去遍历对象,并得到属性名\n对于for...of，它可以遍历可迭代的对象，可以得到可迭代对象属性的值，适合遍历字符串、数组、Set、Map等\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"for…in-和-for…of-对比\"><a href=\"#for…in-和-for…of-对比\" class=\"headerlink\" title=\"for…in 和 for…of 对比\"></a>for…in 和 for…of 对比</h1><h2 id=\"1-关于for…in\"><a href=\"#1-关于for…in\" class=\"headerlink\" title=\"1. 关于for…in\"></a>1. 关于for…in</h2><h3 id=\"1-1-MDN的定义\"><a href=\"#1-1-MDN的定义\" class=\"headerlink\" title=\"1.1 MDN的定义\"></a>1.1 MDN的定义</h3><blockquote>\n<p>for…in语句以<strong>任意顺序</strong>遍历一个对象<code>自有的、继承的、可枚举的、非Symbol的属性</code>。对于每个不同的属性，语句都会被执行。</p>\n</blockquote>\n<p>思考：通过这个定义，我得到三点结论：</p>\n<ul>\n<li>for…in 遍历的结果不一定和被遍历对象的顺序相同。</li>\n<li>for…in 不但可以遍历被遍历对象的自有属性，还可以遍历原型上的和继承来的可枚举属性。</li>\n<li>String 的 indexOf()  方法或 Object的toString()方法，这些显然是原型上不可枚举的属性<h3 id=\"1-2-for…in-语法\"><a href=\"#1-2-for…in-语法\" class=\"headerlink\" title=\"1.2 for…in 语法\"></a>1.2 for…in 语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (variable <span class=\"keyword\">in</span> object) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中 variable为属性名，object是被遍历对象。</p>\n<h3 id=\"1-3-for…in-能不能遍历数组？\"><a href=\"#1-3-for…in-能不能遍历数组？\" class=\"headerlink\" title=\"1.3 for…in 能不能遍历数组？\"></a>1.3 for…in 能不能遍历数组？</h3><blockquote>\n<p>数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。不能保证for … in将以任何特定的顺序返回索引。</p>\n</blockquote>\n<p>考虑到遍历数组不能直接得到数组元素和索引顺序的不确定性，所以最好不要使用for…in。另外for…in的便利还有可能把数组原型上的属性遍历出来。<br>","more":"</p>\n<h4 id=\"1-3-1-数组使用for…in举例\"><a href=\"#1-3-1-数组使用for…in举例\" class=\"headerlink\" title=\"1.3.1 数组使用for…in举例\"></a>1.3.1 数组使用for…in举例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向数组的原型上添加属性</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.str = <span class=\"string\">'world'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myArray = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">30</span>,<span class=\"number\">100</span>];</span><br><span class=\"line\">myArray.name=<span class=\"string\">'数组'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> myArray)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">4</span></span><br><span class=\"line\"><span class=\"comment\">name</span></span><br><span class=\"line\"><span class=\"comment\">sayHello</span></span><br><span class=\"line\"><span class=\"comment\">str</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-for…in-遍历对象\"><a href=\"#1-4-for…in-遍历对象\" class=\"headerlink\" title=\"1.4 for…in 遍历对象\"></a>1.4 for…in 遍历对象</h3><p>使用for…in遍历对象可以直接知道对象的key,间接知道对象每项对应的值，这么使用显然是合理的。</p>\n<h4 id=\"1-4-1-对象使用for…in举例\"><a href=\"#1-4-1-对象使用for…in举例\" class=\"headerlink\" title=\"1.4.1 对象使用for…in举例\"></a>1.4.1 对象使用for…in举例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向原型上添加属性</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.str = <span class=\"string\">'World'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'zhangsan'</span>, <span class=\"attr\">age</span>: <span class=\"number\">100</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> myObject)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">name</span></span><br><span class=\"line\"><span class=\"comment\">age</span></span><br><span class=\"line\"><span class=\"comment\">sayHello</span></span><br><span class=\"line\"><span class=\"comment\">str</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-4-2-如何只遍历自有属性\"><a href=\"#1-4-2-如何只遍历自有属性\" class=\"headerlink\" title=\"1.4.2 如何只遍历自有属性\"></a>1.4.2 如何只遍历自有属性</h4><p>  使用<code>hasOwnProperty()</code>,可以保证只迭代自身属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> myObject)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(myObject.hasOwnProperty(index))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(index)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-关于for…of\"><a href=\"#2-关于for…of\" class=\"headerlink\" title=\"2. 关于for…of\"></a>2. 关于for…of</h2><h3 id=\"2-1-MDN的定义\"><a href=\"#2-1-MDN的定义\" class=\"headerlink\" title=\"2.1 MDN的定义\"></a>2.1 MDN的定义</h3><blockquote>\n<p>for…of 语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。</p>\n</blockquote>\n<p>思考：通过这个定义，我得到三点结论：</p>\n<ul>\n<li>for…of 只能用于可迭代对象，且可以通过迭代的过程中直接拿到属性值。</li>\n<li>对象是不可以迭代的，显然不适用于for…of。</li>\n<li>for…of 和forEach()在遍历数组的时候会有什么不同呢？<h3 id=\"2-2-for…of-语法\"><a href=\"#2-2-for…of-语法\" class=\"headerlink\" title=\"2.2 for…of 语法\"></a>2.2 for…of 语法</h3></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (variable <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//statements</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>variable对应每次迭代中属性的值，iterable对应的是被迭代的对象。</p>\n<h3 id=\"2-3-for…of-遍历可迭代的对象\"><a href=\"#2-3-for…of-遍历可迭代的对象\" class=\"headerlink\" title=\"2.3 for…of 遍历可迭代的对象\"></a>2.3 for…of 遍历可迭代的对象</h3><h4 id=\"2-3-1-for…of迭代数组\"><a href=\"#2-3-1-for…of迭代数组\" class=\"headerlink\" title=\"2.3.1 for…of迭代数组\"></a>2.3.1 for…of迭代数组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">    value += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 11</span></span><br><span class=\"line\"><span class=\"comment\">// 21</span></span><br><span class=\"line\"><span class=\"comment\">// 31</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-2-for…of迭代字符串\"><a href=\"#2-3-2-for…of迭代字符串\" class=\"headerlink\" title=\"2.3.2 for…of迭代字符串\"></a>2.3.2 for…of迭代字符串</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"string\">\"boo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"b\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n<pre><code>对字符串和数组的迭代是比较常用的，其它可迭代的数据类型在项目中见的比较少\n</code></pre><h4 id=\"2-3-3-for…of迭代set\"><a href=\"#2-3-3-for…of迭代set\" class=\"headerlink\" title=\"2.3.3 for…of迭代set\"></a>2.3.3 for…of迭代set</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<pre><code>这个例子也佐证了利用set可以对数组去重。[...iterable]解构给数组即可\n</code></pre><h3 id=\"2-3-4-for…of迭代Map\"><a href=\"#2-3-4-for…of迭代Map\" class=\"headerlink\" title=\"2.3.4 for…of迭代Map\"></a>2.3.4 for…of迭代Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entry <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entry);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", 1]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"b\", 2]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"c\", 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<pre><code>Map这个迭代引发思考：[key, value]是 entry的解构写法？那iterable是不是某种迭代器的简写？\n</code></pre><h4 id=\"2-3-4-1-集合对象迭代器：\"><a href=\"#2-3-4-1-集合对象迭代器：\" class=\"headerlink\" title=\"2.3.4.1 集合对象迭代器：\"></a>2.3.4.1 集合对象迭代器：</h4><p>ES6中有三种类型的集合对象：Array Set和 Map，<br>这是三者都包含三种迭代器：</p>\n<ul>\n<li>entries() 返回一个迭代器，其值为多个键值对的集合 [key,value]</li>\n<li>values()  返回一个迭代器，其值为集合的值 value</li>\n<li>keys() 返回一个迭代器，其值为集合中所有的键名 key</li>\n</ul>\n<p>思考：</p>\n<ul>\n<li>对于Array和Set类型的对象，这三个迭代器意义不大。数组的index用遍历器迭代没啥意义，对于Set,键值相同。</li>\n<li>对于Map是有意义的，可以得到Map中每个元素的键和值</li>\n</ul>\n<p>eg: 对于Set<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">3322</span>, <span class=\"number\">2233</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entry <span class=\"keyword\">of</span> iterable.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entry);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">[3322, 3322]</span></span><br><span class=\"line\"><span class=\"comment\">[2233, 2233]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<p>eg: 对于Map<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>], [<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>], [<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>]]);</span><br><span class=\"line\"><span class=\"comment\">// 键：</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> iterable.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterable.values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-5-for…in迭代arguments\"><a href=\"#2-3-5-for…in迭代arguments\" class=\"headerlink\" title=\"2.3.5 for…in迭代arguments\"></a>2.3.5 for…in迭代arguments</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> argument <span class=\"keyword\">of</span> <span class=\"built_in\">arguments</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(argument);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">iterator(<span class=\"string\">'han'</span>,<span class=\"string\">'robbie'</span>,<span class=\"string\">'TS'</span>)</span><br><span class=\"line\"><span class=\"comment\">// han</span></span><br><span class=\"line\"><span class=\"comment\">// robbie</span></span><br><span class=\"line\"><span class=\"comment\">// TS</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-for…in-和for…of总结\"><a href=\"#3-for…in-和for…of总结\" class=\"headerlink\" title=\"3. for…in 和for…of总结\"></a>3. for…in 和for…of总结</h1><pre><code>对于for...in，它可以遍历自有的、原型上的、继承来的可枚举属性，适合去遍历对象,并得到属性名\n对于for...of，它可以遍历可迭代的对象，可以得到可迭代对象属性的值，适合遍历字符串、数组、Set、Map等\n</code></pre>"},{"title":"js可迭代对象","toc":true,"_content":"## js可迭代对象\n`可迭代对象的原型中都包含Symbol.iterator 属性`\n```\nSet(0) {}\nsize: (...)\n__proto__: Set\nadd: ƒ add()\nclear: ƒ clear()\nconstructor: ƒ Set()\ndelete: ƒ delete()\nentries: ƒ entries()\nforEach: ƒ forEach()\nhas: ƒ has()\nkeys: ƒ values()\nsize: (...)\nvalues: ƒ values()\nSymbol(Symbol.iterator): ƒ values()\nSymbol(Symbol.toStringTag): \"Set\"\nget size: ƒ size()\n__proto__: Object\n[[Entries]]: Array(0)\n```\n常用的可迭代对象，有数组、Set、Map、字符串。\n## 判断可迭代的方法\n\n`Symbol.iterator in Object(iter)`\n判断被判断对象的原型连上是不是有Symbol.iterator属性。\n```\nSymbol.iterator in Object([1,2])//true\nSymbol.iterator in Object({})//false\nObject(12) => Number(12)\nObject() 相当于 new Object();是对Object()里内容类型的实例\n```\n`typeof obj[Symbol.iterator] === 'function'`\n```\nvar arr = [];\ntypeof arr[Symbol.iterator] === 'function' //true\n```","source":"_posts/js可迭代对象.md","raw":"---\ntitle: js可迭代对象\ntoc: true\ntags: \n- JS\n- Iterable\n---\n## js可迭代对象\n`可迭代对象的原型中都包含Symbol.iterator 属性`\n```\nSet(0) {}\nsize: (...)\n__proto__: Set\nadd: ƒ add()\nclear: ƒ clear()\nconstructor: ƒ Set()\ndelete: ƒ delete()\nentries: ƒ entries()\nforEach: ƒ forEach()\nhas: ƒ has()\nkeys: ƒ values()\nsize: (...)\nvalues: ƒ values()\nSymbol(Symbol.iterator): ƒ values()\nSymbol(Symbol.toStringTag): \"Set\"\nget size: ƒ size()\n__proto__: Object\n[[Entries]]: Array(0)\n```\n常用的可迭代对象，有数组、Set、Map、字符串。\n## 判断可迭代的方法\n\n`Symbol.iterator in Object(iter)`\n判断被判断对象的原型连上是不是有Symbol.iterator属性。\n```\nSymbol.iterator in Object([1,2])//true\nSymbol.iterator in Object({})//false\nObject(12) => Number(12)\nObject() 相当于 new Object();是对Object()里内容类型的实例\n```\n`typeof obj[Symbol.iterator] === 'function'`\n```\nvar arr = [];\ntypeof arr[Symbol.iterator] === 'function' //true\n```","slug":"js可迭代对象","published":1,"date":"2019-12-19T15:52:56.143Z","updated":"2019-12-19T15:52:56.143Z","_id":"ck4cwgni8001dckukzefkvkg2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"js可迭代对象\"><a href=\"#js可迭代对象\" class=\"headerlink\" title=\"js可迭代对象\"></a>js可迭代对象</h2><p><code>可迭代对象的原型中都包含Symbol.iterator 属性</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set(0) &#123;&#125;</span><br><span class=\"line\">size: (...)</span><br><span class=\"line\">__proto__: Set</span><br><span class=\"line\">add: ƒ add()</span><br><span class=\"line\">clear: ƒ clear()</span><br><span class=\"line\">constructor: ƒ Set()</span><br><span class=\"line\">delete: ƒ delete()</span><br><span class=\"line\">entries: ƒ entries()</span><br><span class=\"line\">forEach: ƒ forEach()</span><br><span class=\"line\">has: ƒ has()</span><br><span class=\"line\">keys: ƒ values()</span><br><span class=\"line\">size: (...)</span><br><span class=\"line\">values: ƒ values()</span><br><span class=\"line\">Symbol(Symbol.iterator): ƒ values()</span><br><span class=\"line\">Symbol(Symbol.toStringTag): &quot;Set&quot;</span><br><span class=\"line\">get size: ƒ size()</span><br><span class=\"line\">__proto__: Object</span><br><span class=\"line\">[[Entries]]: Array(0)</span><br></pre></td></tr></table></figure></p>\n<p>常用的可迭代对象，有数组、Set、Map、字符串。</p>\n<h2 id=\"判断可迭代的方法\"><a href=\"#判断可迭代的方法\" class=\"headerlink\" title=\"判断可迭代的方法\"></a>判断可迭代的方法</h2><p><code>Symbol.iterator in Object(iter)</code><br>判断被判断对象的原型连上是不是有Symbol.iterator属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Symbol.iterator in Object([1,2])//true</span><br><span class=\"line\">Symbol.iterator in Object(&#123;&#125;)//false</span><br><span class=\"line\">Object(12) =&gt; Number(12)</span><br><span class=\"line\">Object() 相当于 new Object();是对Object()里内容类型的实例</span><br></pre></td></tr></table></figure></p>\n<p><code>typeof obj[Symbol.iterator] === &#39;function&#39;</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [];</span><br><span class=\"line\">typeof arr[Symbol.iterator] === &apos;function&apos; //true</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"js可迭代对象\"><a href=\"#js可迭代对象\" class=\"headerlink\" title=\"js可迭代对象\"></a>js可迭代对象</h2><p><code>可迭代对象的原型中都包含Symbol.iterator 属性</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set(0) &#123;&#125;</span><br><span class=\"line\">size: (...)</span><br><span class=\"line\">__proto__: Set</span><br><span class=\"line\">add: ƒ add()</span><br><span class=\"line\">clear: ƒ clear()</span><br><span class=\"line\">constructor: ƒ Set()</span><br><span class=\"line\">delete: ƒ delete()</span><br><span class=\"line\">entries: ƒ entries()</span><br><span class=\"line\">forEach: ƒ forEach()</span><br><span class=\"line\">has: ƒ has()</span><br><span class=\"line\">keys: ƒ values()</span><br><span class=\"line\">size: (...)</span><br><span class=\"line\">values: ƒ values()</span><br><span class=\"line\">Symbol(Symbol.iterator): ƒ values()</span><br><span class=\"line\">Symbol(Symbol.toStringTag): &quot;Set&quot;</span><br><span class=\"line\">get size: ƒ size()</span><br><span class=\"line\">__proto__: Object</span><br><span class=\"line\">[[Entries]]: Array(0)</span><br></pre></td></tr></table></figure></p>\n<p>常用的可迭代对象，有数组、Set、Map、字符串。</p>\n<h2 id=\"判断可迭代的方法\"><a href=\"#判断可迭代的方法\" class=\"headerlink\" title=\"判断可迭代的方法\"></a>判断可迭代的方法</h2><p><code>Symbol.iterator in Object(iter)</code><br>判断被判断对象的原型连上是不是有Symbol.iterator属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Symbol.iterator in Object([1,2])//true</span><br><span class=\"line\">Symbol.iterator in Object(&#123;&#125;)//false</span><br><span class=\"line\">Object(12) =&gt; Number(12)</span><br><span class=\"line\">Object() 相当于 new Object();是对Object()里内容类型的实例</span><br></pre></td></tr></table></figure></p>\n<p><code>typeof obj[Symbol.iterator] === &#39;function&#39;</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [];</span><br><span class=\"line\">typeof arr[Symbol.iterator] === &apos;function&apos; //true</span><br></pre></td></tr></table></figure></p>\n"},{"title":"CSS height","toc":true,"_content":"### max-height，min-height，height一起使用时，优先级问题\n\n---\n**常规操作：**\n\nmax-height 这个属性会阻止 height 属性的设置值变得比 max-height 更大。\n<!--more-->\n\nmax-height 属性用来设置给定元素的最大高度.如果height 属性设置的高度比该属性设置的高度还大,则height 属性会失效,max-height 重载（覆盖掉） height.\n\n同理min-height同时也是限定height的值小于min-height的值，当他小于min-height的时候，则取min-height.\n\nmax-height(顶) > height  >min-height(保底)\n\n**非常规操作：**\n\n如果min-height的值大于max-hight， 那么无论heightd的值大于min-height还是小于min-height的值都会取min-height的值.\n\n但是我觉得正常人应该不会把min-height的值设的比max-height的值吧，哈哈。\n\n---\n> 参考链接：\nhttp://www.cnblogs.com/websmile/p/9506878.html\n","source":"_posts/max-height，min-height，height一起使用时，优先级问题.md","raw":"---\ntitle: CSS height\ntags: \n- CSS\n- max-hight\n- min-hight\ntoc: true\n---\n### max-height，min-height，height一起使用时，优先级问题\n\n---\n**常规操作：**\n\nmax-height 这个属性会阻止 height 属性的设置值变得比 max-height 更大。\n<!--more-->\n\nmax-height 属性用来设置给定元素的最大高度.如果height 属性设置的高度比该属性设置的高度还大,则height 属性会失效,max-height 重载（覆盖掉） height.\n\n同理min-height同时也是限定height的值小于min-height的值，当他小于min-height的时候，则取min-height.\n\nmax-height(顶) > height  >min-height(保底)\n\n**非常规操作：**\n\n如果min-height的值大于max-hight， 那么无论heightd的值大于min-height还是小于min-height的值都会取min-height的值.\n\n但是我觉得正常人应该不会把min-height的值设的比max-height的值吧，哈哈。\n\n---\n> 参考链接：\nhttp://www.cnblogs.com/websmile/p/9506878.html\n","slug":"max-height，min-height，height一起使用时，优先级问题","published":1,"date":"2019-12-19T15:52:56.144Z","updated":"2019-12-19T15:52:56.144Z","_id":"ck4cwgni9001fckukrbd1acev","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"max-height，min-height，height一起使用时，优先级问题\"><a href=\"#max-height，min-height，height一起使用时，优先级问题\" class=\"headerlink\" title=\"max-height，min-height，height一起使用时，优先级问题\"></a>max-height，min-height，height一起使用时，优先级问题</h3><hr>\n<p><strong>常规操作：</strong></p>\n<p>max-height 这个属性会阻止 height 属性的设置值变得比 max-height 更大。<br><a id=\"more\"></a></p>\n<p>max-height 属性用来设置给定元素的最大高度.如果height 属性设置的高度比该属性设置的高度还大,则height 属性会失效,max-height 重载（覆盖掉） height.</p>\n<p>同理min-height同时也是限定height的值小于min-height的值，当他小于min-height的时候，则取min-height.</p>\n<p>max-height(顶) &gt; height  &gt;min-height(保底)</p>\n<p><strong>非常规操作：</strong></p>\n<p>如果min-height的值大于max-hight， 那么无论heightd的值大于min-height还是小于min-height的值都会取min-height的值.</p>\n<p>但是我觉得正常人应该不会把min-height的值设的比max-height的值吧，哈哈。</p>\n<hr>\n<blockquote>\n<p>参考链接：<br><a href=\"http://www.cnblogs.com/websmile/p/9506878.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/websmile/p/9506878.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"max-height，min-height，height一起使用时，优先级问题\"><a href=\"#max-height，min-height，height一起使用时，优先级问题\" class=\"headerlink\" title=\"max-height，min-height，height一起使用时，优先级问题\"></a>max-height，min-height，height一起使用时，优先级问题</h3><hr>\n<p><strong>常规操作：</strong></p>\n<p>max-height 这个属性会阻止 height 属性的设置值变得比 max-height 更大。<br>","more":"</p>\n<p>max-height 属性用来设置给定元素的最大高度.如果height 属性设置的高度比该属性设置的高度还大,则height 属性会失效,max-height 重载（覆盖掉） height.</p>\n<p>同理min-height同时也是限定height的值小于min-height的值，当他小于min-height的时候，则取min-height.</p>\n<p>max-height(顶) &gt; height  &gt;min-height(保底)</p>\n<p><strong>非常规操作：</strong></p>\n<p>如果min-height的值大于max-hight， 那么无论heightd的值大于min-height还是小于min-height的值都会取min-height的值.</p>\n<p>但是我觉得正常人应该不会把min-height的值设的比max-height的值吧，哈哈。</p>\n<hr>\n<blockquote>\n<p>参考链接：<br><a href=\"http://www.cnblogs.com/websmile/p/9506878.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/websmile/p/9506878.html</a></p>\n</blockquote>"},{"title":"window.location","toc":true,"_content":"## location\n### location.href\n  - location.href对应的是整个URL。\n```js\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/origin\n```\n### location.origin\n  - 从协议名到pathname之间的部分,如果有协议包含协议名。\n```js\nvar result = window.location.origin; // Returns:'https://developer.mozilla.org'\n```\n### location.host\n返回主机名和端口号\n```js\nlocation.href = \"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"\nlocation.host == \"developer.mozilla.org:443\"\n```\n<!--more-->\n### location.hostname（主机名）\n返回主机名\n```js\nlocation.href = \"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"\nlocation.host == \"developer.mozilla.org\"\n```\n### location.pathname\n返回路径名\n```js\nlocation.href = \"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"\nlocation.pathname == \"en-US/HTMLHyperlinkElementUtils.host\"\n```\n当遇到？#字符时会截止\n```js\nhttps://www.google.com/search?q=window.location&oq=window.lo&aqs=chrome.2.69i57j0l5.9017j0j0&sourceid=chrome&ie=UTF-8\nlocation.pathname === 'search'\n```\n### location.search\n返回？及后面的url字段\n```js\nhttps://www.google.com/search?q=window.location&oq=window.lo&aqs=chrome.2.69i57j0l5.9017j0j0&sourceid=chrome&ie=UTF-8\nlocation.search === \"?q=window.location&oq=window.lo&aqs=chrome.2.69i57j0l5.9017j0j0&sourceid=chrome&ie=UTF-8\"\n```\n### location.hash\n返回#后字段\n```js\nhttps://dev.cn-northwest-1.test.bwtsi.cn/#/Tradeshift.Proforma/1ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments\nlocation.hash == `#/Tradeshift.Proforma/1ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments`\n```\n## location.search和location.hash的坑\n理想状态下我们可以直接拿到类似于`?/a=b&b=c`和`#comment`这样的字段，但是这里是有坑的\n\neg:\n```js\n// http://career.cloud.cmbchina.com/index.html#jobList?id=96574F8D-C7ED-4772-AE7C-BAC896D190C1\nlocation.search = ''\nlocation.hash = '#jobList?id=96574F8D-C7ED-4772-AE7C-BAC896D190C1'\n```\n其实这个现象会存在于使用hashRooter的react项目中。所以如果路由用的hashRooter，来取search参数是需要手动用代码取的。\n如果你以为取search的时候，只要使用location.search，那就掉坑里了。具体怎么操作可能还需要观察一下接口定义，目前并没有想到一劳永逸的算法。当然如果项目不用hash路由的话，那就使用location.search。\n\n\n\n","source":"_posts/location.md","raw":"---\ntitle: window.location\ntags:  \n- Web\n- location\ntoc: true \n---\n## location\n### location.href\n  - location.href对应的是整个URL。\n```js\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/origin\n```\n### location.origin\n  - 从协议名到pathname之间的部分,如果有协议包含协议名。\n```js\nvar result = window.location.origin; // Returns:'https://developer.mozilla.org'\n```\n### location.host\n返回主机名和端口号\n```js\nlocation.href = \"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"\nlocation.host == \"developer.mozilla.org:443\"\n```\n<!--more-->\n### location.hostname（主机名）\n返回主机名\n```js\nlocation.href = \"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"\nlocation.host == \"developer.mozilla.org\"\n```\n### location.pathname\n返回路径名\n```js\nlocation.href = \"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"\nlocation.pathname == \"en-US/HTMLHyperlinkElementUtils.host\"\n```\n当遇到？#字符时会截止\n```js\nhttps://www.google.com/search?q=window.location&oq=window.lo&aqs=chrome.2.69i57j0l5.9017j0j0&sourceid=chrome&ie=UTF-8\nlocation.pathname === 'search'\n```\n### location.search\n返回？及后面的url字段\n```js\nhttps://www.google.com/search?q=window.location&oq=window.lo&aqs=chrome.2.69i57j0l5.9017j0j0&sourceid=chrome&ie=UTF-8\nlocation.search === \"?q=window.location&oq=window.lo&aqs=chrome.2.69i57j0l5.9017j0j0&sourceid=chrome&ie=UTF-8\"\n```\n### location.hash\n返回#后字段\n```js\nhttps://dev.cn-northwest-1.test.bwtsi.cn/#/Tradeshift.Proforma/1ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments\nlocation.hash == `#/Tradeshift.Proforma/1ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments`\n```\n## location.search和location.hash的坑\n理想状态下我们可以直接拿到类似于`?/a=b&b=c`和`#comment`这样的字段，但是这里是有坑的\n\neg:\n```js\n// http://career.cloud.cmbchina.com/index.html#jobList?id=96574F8D-C7ED-4772-AE7C-BAC896D190C1\nlocation.search = ''\nlocation.hash = '#jobList?id=96574F8D-C7ED-4772-AE7C-BAC896D190C1'\n```\n其实这个现象会存在于使用hashRooter的react项目中。所以如果路由用的hashRooter，来取search参数是需要手动用代码取的。\n如果你以为取search的时候，只要使用location.search，那就掉坑里了。具体怎么操作可能还需要观察一下接口定义，目前并没有想到一劳永逸的算法。当然如果项目不用hash路由的话，那就使用location.search。\n\n\n\n","slug":"location","published":1,"date":"2019-12-19T15:52:56.144Z","updated":"2019-12-19T15:52:56.144Z","_id":"ck4cwgnia001ickuk6ia6hjwf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h2><h3 id=\"location-href\"><a href=\"#location-href\" class=\"headerlink\" title=\"location.href\"></a>location.href</h3><ul>\n<li>location.href对应的是整个URL。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/origin</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"location-origin\"><a href=\"#location-origin\" class=\"headerlink\" title=\"location.origin\"></a>location.origin</h3><ul>\n<li>从协议名到pathname之间的部分,如果有协议包含协议名。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">window</span>.location.origin; <span class=\"comment\">// Returns:'https://developer.mozilla.org'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"location-host\"><a href=\"#location-host\" class=\"headerlink\" title=\"location.host\"></a>location.host</h3><p>返回主机名和端口号<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.href = <span class=\"string\">\"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"</span></span><br><span class=\"line\">location.host == <span class=\"string\">\"developer.mozilla.org:443\"</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"location-hostname（主机名）\"><a href=\"#location-hostname（主机名）\" class=\"headerlink\" title=\"location.hostname（主机名）\"></a>location.hostname（主机名）</h3><p>返回主机名<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.href = <span class=\"string\">\"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"</span></span><br><span class=\"line\">location.host == <span class=\"string\">\"developer.mozilla.org\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"location-pathname\"><a href=\"#location-pathname\" class=\"headerlink\" title=\"location.pathname\"></a>location.pathname</h3><p>返回路径名<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.href = <span class=\"string\">\"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"</span></span><br><span class=\"line\">location.pathname == <span class=\"string\">\"en-US/HTMLHyperlinkElementUtils.host\"</span></span><br></pre></td></tr></table></figure></p>\n<p>当遇到？#字符时会截止<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//www.google.com/search?q=window.location&amp;oq=window.lo&amp;aqs=chrome.2.69i57j0l5.9017j0j0&amp;sourceid=chrome&amp;ie=UTF-8</span></span><br><span class=\"line\">location.pathname === <span class=\"string\">'search'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"location-search\"><a href=\"#location-search\" class=\"headerlink\" title=\"location.search\"></a>location.search</h3><p>返回？及后面的url字段<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//www.google.com/search?q=window.location&amp;oq=window.lo&amp;aqs=chrome.2.69i57j0l5.9017j0j0&amp;sourceid=chrome&amp;ie=UTF-8</span></span><br><span class=\"line\">location.search === <span class=\"string\">\"?q=window.location&amp;oq=window.lo&amp;aqs=chrome.2.69i57j0l5.9017j0j0&amp;sourceid=chrome&amp;ie=UTF-8\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"location-hash\"><a href=\"#location-hash\" class=\"headerlink\" title=\"location.hash\"></a>location.hash</h3><p>返回#后字段<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//dev.cn-northwest-1.test.bwtsi.cn/#/Tradeshift.Proforma/1ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments</span></span><br><span class=\"line\">location.hash == <span class=\"string\">`#/Tradeshift.Proforma/1ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments`</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"location-search和location-hash的坑\"><a href=\"#location-search和location-hash的坑\" class=\"headerlink\" title=\"location.search和location.hash的坑\"></a>location.search和location.hash的坑</h2><p>理想状态下我们可以直接拿到类似于<code>?/a=b&amp;b=c</code>和<code>#comment</code>这样的字段，但是这里是有坑的</p>\n<p>eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http://career.cloud.cmbchina.com/index.html#jobList?id=96574F8D-C7ED-4772-AE7C-BAC896D190C1</span></span><br><span class=\"line\">location.search = <span class=\"string\">''</span></span><br><span class=\"line\">location.hash = <span class=\"string\">'#jobList?id=96574F8D-C7ED-4772-AE7C-BAC896D190C1'</span></span><br></pre></td></tr></table></figure></p>\n<p>其实这个现象会存在于使用hashRooter的react项目中。所以如果路由用的hashRooter，来取search参数是需要手动用代码取的。<br>如果你以为取search的时候，只要使用location.search，那就掉坑里了。具体怎么操作可能还需要观察一下接口定义，目前并没有想到一劳永逸的算法。当然如果项目不用hash路由的话，那就使用location.search。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h2><h3 id=\"location-href\"><a href=\"#location-href\" class=\"headerlink\" title=\"location.href\"></a>location.href</h3><ul>\n<li>location.href对应的是整个URL。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/origin</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"location-origin\"><a href=\"#location-origin\" class=\"headerlink\" title=\"location.origin\"></a>location.origin</h3><ul>\n<li>从协议名到pathname之间的部分,如果有协议包含协议名。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">window</span>.location.origin; <span class=\"comment\">// Returns:'https://developer.mozilla.org'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"location-host\"><a href=\"#location-host\" class=\"headerlink\" title=\"location.host\"></a>location.host</h3><p>返回主机名和端口号<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.href = <span class=\"string\">\"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"</span></span><br><span class=\"line\">location.host == <span class=\"string\">\"developer.mozilla.org:443\"</span></span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"location-hostname（主机名）\"><a href=\"#location-hostname（主机名）\" class=\"headerlink\" title=\"location.hostname（主机名）\"></a>location.hostname（主机名）</h3><p>返回主机名<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.href = <span class=\"string\">\"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"</span></span><br><span class=\"line\">location.host == <span class=\"string\">\"developer.mozilla.org\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"location-pathname\"><a href=\"#location-pathname\" class=\"headerlink\" title=\"location.pathname\"></a>location.pathname</h3><p>返回路径名<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.href = <span class=\"string\">\"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"</span></span><br><span class=\"line\">location.pathname == <span class=\"string\">\"en-US/HTMLHyperlinkElementUtils.host\"</span></span><br></pre></td></tr></table></figure></p>\n<p>当遇到？#字符时会截止<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//www.google.com/search?q=window.location&amp;oq=window.lo&amp;aqs=chrome.2.69i57j0l5.9017j0j0&amp;sourceid=chrome&amp;ie=UTF-8</span></span><br><span class=\"line\">location.pathname === <span class=\"string\">'search'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"location-search\"><a href=\"#location-search\" class=\"headerlink\" title=\"location.search\"></a>location.search</h3><p>返回？及后面的url字段<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//www.google.com/search?q=window.location&amp;oq=window.lo&amp;aqs=chrome.2.69i57j0l5.9017j0j0&amp;sourceid=chrome&amp;ie=UTF-8</span></span><br><span class=\"line\">location.search === <span class=\"string\">\"?q=window.location&amp;oq=window.lo&amp;aqs=chrome.2.69i57j0l5.9017j0j0&amp;sourceid=chrome&amp;ie=UTF-8\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"location-hash\"><a href=\"#location-hash\" class=\"headerlink\" title=\"location.hash\"></a>location.hash</h3><p>返回#后字段<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//dev.cn-northwest-1.test.bwtsi.cn/#/Tradeshift.Proforma/1ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments</span></span><br><span class=\"line\">location.hash == <span class=\"string\">`#/Tradeshift.Proforma/1ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments`</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"location-search和location-hash的坑\"><a href=\"#location-search和location-hash的坑\" class=\"headerlink\" title=\"location.search和location.hash的坑\"></a>location.search和location.hash的坑</h2><p>理想状态下我们可以直接拿到类似于<code>?/a=b&amp;b=c</code>和<code>#comment</code>这样的字段，但是这里是有坑的</p>\n<p>eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http://career.cloud.cmbchina.com/index.html#jobList?id=96574F8D-C7ED-4772-AE7C-BAC896D190C1</span></span><br><span class=\"line\">location.search = <span class=\"string\">''</span></span><br><span class=\"line\">location.hash = <span class=\"string\">'#jobList?id=96574F8D-C7ED-4772-AE7C-BAC896D190C1'</span></span><br></pre></td></tr></table></figure></p>\n<p>其实这个现象会存在于使用hashRooter的react项目中。所以如果路由用的hashRooter，来取search参数是需要手动用代码取的。<br>如果你以为取search的时候，只要使用location.search，那就掉坑里了。具体怎么操作可能还需要观察一下接口定义，目前并没有想到一劳永逸的算法。当然如果项目不用hash路由的话，那就使用location.search。</p>"},{"title":"mouseenter和mouseove的区别","_content":"\n使用这段代码运行时，代码会一直占用主线程，造成线程阻塞\n```js\nconst http = require('http');\nconst longComputation = () => {\n  let sum = 0;\n  for (let i = 0; i < 1e10; i++) {\n    sum += i;\n  };\n  return sum;\n};\nconst server = http.createServer();\nserver.on('request', (req, res) => {\n  if (req.url === '/compute') {\n    console.info('计算开始',new Date());\n    const sum = longComputation();\n    console.info('计算结束',new Date());\n    return res.end(`Sum is ${sum}`);\n  } else {\n    res.end('Ok')\n  }\n});\n\nserver.listen(3000);\n```\n","source":"_posts/mouseenter and mouseover.md","raw":"---\ntitle: mouseenter和mouseove的区别\ntags:  \n- JS\n---\n\n使用这段代码运行时，代码会一直占用主线程，造成线程阻塞\n```js\nconst http = require('http');\nconst longComputation = () => {\n  let sum = 0;\n  for (let i = 0; i < 1e10; i++) {\n    sum += i;\n  };\n  return sum;\n};\nconst server = http.createServer();\nserver.on('request', (req, res) => {\n  if (req.url === '/compute') {\n    console.info('计算开始',new Date());\n    const sum = longComputation();\n    console.info('计算结束',new Date());\n    return res.end(`Sum is ${sum}`);\n  } else {\n    res.end('Ok')\n  }\n});\n\nserver.listen(3000);\n```\n","slug":"mouseenter and mouseover","published":1,"date":"2019-12-19T15:52:56.144Z","updated":"2019-12-19T15:52:56.145Z","_id":"ck4cwgnib001jckukx0d6tu5e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用这段代码运行时，代码会一直占用主线程，造成线程阻塞<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> longComputation = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer();</span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (req.url === <span class=\"string\">'/compute'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'计算开始'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sum = longComputation();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'计算结束'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.end(<span class=\"string\">`Sum is <span class=\"subst\">$&#123;sum&#125;</span>`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res.end(<span class=\"string\">'Ok'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用这段代码运行时，代码会一直占用主线程，造成线程阻塞<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> longComputation = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer();</span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (req.url === <span class=\"string\">'/compute'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'计算开始'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sum = longComputation();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'计算结束'</span>,<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.end(<span class=\"string\">`Sum is <span class=\"subst\">$&#123;sum&#125;</span>`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res.end(<span class=\"string\">'Ok'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"模块路径解析规则","toc":true,"_content":"### 模块路径解析规则\n 我们已经知道，require函数支持斜杠（/）或盘符（C:）开头的绝对路径，也支持./开头的相对路径。但这两种路径在模块之间建立了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其它模块的代码也需要跟着调整，变得牵一发动全身。因此，require函数支持第三种形式的路径，写法类似于foo/bar，并依次按照以下规则解析路径，直到找到模块位置。\n<!--more-->\n\n内置模块\n\n如果传递给require函数的是NodeJS内置模块名称，不做路径解析，直接返回内部模块的导出对象，例如require('fs')。\n\nnode_modules目录\n\nNodeJS定义了一个特殊的node_modules目录用于存放模块。例如某个模块的绝对路径是/home/user/hello.js，在该模块中使用require('foo/bar')方式加载模块时，则NodeJS依次尝试使用以下路径。\n\n\n```\n /home/user/node_modules/foo/bar\n /home/node_modules/foo/bar\n /node_modules/foo/bar\n NODE_PATH环境变量\n```\n\n与PATH环境变量类似，NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。NODE_PATH环境变量中包含一到多个目录路径，路径之间在Linux下使用:分隔，在Windows下使用;分隔。例如定义了以下NODE_PATH环境变量：\n\n\n```\nNODE_PATH=/home/user/lib:/home/lib\n```\n当使用require('foo/bar')的方式加载模块时，则NodeJS依次尝试以下路径。\n\n\n```\n/home/user/lib/foo/bar\n /home/lib/foo/bar\n```\n\nexport和moduel.export的区别：\nexports对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。以下例子中导出了一个公有方法。\n\n通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。\n\n","source":"_posts/node中require的路径解析.md","raw":"---\ntitle: 模块路径解析规则\ntags: \n- Node\ntoc: true\n---\n### 模块路径解析规则\n 我们已经知道，require函数支持斜杠（/）或盘符（C:）开头的绝对路径，也支持./开头的相对路径。但这两种路径在模块之间建立了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其它模块的代码也需要跟着调整，变得牵一发动全身。因此，require函数支持第三种形式的路径，写法类似于foo/bar，并依次按照以下规则解析路径，直到找到模块位置。\n<!--more-->\n\n内置模块\n\n如果传递给require函数的是NodeJS内置模块名称，不做路径解析，直接返回内部模块的导出对象，例如require('fs')。\n\nnode_modules目录\n\nNodeJS定义了一个特殊的node_modules目录用于存放模块。例如某个模块的绝对路径是/home/user/hello.js，在该模块中使用require('foo/bar')方式加载模块时，则NodeJS依次尝试使用以下路径。\n\n\n```\n /home/user/node_modules/foo/bar\n /home/node_modules/foo/bar\n /node_modules/foo/bar\n NODE_PATH环境变量\n```\n\n与PATH环境变量类似，NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。NODE_PATH环境变量中包含一到多个目录路径，路径之间在Linux下使用:分隔，在Windows下使用;分隔。例如定义了以下NODE_PATH环境变量：\n\n\n```\nNODE_PATH=/home/user/lib:/home/lib\n```\n当使用require('foo/bar')的方式加载模块时，则NodeJS依次尝试以下路径。\n\n\n```\n/home/user/lib/foo/bar\n /home/lib/foo/bar\n```\n\nexport和moduel.export的区别：\nexports对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。以下例子中导出了一个公有方法。\n\n通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。\n\n","slug":"node中require的路径解析","published":1,"date":"2019-12-19T15:52:56.145Z","updated":"2019-12-19T15:52:56.145Z","_id":"ck4cwgnic001lckukjxwzrzgc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"模块路径解析规则\"><a href=\"#模块路径解析规则\" class=\"headerlink\" title=\"模块路径解析规则\"></a>模块路径解析规则</h3><p> 我们已经知道，require函数支持斜杠（/）或盘符（C:）开头的绝对路径，也支持./开头的相对路径。但这两种路径在模块之间建立了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其它模块的代码也需要跟着调整，变得牵一发动全身。因此，require函数支持第三种形式的路径，写法类似于foo/bar，并依次按照以下规则解析路径，直到找到模块位置。<br><a id=\"more\"></a></p>\n<p>内置模块</p>\n<p>如果传递给require函数的是NodeJS内置模块名称，不做路径解析，直接返回内部模块的导出对象，例如require(‘fs’)。</p>\n<p>node_modules目录</p>\n<p>NodeJS定义了一个特殊的node_modules目录用于存放模块。例如某个模块的绝对路径是/home/user/hello.js，在该模块中使用require(‘foo/bar’)方式加载模块时，则NodeJS依次尝试使用以下路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/user/node_modules/foo/bar</span><br><span class=\"line\">/home/node_modules/foo/bar</span><br><span class=\"line\">/node_modules/foo/bar</span><br><span class=\"line\">NODE_PATH环境变量</span><br></pre></td></tr></table></figure>\n<p>与PATH环境变量类似，NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。NODE_PATH环境变量中包含一到多个目录路径，路径之间在Linux下使用:分隔，在Windows下使用;分隔。例如定义了以下NODE_PATH环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_PATH=/home/user/lib:/home/lib</span><br></pre></td></tr></table></figure>\n<p>当使用require(‘foo/bar’)的方式加载模块时，则NodeJS依次尝试以下路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/user/lib/foo/bar</span><br><span class=\"line\"> /home/lib/foo/bar</span><br></pre></td></tr></table></figure>\n<p>export和moduel.export的区别：<br>exports对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。以下例子中导出了一个公有方法。</p>\n<p>通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"模块路径解析规则\"><a href=\"#模块路径解析规则\" class=\"headerlink\" title=\"模块路径解析规则\"></a>模块路径解析规则</h3><p> 我们已经知道，require函数支持斜杠（/）或盘符（C:）开头的绝对路径，也支持./开头的相对路径。但这两种路径在模块之间建立了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其它模块的代码也需要跟着调整，变得牵一发动全身。因此，require函数支持第三种形式的路径，写法类似于foo/bar，并依次按照以下规则解析路径，直到找到模块位置。<br>","more":"</p>\n<p>内置模块</p>\n<p>如果传递给require函数的是NodeJS内置模块名称，不做路径解析，直接返回内部模块的导出对象，例如require(‘fs’)。</p>\n<p>node_modules目录</p>\n<p>NodeJS定义了一个特殊的node_modules目录用于存放模块。例如某个模块的绝对路径是/home/user/hello.js，在该模块中使用require(‘foo/bar’)方式加载模块时，则NodeJS依次尝试使用以下路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/user/node_modules/foo/bar</span><br><span class=\"line\">/home/node_modules/foo/bar</span><br><span class=\"line\">/node_modules/foo/bar</span><br><span class=\"line\">NODE_PATH环境变量</span><br></pre></td></tr></table></figure>\n<p>与PATH环境变量类似，NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。NODE_PATH环境变量中包含一到多个目录路径，路径之间在Linux下使用:分隔，在Windows下使用;分隔。例如定义了以下NODE_PATH环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_PATH=/home/user/lib:/home/lib</span><br></pre></td></tr></table></figure>\n<p>当使用require(‘foo/bar’)的方式加载模块时，则NodeJS依次尝试以下路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/user/lib/foo/bar</span><br><span class=\"line\"> /home/lib/foo/bar</span><br></pre></td></tr></table></figure>\n<p>export和moduel.export的区别：<br>exports对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。以下例子中导出了一个公有方法。</p>\n<p>通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。</p>"},{"title":"node 版本号命名","toc":true,"_content":"## node 版本号命名：\n### 版本号的命名：\n根据国际主流的惯例，我们使用「语义化版本（Semantic Versioning）」的命名方式，有时简称 SemVer。\n\n语义化版本号（以下简称「版本号」）的格式是：<major>.<minor>.<patch>。即使用三位非负整数，以点号 . 连接。\n\n### 每一位的含义：\n<major> 即**主版本号**，俗称大版本升级。改动到主版本号时，标志着 API 发生了巨大变化，包括但不限于新增特性、修改机制、删除功能， 一般不兼容上一个主版本号。\n\n<minor> 即**次版本号**，俗称小版本升级。当我们进行常规的新增或修改功能时，改动次版本号，但是 必须是向前兼容的。这也意味着我们 不能直接删除某个功能。如若必要，我们可以在 changelog 中标记某项功能为「即将删除（Deprecated）」，然后在下一个大版本中将其彻底删除。\n\n<patch> 即**修订号**，俗称 bug 修复。顾名思义，如果仅仅为了修复或调整一些小问题，我们就只改动修订号。\n<!--more-->\n\n### 注意事项：\n版本号前不要加 v。\n\n不要在数字前补 0。错误示例：01.12.03。\n\n每一位版本号按照 +1 的速度递增，不要在版本号之间跳跃。\n\n主版本号停留在 0 的版本号，即 0.x.x 应当视作还在内部开发阶段的代码。如果代码有公共 API，此时不宜对外公开。\n\n1.0.0 的版本号用于界定公共 API 的形成。\n\n当次版本号递增时，修订号归零；当主版本号递增时，次版本号、修订号归零。\n\n进行新的开发时，版本号从 0.1.0 开始。\n\n如果不小心把一个不兼容的改版当成了次版本号发行，应当发行一个新的次版本号来更正这个问题并且恢复向下兼容。注意 不能去修改已发行的版本。\n\n### 快速修复版本的方法：\n递增一个修订号：\nnpm version path\n\n递增一个次版本号:\nnpm version minor\n\n递增一个主版本号:\nnpm version major\n\n### npm 依赖包版本号~和^的区别:\n~和^这种标记法标记的是「版本号范围（version range）」\n\n前者会匹配最近的小版本依赖包，比如~1.2.3会匹配所有1.2.x版本，但是不包括1.3.0\n \n后者会匹配最新的大版本依赖包，比如^1.2.3会匹配所有1.x.x的包，包括1.3.0，但是不包括2.0.0\n\n\n---\n[点击参考链接](http://taobaofed.org/blog/2016/08/05/instructions-of-semver/)\n\n[node release](https://nodejs.org/zh-cn/download/releases/)\n","source":"_posts/node版本号.md","raw":"---\ntitle: node 版本号命名\ntags: \n- Node\ntoc: true\n---\n## node 版本号命名：\n### 版本号的命名：\n根据国际主流的惯例，我们使用「语义化版本（Semantic Versioning）」的命名方式，有时简称 SemVer。\n\n语义化版本号（以下简称「版本号」）的格式是：<major>.<minor>.<patch>。即使用三位非负整数，以点号 . 连接。\n\n### 每一位的含义：\n<major> 即**主版本号**，俗称大版本升级。改动到主版本号时，标志着 API 发生了巨大变化，包括但不限于新增特性、修改机制、删除功能， 一般不兼容上一个主版本号。\n\n<minor> 即**次版本号**，俗称小版本升级。当我们进行常规的新增或修改功能时，改动次版本号，但是 必须是向前兼容的。这也意味着我们 不能直接删除某个功能。如若必要，我们可以在 changelog 中标记某项功能为「即将删除（Deprecated）」，然后在下一个大版本中将其彻底删除。\n\n<patch> 即**修订号**，俗称 bug 修复。顾名思义，如果仅仅为了修复或调整一些小问题，我们就只改动修订号。\n<!--more-->\n\n### 注意事项：\n版本号前不要加 v。\n\n不要在数字前补 0。错误示例：01.12.03。\n\n每一位版本号按照 +1 的速度递增，不要在版本号之间跳跃。\n\n主版本号停留在 0 的版本号，即 0.x.x 应当视作还在内部开发阶段的代码。如果代码有公共 API，此时不宜对外公开。\n\n1.0.0 的版本号用于界定公共 API 的形成。\n\n当次版本号递增时，修订号归零；当主版本号递增时，次版本号、修订号归零。\n\n进行新的开发时，版本号从 0.1.0 开始。\n\n如果不小心把一个不兼容的改版当成了次版本号发行，应当发行一个新的次版本号来更正这个问题并且恢复向下兼容。注意 不能去修改已发行的版本。\n\n### 快速修复版本的方法：\n递增一个修订号：\nnpm version path\n\n递增一个次版本号:\nnpm version minor\n\n递增一个主版本号:\nnpm version major\n\n### npm 依赖包版本号~和^的区别:\n~和^这种标记法标记的是「版本号范围（version range）」\n\n前者会匹配最近的小版本依赖包，比如~1.2.3会匹配所有1.2.x版本，但是不包括1.3.0\n \n后者会匹配最新的大版本依赖包，比如^1.2.3会匹配所有1.x.x的包，包括1.3.0，但是不包括2.0.0\n\n\n---\n[点击参考链接](http://taobaofed.org/blog/2016/08/05/instructions-of-semver/)\n\n[node release](https://nodejs.org/zh-cn/download/releases/)\n","slug":"node版本号","published":1,"date":"2019-12-19T15:52:56.145Z","updated":"2019-12-19T15:52:56.146Z","_id":"ck4cwgnid001nckukufr8fufj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"node-版本号命名：\"><a href=\"#node-版本号命名：\" class=\"headerlink\" title=\"node 版本号命名：\"></a>node 版本号命名：</h2><h3 id=\"版本号的命名：\"><a href=\"#版本号的命名：\" class=\"headerlink\" title=\"版本号的命名：\"></a>版本号的命名：</h3><p>根据国际主流的惯例，我们使用「语义化版本（Semantic Versioning）」的命名方式，有时简称 SemVer。</p>\n<p>语义化版本号（以下简称「版本号」）的格式是：<major>.<minor>.<patch>。即使用三位非负整数，以点号 . 连接。</patch></minor></major></p>\n<h3 id=\"每一位的含义：\"><a href=\"#每一位的含义：\" class=\"headerlink\" title=\"每一位的含义：\"></a>每一位的含义：</h3><p><major> 即<strong>主版本号</strong>，俗称大版本升级。改动到主版本号时，标志着 API 发生了巨大变化，包括但不限于新增特性、修改机制、删除功能， 一般不兼容上一个主版本号。</major></p>\n<p><minor> 即<strong>次版本号</strong>，俗称小版本升级。当我们进行常规的新增或修改功能时，改动次版本号，但是 必须是向前兼容的。这也意味着我们 不能直接删除某个功能。如若必要，我们可以在 changelog 中标记某项功能为「即将删除（Deprecated）」，然后在下一个大版本中将其彻底删除。</minor></p>\n<p><patch> 即<strong>修订号</strong>，俗称 bug 修复。顾名思义，如果仅仅为了修复或调整一些小问题，我们就只改动修订号。<br><a id=\"more\"></a></patch></p>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><p>版本号前不要加 v。</p>\n<p>不要在数字前补 0。错误示例：01.12.03。</p>\n<p>每一位版本号按照 +1 的速度递增，不要在版本号之间跳跃。</p>\n<p>主版本号停留在 0 的版本号，即 0.x.x 应当视作还在内部开发阶段的代码。如果代码有公共 API，此时不宜对外公开。</p>\n<p>1.0.0 的版本号用于界定公共 API 的形成。</p>\n<p>当次版本号递增时，修订号归零；当主版本号递增时，次版本号、修订号归零。</p>\n<p>进行新的开发时，版本号从 0.1.0 开始。</p>\n<p>如果不小心把一个不兼容的改版当成了次版本号发行，应当发行一个新的次版本号来更正这个问题并且恢复向下兼容。注意 不能去修改已发行的版本。</p>\n<h3 id=\"快速修复版本的方法：\"><a href=\"#快速修复版本的方法：\" class=\"headerlink\" title=\"快速修复版本的方法：\"></a>快速修复版本的方法：</h3><p>递增一个修订号：<br>npm version path</p>\n<p>递增一个次版本号:<br>npm version minor</p>\n<p>递增一个主版本号:<br>npm version major</p>\n<h3 id=\"npm-依赖包版本号-和-的区别\"><a href=\"#npm-依赖包版本号-和-的区别\" class=\"headerlink\" title=\"npm 依赖包版本号~和^的区别:\"></a>npm 依赖包版本号~和^的区别:</h3><p>~和^这种标记法标记的是「版本号范围（version range）」</p>\n<p>前者会匹配最近的小版本依赖包，比如~1.2.3会匹配所有1.2.x版本，但是不包括1.3.0</p>\n<p>后者会匹配最新的大版本依赖包，比如^1.2.3会匹配所有1.x.x的包，包括1.3.0，但是不包括2.0.0</p>\n<hr>\n<p><a href=\"http://taobaofed.org/blog/2016/08/05/instructions-of-semver/\" target=\"_blank\" rel=\"noopener\">点击参考链接</a></p>\n<p><a href=\"https://nodejs.org/zh-cn/download/releases/\" target=\"_blank\" rel=\"noopener\">node release</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"node-版本号命名：\"><a href=\"#node-版本号命名：\" class=\"headerlink\" title=\"node 版本号命名：\"></a>node 版本号命名：</h2><h3 id=\"版本号的命名：\"><a href=\"#版本号的命名：\" class=\"headerlink\" title=\"版本号的命名：\"></a>版本号的命名：</h3><p>根据国际主流的惯例，我们使用「语义化版本（Semantic Versioning）」的命名方式，有时简称 SemVer。</p>\n<p>语义化版本号（以下简称「版本号」）的格式是：<major>.<minor>.<patch>。即使用三位非负整数，以点号 . 连接。</patch></minor></major></p>\n<h3 id=\"每一位的含义：\"><a href=\"#每一位的含义：\" class=\"headerlink\" title=\"每一位的含义：\"></a>每一位的含义：</h3><p><major> 即<strong>主版本号</strong>，俗称大版本升级。改动到主版本号时，标志着 API 发生了巨大变化，包括但不限于新增特性、修改机制、删除功能， 一般不兼容上一个主版本号。</major></p>\n<p><minor> 即<strong>次版本号</strong>，俗称小版本升级。当我们进行常规的新增或修改功能时，改动次版本号，但是 必须是向前兼容的。这也意味着我们 不能直接删除某个功能。如若必要，我们可以在 changelog 中标记某项功能为「即将删除（Deprecated）」，然后在下一个大版本中将其彻底删除。</minor></p>\n<p><patch> 即<strong>修订号</strong>，俗称 bug 修复。顾名思义，如果仅仅为了修复或调整一些小问题，我们就只改动修订号。<br>","more":"</patch></p>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><p>版本号前不要加 v。</p>\n<p>不要在数字前补 0。错误示例：01.12.03。</p>\n<p>每一位版本号按照 +1 的速度递增，不要在版本号之间跳跃。</p>\n<p>主版本号停留在 0 的版本号，即 0.x.x 应当视作还在内部开发阶段的代码。如果代码有公共 API，此时不宜对外公开。</p>\n<p>1.0.0 的版本号用于界定公共 API 的形成。</p>\n<p>当次版本号递增时，修订号归零；当主版本号递增时，次版本号、修订号归零。</p>\n<p>进行新的开发时，版本号从 0.1.0 开始。</p>\n<p>如果不小心把一个不兼容的改版当成了次版本号发行，应当发行一个新的次版本号来更正这个问题并且恢复向下兼容。注意 不能去修改已发行的版本。</p>\n<h3 id=\"快速修复版本的方法：\"><a href=\"#快速修复版本的方法：\" class=\"headerlink\" title=\"快速修复版本的方法：\"></a>快速修复版本的方法：</h3><p>递增一个修订号：<br>npm version path</p>\n<p>递增一个次版本号:<br>npm version minor</p>\n<p>递增一个主版本号:<br>npm version major</p>\n<h3 id=\"npm-依赖包版本号-和-的区别\"><a href=\"#npm-依赖包版本号-和-的区别\" class=\"headerlink\" title=\"npm 依赖包版本号~和^的区别:\"></a>npm 依赖包版本号~和^的区别:</h3><p>~和^这种标记法标记的是「版本号范围（version range）」</p>\n<p>前者会匹配最近的小版本依赖包，比如~1.2.3会匹配所有1.2.x版本，但是不包括1.3.0</p>\n<p>后者会匹配最新的大版本依赖包，比如^1.2.3会匹配所有1.x.x的包，包括1.3.0，但是不包括2.0.0</p>\n<hr>\n<p><a href=\"http://taobaofed.org/blog/2016/08/05/instructions-of-semver/\" target=\"_blank\" rel=\"noopener\">点击参考链接</a></p>\n<p><a href=\"https://nodejs.org/zh-cn/download/releases/\" target=\"_blank\" rel=\"noopener\">node release</a></p>"},{"title":"模块调试技巧 - npm link","_content":"## 前言\n在本地开发npm包后，如何实现在本地调试修改后的npm包？频发的发布上线调试显然是不可靠的，npm link可以很好的解决问题。\n## npm link\n首先，在我们正在开发的模块的命令窗口使用`npm link`，我们会得到如下图的结果,此时就代表link成功\n![20190902134410.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902134410.png)\n\n## create-react-app\n[create-react-app](https://github.com/facebook/create-react-app)是一款React应用开发工具,我们可以在控制台通过`npx create-react-app my-app`来安装，然后`cd my-app`进入app，此时我们创建了一个很简单的react项目。\n\n此时，我们在本项目中输入`npm link <packageName>`\n![20190902135218.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902135218.png)\n\n> 注意： 如果本地安装了nvm，要保证npm link 和 npm link packageName 在同一个node版本中，不然会报错\n\n此时就可以在项目中引入该包，然后测试包的功能是否正常。\n![20190902135404.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902135404.png)\n\n测试完毕后，可以使用`npm unlink <npmPackage>`断开链接\n\n相关知识链接：[npx](http://www.ruanyifeng.com/blog/2019/02/npx.html)、[create-react-app](https://github.com/facebook/create-react-app)\n\n参考链接一：https://ui.muwenzi.com/apps/start/usage\n\n参考链接二：https://github.com/atian25/blog/issues/17\n\n参考链接三：https://juejin.im/post/5be0fe39518825171726d671","source":"_posts/npm包和npm link.md","raw":"---\ntitle: 模块调试技巧 - npm link\ntags: \n- Node\n- npm link\n- create-react-app\n---\n## 前言\n在本地开发npm包后，如何实现在本地调试修改后的npm包？频发的发布上线调试显然是不可靠的，npm link可以很好的解决问题。\n## npm link\n首先，在我们正在开发的模块的命令窗口使用`npm link`，我们会得到如下图的结果,此时就代表link成功\n![20190902134410.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902134410.png)\n\n## create-react-app\n[create-react-app](https://github.com/facebook/create-react-app)是一款React应用开发工具,我们可以在控制台通过`npx create-react-app my-app`来安装，然后`cd my-app`进入app，此时我们创建了一个很简单的react项目。\n\n此时，我们在本项目中输入`npm link <packageName>`\n![20190902135218.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902135218.png)\n\n> 注意： 如果本地安装了nvm，要保证npm link 和 npm link packageName 在同一个node版本中，不然会报错\n\n此时就可以在项目中引入该包，然后测试包的功能是否正常。\n![20190902135404.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902135404.png)\n\n测试完毕后，可以使用`npm unlink <npmPackage>`断开链接\n\n相关知识链接：[npx](http://www.ruanyifeng.com/blog/2019/02/npx.html)、[create-react-app](https://github.com/facebook/create-react-app)\n\n参考链接一：https://ui.muwenzi.com/apps/start/usage\n\n参考链接二：https://github.com/atian25/blog/issues/17\n\n参考链接三：https://juejin.im/post/5be0fe39518825171726d671","slug":"npm包和npm link","published":1,"date":"2019-12-19T15:52:56.146Z","updated":"2019-12-19T15:52:56.146Z","_id":"ck4cwgnie001qckuk4mzwu0on","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在本地开发npm包后，如何实现在本地调试修改后的npm包？频发的发布上线调试显然是不可靠的，npm link可以很好的解决问题。</p>\n<h2 id=\"npm-link\"><a href=\"#npm-link\" class=\"headerlink\" title=\"npm link\"></a>npm link</h2><p>首先，在我们正在开发的模块的命令窗口使用<code>npm link</code>，我们会得到如下图的结果,此时就代表link成功<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902134410.png\" alt=\"20190902134410.png\"></p>\n<h2 id=\"create-react-app\"><a href=\"#create-react-app\" class=\"headerlink\" title=\"create-react-app\"></a>create-react-app</h2><p><a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">create-react-app</a>是一款React应用开发工具,我们可以在控制台通过<code>npx create-react-app my-app</code>来安装，然后<code>cd my-app</code>进入app，此时我们创建了一个很简单的react项目。</p>\n<p>此时，我们在本项目中输入<code>npm link &lt;packageName&gt;</code><br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902135218.png\" alt=\"20190902135218.png\"></p>\n<blockquote>\n<p>注意： 如果本地安装了nvm，要保证npm link 和 npm link packageName 在同一个node版本中，不然会报错</p>\n</blockquote>\n<p>此时就可以在项目中引入该包，然后测试包的功能是否正常。<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902135404.png\" alt=\"20190902135404.png\"></p>\n<p>测试完毕后，可以使用<code>npm unlink &lt;npmPackage&gt;</code>断开链接</p>\n<p>相关知识链接：<a href=\"http://www.ruanyifeng.com/blog/2019/02/npx.html\" target=\"_blank\" rel=\"noopener\">npx</a>、<a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">create-react-app</a></p>\n<p>参考链接一：<a href=\"https://ui.muwenzi.com/apps/start/usage\" target=\"_blank\" rel=\"noopener\">https://ui.muwenzi.com/apps/start/usage</a></p>\n<p>参考链接二：<a href=\"https://github.com/atian25/blog/issues/17\" target=\"_blank\" rel=\"noopener\">https://github.com/atian25/blog/issues/17</a></p>\n<p>参考链接三：<a href=\"https://juejin.im/post/5be0fe39518825171726d671\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5be0fe39518825171726d671</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在本地开发npm包后，如何实现在本地调试修改后的npm包？频发的发布上线调试显然是不可靠的，npm link可以很好的解决问题。</p>\n<h2 id=\"npm-link\"><a href=\"#npm-link\" class=\"headerlink\" title=\"npm link\"></a>npm link</h2><p>首先，在我们正在开发的模块的命令窗口使用<code>npm link</code>，我们会得到如下图的结果,此时就代表link成功<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902134410.png\" alt=\"20190902134410.png\"></p>\n<h2 id=\"create-react-app\"><a href=\"#create-react-app\" class=\"headerlink\" title=\"create-react-app\"></a>create-react-app</h2><p><a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">create-react-app</a>是一款React应用开发工具,我们可以在控制台通过<code>npx create-react-app my-app</code>来安装，然后<code>cd my-app</code>进入app，此时我们创建了一个很简单的react项目。</p>\n<p>此时，我们在本项目中输入<code>npm link &lt;packageName&gt;</code><br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902135218.png\" alt=\"20190902135218.png\"></p>\n<blockquote>\n<p>注意： 如果本地安装了nvm，要保证npm link 和 npm link packageName 在同一个node版本中，不然会报错</p>\n</blockquote>\n<p>此时就可以在项目中引入该包，然后测试包的功能是否正常。<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190902135404.png\" alt=\"20190902135404.png\"></p>\n<p>测试完毕后，可以使用<code>npm unlink &lt;npmPackage&gt;</code>断开链接</p>\n<p>相关知识链接：<a href=\"http://www.ruanyifeng.com/blog/2019/02/npx.html\" target=\"_blank\" rel=\"noopener\">npx</a>、<a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">create-react-app</a></p>\n<p>参考链接一：<a href=\"https://ui.muwenzi.com/apps/start/usage\" target=\"_blank\" rel=\"noopener\">https://ui.muwenzi.com/apps/start/usage</a></p>\n<p>参考链接二：<a href=\"https://github.com/atian25/blog/issues/17\" target=\"_blank\" rel=\"noopener\">https://github.com/atian25/blog/issues/17</a></p>\n<p>参考链接三：<a href=\"https://juejin.im/post/5be0fe39518825171726d671\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5be0fe39518825171726d671</a></p>\n"},{"title":"node版本升级","toc":true,"_content":"\n## node\n\n更新npm ：\n\nnpm install -g npm\n\n更新node版本：\n\n先清除npm缓存：npm cache clean -f\n\n然后安装n模块：npm install -g n\n\n升级node.js到最新稳定版：n stable\n\n升级到指定版本： n  8.11.2\n\n如果是mac 升级出现错误 在命令前面家sudo\n\n参考链接：https://juejin.im/post/5b9739d1e51d450e9f66ee3b\n","source":"_posts/node-update.md","raw":"---\ntitle: node版本升级\ntags: \n- Node\ntoc: true\n---\n\n## node\n\n更新npm ：\n\nnpm install -g npm\n\n更新node版本：\n\n先清除npm缓存：npm cache clean -f\n\n然后安装n模块：npm install -g n\n\n升级node.js到最新稳定版：n stable\n\n升级到指定版本： n  8.11.2\n\n如果是mac 升级出现错误 在命令前面家sudo\n\n参考链接：https://juejin.im/post/5b9739d1e51d450e9f66ee3b\n","slug":"node-update","published":1,"date":"2019-12-19T15:52:56.145Z","updated":"2019-12-19T15:52:56.145Z","_id":"ck4cwgnif001sckukjxg6pulk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h2><p>更新npm ：</p>\n<p>npm install -g npm</p>\n<p>更新node版本：</p>\n<p>先清除npm缓存：npm cache clean -f</p>\n<p>然后安装n模块：npm install -g n</p>\n<p>升级node.js到最新稳定版：n stable</p>\n<p>升级到指定版本： n  8.11.2</p>\n<p>如果是mac 升级出现错误 在命令前面家sudo</p>\n<p>参考链接：<a href=\"https://juejin.im/post/5b9739d1e51d450e9f66ee3b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b9739d1e51d450e9f66ee3b</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h2><p>更新npm ：</p>\n<p>npm install -g npm</p>\n<p>更新node版本：</p>\n<p>先清除npm缓存：npm cache clean -f</p>\n<p>然后安装n模块：npm install -g n</p>\n<p>升级node.js到最新稳定版：n stable</p>\n<p>升级到指定版本： n  8.11.2</p>\n<p>如果是mac 升级出现错误 在命令前面家sudo</p>\n<p>参考链接：<a href=\"https://juejin.im/post/5b9739d1e51d450e9f66ee3b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b9739d1e51d450e9f66ee3b</a></p>\n"},{"title":"如何使用npm下载特定版本的包","_content":"##如何使用npm下载特定版本的包：\n\nnpm install parseString@<version>\n\n批量安装包：当需要安装多个包时，可以在package.json的dependencies中添加相应的包名和版本号，使用npm install安装所有的包。\n\n```\n{\n    \"name\": \"node-echo\",\n    \"main\": \"./lib/echo.js\",\n    \"dependencies\": {\n        \"argv\": \"0.0.2\"\n    }\n}\n```\nnpm update 包名 ；可以把对应的包更新到最新的版本。\n\n\n","source":"_posts/npm安装包.md","raw":"---\ntitle: 如何使用npm下载特定版本的包\ntags: \n- Node\n---\n##如何使用npm下载特定版本的包：\n\nnpm install parseString@<version>\n\n批量安装包：当需要安装多个包时，可以在package.json的dependencies中添加相应的包名和版本号，使用npm install安装所有的包。\n\n```\n{\n    \"name\": \"node-echo\",\n    \"main\": \"./lib/echo.js\",\n    \"dependencies\": {\n        \"argv\": \"0.0.2\"\n    }\n}\n```\nnpm update 包名 ；可以把对应的包更新到最新的版本。\n\n\n","slug":"npm安装包","published":1,"date":"2019-12-19T15:52:56.146Z","updated":"2019-12-19T15:52:56.146Z","_id":"ck4cwgnig001uckuk3k2sh3sc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>##如何使用npm下载特定版本的包：</p>\n<p>npm install parseString@<version></version></p>\n<p>批量安装包：当需要安装多个包时，可以在package.json的dependencies中添加相应的包名和版本号，使用npm install安装所有的包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;node-echo&quot;,</span><br><span class=\"line\">    &quot;main&quot;: &quot;./lib/echo.js&quot;,</span><br><span class=\"line\">    &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">        &quot;argv&quot;: &quot;0.0.2&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>npm update 包名 ；可以把对应的包更新到最新的版本。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##如何使用npm下载特定版本的包：</p>\n<p>npm install parseString@<version></version></p>\n<p>批量安装包：当需要安装多个包时，可以在package.json的dependencies中添加相应的包名和版本号，使用npm install安装所有的包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;node-echo&quot;,</span><br><span class=\"line\">    &quot;main&quot;: &quot;./lib/echo.js&quot;,</span><br><span class=\"line\">    &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">        &quot;argv&quot;: &quot;0.0.2&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>npm update 包名 ；可以把对应的包更新到最新的版本。</p>\n"},{"title":"关于number的判断","toc":true,"_content":"## 判断是不是Number\n```\ntypeof num === 'number';\nObject.prototype.toString.call(num);//[object Number]\n```\n## 判断是不是整数：\n使用原生方法：Number.isInteger(num)//true\n## 判断是不是浮点数：\n方法一：\n```\nfunction isFloat(num){\n  if(typeof num !== 'number'){\n    return false;\n  }\n  return ~~num !== num\n}\n```\n详解：\n```\n如果num是整数，则~~num === num\n~5 = -5-1,~~-6 = 6-1 =5\n如果是浮点数，则~5.5 = -6,~~-6 = 5, 5.5 !== 5\n\n```\n方法二：\n```\nfunction isFloat(num){\n  if(typeof num !== 'number'){\n    return false;\n  }\n  return num % 1 !== 0\n}\n```","source":"_posts/number.md","raw":"---\ntitle: 关于number的判断\ntoc: true\ntags: \n- JS\n- number\n---\n## 判断是不是Number\n```\ntypeof num === 'number';\nObject.prototype.toString.call(num);//[object Number]\n```\n## 判断是不是整数：\n使用原生方法：Number.isInteger(num)//true\n## 判断是不是浮点数：\n方法一：\n```\nfunction isFloat(num){\n  if(typeof num !== 'number'){\n    return false;\n  }\n  return ~~num !== num\n}\n```\n详解：\n```\n如果num是整数，则~~num === num\n~5 = -5-1,~~-6 = 6-1 =5\n如果是浮点数，则~5.5 = -6,~~-6 = 5, 5.5 !== 5\n\n```\n方法二：\n```\nfunction isFloat(num){\n  if(typeof num !== 'number'){\n    return false;\n  }\n  return num % 1 !== 0\n}\n```","slug":"number","published":1,"date":"2019-12-19T15:52:56.146Z","updated":"2019-12-19T15:52:56.147Z","_id":"ck4cwgnih001xckuk6jkn6rp7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"判断是不是Number\"><a href=\"#判断是不是Number\" class=\"headerlink\" title=\"判断是不是Number\"></a>判断是不是Number</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof num === &apos;number&apos;;</span><br><span class=\"line\">Object.prototype.toString.call(num);//[object Number]</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断是不是整数：\"><a href=\"#判断是不是整数：\" class=\"headerlink\" title=\"判断是不是整数：\"></a>判断是不是整数：</h2><p>使用原生方法：Number.isInteger(num)//true</p>\n<h2 id=\"判断是不是浮点数：\"><a href=\"#判断是不是浮点数：\" class=\"headerlink\" title=\"判断是不是浮点数：\"></a>判断是不是浮点数：</h2><p>方法一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isFloat(num)&#123;</span><br><span class=\"line\">  if(typeof num !== &apos;number&apos;)&#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return ~~num !== num</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>详解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果num是整数，则~~num === num</span><br><span class=\"line\">~5 = -5-1,~~-6 = 6-1 =5</span><br><span class=\"line\">如果是浮点数，则~5.5 = -6,~~-6 = 5, 5.5 !== 5</span><br></pre></td></tr></table></figure></p>\n<p>方法二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isFloat(num)&#123;</span><br><span class=\"line\">  if(typeof num !== &apos;number&apos;)&#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return num % 1 !== 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"判断是不是Number\"><a href=\"#判断是不是Number\" class=\"headerlink\" title=\"判断是不是Number\"></a>判断是不是Number</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof num === &apos;number&apos;;</span><br><span class=\"line\">Object.prototype.toString.call(num);//[object Number]</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断是不是整数：\"><a href=\"#判断是不是整数：\" class=\"headerlink\" title=\"判断是不是整数：\"></a>判断是不是整数：</h2><p>使用原生方法：Number.isInteger(num)//true</p>\n<h2 id=\"判断是不是浮点数：\"><a href=\"#判断是不是浮点数：\" class=\"headerlink\" title=\"判断是不是浮点数：\"></a>判断是不是浮点数：</h2><p>方法一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isFloat(num)&#123;</span><br><span class=\"line\">  if(typeof num !== &apos;number&apos;)&#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return ~~num !== num</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>详解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果num是整数，则~~num === num</span><br><span class=\"line\">~5 = -5-1,~~-6 = 6-1 =5</span><br><span class=\"line\">如果是浮点数，则~5.5 = -6,~~-6 = 5, 5.5 !== 5</span><br></pre></td></tr></table></figure></p>\n<p>方法二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isFloat(num)&#123;</span><br><span class=\"line\">  if(typeof num !== &apos;number&apos;)&#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return num % 1 !== 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"页面渲染","_content":"\n## 浏览器页面渲染\n\n浏览器工作流程大体分为如下三部分：\n\n- 浏览器会解析三个东西：\n    - 一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。\n    - CSS，解析CSS会产生CSS规则树。\n    - Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.\n\n-  解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。\n\n    - Rendering Tree 渲染树并不等同于DOM树，因为**一些像`<head>`元素或CSS设置display:none的节点**就没必要放在渲染树中了。\n    - CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。\n    - 然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。\n\n- 最后通过调用操作系统Native GUI(图像用户接口)的API绘制。\n<!--more-->\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/kBpnEt.png)\n\n[如上图所示](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn)，**在DOM树和CSS规则树合并成渲染树的时候会忽略`<head>`等不可见节点和设置了样式为display:none的节点**。生成渲染树后然后进入布局，布局计算每个对象的精确位置和大小，然后通过绘制，呈现出页面。\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/yw9qb5brpt.png)\n\n<img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/s6T92W.png\" width=\"650\"/>\n\n浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。\n\n## CSSOM的构建会阻碍DOM树的解析吗？\n\n由上图可知，在页面渲染机制中，通常情况下DOM和CSSOM是`并行构建`的，两者互不干扰，所以CSSOM的构建不会阻碍DOM树的解析\n\n## CSSOM的构建会阻碍页面的渲染吗？\n\n只有CSSOM和DOM都构建完毕时，渲染树才会根据两者开始构建，所以在默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。所以CSS也需要精简、减少Reflow和Repaint。\n\n## script脚本会影响页面渲染吗？\nJavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。\n\n此外，JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM。不完整的CSSOM是无法使用的，而JavaScript中想访问CSSOM并更改它，必须要能拿到完整的CSSOM。所以就导致了一个现象，如果浏览器尚未完成CSSOM的下载和构建，而我们却想在此时运行脚本，**那么浏览器将延迟脚本执行和DOM构建，直至其完成CSSOM的下载和构建**。也就是说，在这种情况下，**浏览器会先下载和构建CSSOM，然后再执行JavaScript，最后在继续构建DOM**。\n\n## 相关拓展\n相关内容: [DOMContentLoaded, 深入了解一下](https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/DOMContentLoaded)\n\n本文参考链接：\n\n[参考链接一](https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-4)\n\n[参考链接二](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=zh-cn)\n\n\n![20191007170811.png](https://robbie-blog.oss-cn-shanghai.aliyuncs.com/img/20191007170811.png)","source":"_posts/page-rendering.md","raw":"---\ntitle: 页面渲染\ntags: \n- Web\n- 页面渲染\n---\n\n## 浏览器页面渲染\n\n浏览器工作流程大体分为如下三部分：\n\n- 浏览器会解析三个东西：\n    - 一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。\n    - CSS，解析CSS会产生CSS规则树。\n    - Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.\n\n-  解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。\n\n    - Rendering Tree 渲染树并不等同于DOM树，因为**一些像`<head>`元素或CSS设置display:none的节点**就没必要放在渲染树中了。\n    - CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。\n    - 然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。\n\n- 最后通过调用操作系统Native GUI(图像用户接口)的API绘制。\n<!--more-->\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/kBpnEt.png)\n\n[如上图所示](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn)，**在DOM树和CSS规则树合并成渲染树的时候会忽略`<head>`等不可见节点和设置了样式为display:none的节点**。生成渲染树后然后进入布局，布局计算每个对象的精确位置和大小，然后通过绘制，呈现出页面。\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/yw9qb5brpt.png)\n\n<img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/s6T92W.png\" width=\"650\"/>\n\n浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。\n\n## CSSOM的构建会阻碍DOM树的解析吗？\n\n由上图可知，在页面渲染机制中，通常情况下DOM和CSSOM是`并行构建`的，两者互不干扰，所以CSSOM的构建不会阻碍DOM树的解析\n\n## CSSOM的构建会阻碍页面的渲染吗？\n\n只有CSSOM和DOM都构建完毕时，渲染树才会根据两者开始构建，所以在默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。所以CSS也需要精简、减少Reflow和Repaint。\n\n## script脚本会影响页面渲染吗？\nJavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。\n\n此外，JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM。不完整的CSSOM是无法使用的，而JavaScript中想访问CSSOM并更改它，必须要能拿到完整的CSSOM。所以就导致了一个现象，如果浏览器尚未完成CSSOM的下载和构建，而我们却想在此时运行脚本，**那么浏览器将延迟脚本执行和DOM构建，直至其完成CSSOM的下载和构建**。也就是说，在这种情况下，**浏览器会先下载和构建CSSOM，然后再执行JavaScript，最后在继续构建DOM**。\n\n## 相关拓展\n相关内容: [DOMContentLoaded, 深入了解一下](https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/DOMContentLoaded)\n\n本文参考链接：\n\n[参考链接一](https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-4)\n\n[参考链接二](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=zh-cn)\n\n\n![20191007170811.png](https://robbie-blog.oss-cn-shanghai.aliyuncs.com/img/20191007170811.png)","slug":"page-rendering","published":1,"date":"2019-12-19T15:52:56.147Z","updated":"2019-12-19T15:52:56.147Z","_id":"ck4cwgnih001zckukja4v18zi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"浏览器页面渲染\"><a href=\"#浏览器页面渲染\" class=\"headerlink\" title=\"浏览器页面渲染\"></a>浏览器页面渲染</h2><p>浏览器工作流程大体分为如下三部分：</p>\n<ul>\n<li><p>浏览器会解析三个东西：</p>\n<ul>\n<li>一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。</li>\n<li>CSS，解析CSS会产生CSS规则树。</li>\n<li>Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.</li>\n</ul>\n</li>\n<li><p>解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。</p>\n<ul>\n<li>Rendering Tree 渲染树并不等同于DOM树，因为<strong>一些像<code>&lt;head&gt;</code>元素或CSS设置display:none的节点</strong>就没必要放在渲染树中了。</li>\n<li>CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。</li>\n<li>然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。</li>\n</ul>\n</li>\n<li><p>最后通过调用操作系统Native GUI(图像用户接口)的API绘制。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/kBpnEt.png\" alt></p>\n</li>\n</ul>\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">如上图所示</a>，<strong>在DOM树和CSS规则树合并成渲染树的时候会忽略<code>&lt;head&gt;</code>等不可见节点和设置了样式为display:none的节点</strong>。生成渲染树后然后进入布局，布局计算每个对象的精确位置和大小，然后通过绘制，呈现出页面。</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/yw9qb5brpt.png\" alt></p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/s6T92W.png\" width=\"650\"></p>\n<p>浏览器工作流程：构建DOM -&gt; 构建CSSOM -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制。</p>\n<h2 id=\"CSSOM的构建会阻碍DOM树的解析吗？\"><a href=\"#CSSOM的构建会阻碍DOM树的解析吗？\" class=\"headerlink\" title=\"CSSOM的构建会阻碍DOM树的解析吗？\"></a>CSSOM的构建会阻碍DOM树的解析吗？</h2><p>由上图可知，在页面渲染机制中，通常情况下DOM和CSSOM是<code>并行构建</code>的，两者互不干扰，所以CSSOM的构建不会阻碍DOM树的解析</p>\n<h2 id=\"CSSOM的构建会阻碍页面的渲染吗？\"><a href=\"#CSSOM的构建会阻碍页面的渲染吗？\" class=\"headerlink\" title=\"CSSOM的构建会阻碍页面的渲染吗？\"></a>CSSOM的构建会阻碍页面的渲染吗？</h2><p>只有CSSOM和DOM都构建完毕时，渲染树才会根据两者开始构建，所以在默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。所以CSS也需要精简、减少Reflow和Repaint。</p>\n<h2 id=\"script脚本会影响页面渲染吗？\"><a href=\"#script脚本会影响页面渲染吗？\" class=\"headerlink\" title=\"script脚本会影响页面渲染吗？\"></a>script脚本会影响页面渲染吗？</h2><p>JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。</p>\n<p>此外，JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM。不完整的CSSOM是无法使用的，而JavaScript中想访问CSSOM并更改它，必须要能拿到完整的CSSOM。所以就导致了一个现象，如果浏览器尚未完成CSSOM的下载和构建，而我们却想在此时运行脚本，<strong>那么浏览器将延迟脚本执行和DOM构建，直至其完成CSSOM的下载和构建</strong>。也就是说，在这种情况下，<strong>浏览器会先下载和构建CSSOM，然后再执行JavaScript，最后在继续构建DOM</strong>。</p>\n<h2 id=\"相关拓展\"><a href=\"#相关拓展\" class=\"headerlink\" title=\"相关拓展\"></a>相关拓展</h2><p>相关内容: <a href=\"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded, 深入了解一下</a></p>\n<p>本文参考链接：</p>\n<p><a href=\"https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-4\" target=\"_blank\" rel=\"noopener\">参考链接一</a></p>\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">参考链接二</a></p>\n<p><img src=\"https://robbie-blog.oss-cn-shanghai.aliyuncs.com/img/20191007170811.png\" alt=\"20191007170811.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"浏览器页面渲染\"><a href=\"#浏览器页面渲染\" class=\"headerlink\" title=\"浏览器页面渲染\"></a>浏览器页面渲染</h2><p>浏览器工作流程大体分为如下三部分：</p>\n<ul>\n<li><p>浏览器会解析三个东西：</p>\n<ul>\n<li>一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。</li>\n<li>CSS，解析CSS会产生CSS规则树。</li>\n<li>Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.</li>\n</ul>\n</li>\n<li><p>解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。</p>\n<ul>\n<li>Rendering Tree 渲染树并不等同于DOM树，因为<strong>一些像<code>&lt;head&gt;</code>元素或CSS设置display:none的节点</strong>就没必要放在渲染树中了。</li>\n<li>CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。</li>\n<li>然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。</li>\n</ul>\n</li>\n<li><p>最后通过调用操作系统Native GUI(图像用户接口)的API绘制。</p>","more":"<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/kBpnEt.png\" alt></p>\n</li>\n</ul>\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">如上图所示</a>，<strong>在DOM树和CSS规则树合并成渲染树的时候会忽略<code>&lt;head&gt;</code>等不可见节点和设置了样式为display:none的节点</strong>。生成渲染树后然后进入布局，布局计算每个对象的精确位置和大小，然后通过绘制，呈现出页面。</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/yw9qb5brpt.png\" alt></p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/s6T92W.png\" width=\"650\"></p>\n<p>浏览器工作流程：构建DOM -&gt; 构建CSSOM -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制。</p>\n<h2 id=\"CSSOM的构建会阻碍DOM树的解析吗？\"><a href=\"#CSSOM的构建会阻碍DOM树的解析吗？\" class=\"headerlink\" title=\"CSSOM的构建会阻碍DOM树的解析吗？\"></a>CSSOM的构建会阻碍DOM树的解析吗？</h2><p>由上图可知，在页面渲染机制中，通常情况下DOM和CSSOM是<code>并行构建</code>的，两者互不干扰，所以CSSOM的构建不会阻碍DOM树的解析</p>\n<h2 id=\"CSSOM的构建会阻碍页面的渲染吗？\"><a href=\"#CSSOM的构建会阻碍页面的渲染吗？\" class=\"headerlink\" title=\"CSSOM的构建会阻碍页面的渲染吗？\"></a>CSSOM的构建会阻碍页面的渲染吗？</h2><p>只有CSSOM和DOM都构建完毕时，渲染树才会根据两者开始构建，所以在默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。所以CSS也需要精简、减少Reflow和Repaint。</p>\n<h2 id=\"script脚本会影响页面渲染吗？\"><a href=\"#script脚本会影响页面渲染吗？\" class=\"headerlink\" title=\"script脚本会影响页面渲染吗？\"></a>script脚本会影响页面渲染吗？</h2><p>JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。</p>\n<p>此外，JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM。不完整的CSSOM是无法使用的，而JavaScript中想访问CSSOM并更改它，必须要能拿到完整的CSSOM。所以就导致了一个现象，如果浏览器尚未完成CSSOM的下载和构建，而我们却想在此时运行脚本，<strong>那么浏览器将延迟脚本执行和DOM构建，直至其完成CSSOM的下载和构建</strong>。也就是说，在这种情况下，<strong>浏览器会先下载和构建CSSOM，然后再执行JavaScript，最后在继续构建DOM</strong>。</p>\n<h2 id=\"相关拓展\"><a href=\"#相关拓展\" class=\"headerlink\" title=\"相关拓展\"></a>相关拓展</h2><p>相关内容: <a href=\"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded, 深入了解一下</a></p>\n<p>本文参考链接：</p>\n<p><a href=\"https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-4\" target=\"_blank\" rel=\"noopener\">参考链接一</a></p>\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">参考链接二</a></p>\n<p><img src=\"https://robbie-blog.oss-cn-shanghai.aliyuncs.com/img/20191007170811.png\" alt=\"20191007170811.png\"></p>"},{"title":"求数组中元素和为s最先匹配元素","_content":"\n  ```\n  var sum_pairs=function(ints, s){\n  let pairsObj = {}；\n  for(item of ints){\n    if(pairsObj[s-item]){\n      return [s-item, item]；\n    }\n    pairsObj[item] = true；\n  }\n}\n```\n```\nsum_pairs([11, 3, 7, 5],         10)\n#              ^--^      3 + 7 = 10\n== [3, 7]\n\nsum_pairs([4, 3, 2, 3, 4],         6)\n#          ^-----^         4 + 2 = 6, indices: 0, 2 *\n#             ^-----^      3 + 3 = 6, indices: 1, 3\n#                ^-----^   2 + 4 = 6, indices: 2, 4\n#  * entire pair is earlier, and therefore is the correct answer\n== [4, 2]\n```","source":"_posts/pairs.md","raw":"---\ntitle: 求数组中元素和为s最先匹配元素\ntags: \n- JS\n- Array\n---\n\n  ```\n  var sum_pairs=function(ints, s){\n  let pairsObj = {}；\n  for(item of ints){\n    if(pairsObj[s-item]){\n      return [s-item, item]；\n    }\n    pairsObj[item] = true；\n  }\n}\n```\n```\nsum_pairs([11, 3, 7, 5],         10)\n#              ^--^      3 + 7 = 10\n== [3, 7]\n\nsum_pairs([4, 3, 2, 3, 4],         6)\n#          ^-----^         4 + 2 = 6, indices: 0, 2 *\n#             ^-----^      3 + 3 = 6, indices: 1, 3\n#                ^-----^   2 + 4 = 6, indices: 2, 4\n#  * entire pair is earlier, and therefore is the correct answer\n== [4, 2]\n```","slug":"pairs","published":1,"date":"2019-12-19T15:52:56.147Z","updated":"2019-12-19T15:52:56.147Z","_id":"ck4cwgnii0022ckuktdrgn0lg","comments":1,"layout":"post","photos":[],"link":"","content":"  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  var sum_pairs=function(ints, s)&#123;</span><br><span class=\"line\">  let pairsObj = &#123;&#125;；</span><br><span class=\"line\">  for(item of ints)&#123;</span><br><span class=\"line\">    if(pairsObj[s-item])&#123;</span><br><span class=\"line\">      return [s-item, item]；</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pairsObj[item] = true；</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum_pairs([11, 3, 7, 5],         10)</span><br><span class=\"line\">#              ^--^      3 + 7 = 10</span><br><span class=\"line\">== [3, 7]</span><br><span class=\"line\"></span><br><span class=\"line\">sum_pairs([4, 3, 2, 3, 4],         6)</span><br><span class=\"line\">#          ^-----^         4 + 2 = 6, indices: 0, 2 *</span><br><span class=\"line\">#             ^-----^      3 + 3 = 6, indices: 1, 3</span><br><span class=\"line\">#                ^-----^   2 + 4 = 6, indices: 2, 4</span><br><span class=\"line\">#  * entire pair is earlier, and therefore is the correct answer</span><br><span class=\"line\">== [4, 2]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  var sum_pairs=function(ints, s)&#123;</span><br><span class=\"line\">  let pairsObj = &#123;&#125;；</span><br><span class=\"line\">  for(item of ints)&#123;</span><br><span class=\"line\">    if(pairsObj[s-item])&#123;</span><br><span class=\"line\">      return [s-item, item]；</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pairsObj[item] = true；</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum_pairs([11, 3, 7, 5],         10)</span><br><span class=\"line\">#              ^--^      3 + 7 = 10</span><br><span class=\"line\">== [3, 7]</span><br><span class=\"line\"></span><br><span class=\"line\">sum_pairs([4, 3, 2, 3, 4],         6)</span><br><span class=\"line\">#          ^-----^         4 + 2 = 6, indices: 0, 2 *</span><br><span class=\"line\">#             ^-----^      3 + 3 = 6, indices: 1, 3</span><br><span class=\"line\">#                ^-----^   2 + 4 = 6, indices: 2, 4</span><br><span class=\"line\">#  * entire pair is earlier, and therefore is the correct answer</span><br><span class=\"line\">== [4, 2]</span><br></pre></td></tr></table></figure>"},{"title":"痛定思痛parseInt()","_content":"\n### 前言\n\n讲真的我其实一直都看不起parseInt这个函数，从来没正眼瞧过他，今天报复就来了。\n\n### 怎么将字符串类型的数字转成数字\n\n平常我的操作：\n\n```\n+'100' -> 100\n```\n### parseInt的骚操作：\n\n```\n parseInt('1234blue'); => 1234\n parseInt('b1234'); => NaN\n parseInt('22.9') => 22;向下取整\n parseInt('0xf') => 15(16进制)\n```\nparseInt其实可以接受两个参数，第二个参数表明第一个参数是一个几进制的数，第二个参数为0可以当作没有,忽略它。\n\neg:\n\n```\n['1','2','3'].map(parseInt)\n// 输出：[1, NaN, NaN]\n```\n不存在1进制，不存在2进制的值能是3的，返回NaN\n\n\n","source":"_posts/parseInt函数.md","raw":"---\ntitle: 痛定思痛parseInt()\ntags: \n- JS\n- parseInt\n---\n\n### 前言\n\n讲真的我其实一直都看不起parseInt这个函数，从来没正眼瞧过他，今天报复就来了。\n\n### 怎么将字符串类型的数字转成数字\n\n平常我的操作：\n\n```\n+'100' -> 100\n```\n### parseInt的骚操作：\n\n```\n parseInt('1234blue'); => 1234\n parseInt('b1234'); => NaN\n parseInt('22.9') => 22;向下取整\n parseInt('0xf') => 15(16进制)\n```\nparseInt其实可以接受两个参数，第二个参数表明第一个参数是一个几进制的数，第二个参数为0可以当作没有,忽略它。\n\neg:\n\n```\n['1','2','3'].map(parseInt)\n// 输出：[1, NaN, NaN]\n```\n不存在1进制，不存在2进制的值能是3的，返回NaN\n\n\n","slug":"parseInt函数","published":1,"date":"2019-12-19T15:52:56.148Z","updated":"2019-12-19T15:52:56.148Z","_id":"ck4cwgnij0024ckukd783vibj","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>讲真的我其实一直都看不起parseInt这个函数，从来没正眼瞧过他，今天报复就来了。</p>\n<h3 id=\"怎么将字符串类型的数字转成数字\"><a href=\"#怎么将字符串类型的数字转成数字\" class=\"headerlink\" title=\"怎么将字符串类型的数字转成数字\"></a>怎么将字符串类型的数字转成数字</h3><p>平常我的操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+&apos;100&apos; -&gt; 100</span><br></pre></td></tr></table></figure>\n<h3 id=\"parseInt的骚操作：\"><a href=\"#parseInt的骚操作：\" class=\"headerlink\" title=\"parseInt的骚操作：\"></a>parseInt的骚操作：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;1234blue&apos;); =&gt; 1234</span><br><span class=\"line\">parseInt(&apos;b1234&apos;); =&gt; NaN</span><br><span class=\"line\">parseInt(&apos;22.9&apos;) =&gt; 22;向下取整</span><br><span class=\"line\">parseInt(&apos;0xf&apos;) =&gt; 15(16进制)</span><br></pre></td></tr></table></figure>\n<p>parseInt其实可以接受两个参数，第二个参数表明第一个参数是一个几进制的数，第二个参数为0可以当作没有,忽略它。</p>\n<p>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;1&apos;,&apos;2&apos;,&apos;3&apos;].map(parseInt)</span><br><span class=\"line\">// 输出：[1, NaN, NaN]</span><br></pre></td></tr></table></figure>\n<p>不存在1进制，不存在2进制的值能是3的，返回NaN</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>讲真的我其实一直都看不起parseInt这个函数，从来没正眼瞧过他，今天报复就来了。</p>\n<h3 id=\"怎么将字符串类型的数字转成数字\"><a href=\"#怎么将字符串类型的数字转成数字\" class=\"headerlink\" title=\"怎么将字符串类型的数字转成数字\"></a>怎么将字符串类型的数字转成数字</h3><p>平常我的操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+&apos;100&apos; -&gt; 100</span><br></pre></td></tr></table></figure>\n<h3 id=\"parseInt的骚操作：\"><a href=\"#parseInt的骚操作：\" class=\"headerlink\" title=\"parseInt的骚操作：\"></a>parseInt的骚操作：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;1234blue&apos;); =&gt; 1234</span><br><span class=\"line\">parseInt(&apos;b1234&apos;); =&gt; NaN</span><br><span class=\"line\">parseInt(&apos;22.9&apos;) =&gt; 22;向下取整</span><br><span class=\"line\">parseInt(&apos;0xf&apos;) =&gt; 15(16进制)</span><br></pre></td></tr></table></figure>\n<p>parseInt其实可以接受两个参数，第二个参数表明第一个参数是一个几进制的数，第二个参数为0可以当作没有,忽略它。</p>\n<p>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;1&apos;,&apos;2&apos;,&apos;3&apos;].map(parseInt)</span><br><span class=\"line\">// 输出：[1, NaN, NaN]</span><br></pre></td></tr></table></figure>\n<p>不存在1进制，不存在2进制的值能是3的，返回NaN</p>\n"},{"title":"Promise.all()手工代码实现","toc":true,"_content":"# 写个函数代替promise.all()\n\n### 百度版\n这我百度过来感觉相对比较靠谱的代码：\n<!--more-->\n```js\nfunction promiseAll(promises) {\n  return new Promise(function(resolve, reject) {\n    if (!Array.isArray(promises)) {\n      return reject(new TypeError('arguments must be an array'));\n    }\n    var resolvedCounter = 0;\n    var promiseNum = promises.length;\n    var resolvedValues = new Array(promiseNum);\n    for (var i = 0; i < promiseNum; i++) {\n      (function(i) {\n        Promise.resolve(promises[i]).then(function(value) {\n          resolvedCounter++\n          resolvedValues[i] = value\n          if (resolvedCounter == promiseNum) {\n            return resolve(resolvedValues)\n          }\n        }, function(reason) {\n          return reject(reason)\n        })\n      })(i)\n    }\n  })\n}\n```\n这款代码的缺陷：\n* 代码冗余\n* 代码只对数组类型进行操作，实际上Promise.all()的参数只要是可迭代的，都可以进行操作。\n\n### 优化版\n当我对这段代码不满意时，我参考了阮一峰大佬的《ES6 入门》和另外一本经典书《深入理解ES6》关于Iterator这一章的讲解，得到下面又换后的代码：\n\n#### 代码优化：\n```js\n\nfunction promiseAll(promises) {\n  return new Promise(function(resolve, reject) {\n    if (typeof obj[Symbol.iterator] !== 'function') {\n        return reject(new TypeError('arguments must be iterator'));\n    }\n    let promiseValue = [];\n    let length = promises.length;\n\n    for (let i = 0; i < length; i++) {\n          Promise.resolve(promises[i]).then(function(value) {\n            promiseValue[i] = value;\n              if(promiseValue.length === length) {\n                resolve(promiseValue)\n              }\n            }, function(reason) {return reject(reason)})\n        }\n\n  })\n}\n\n```\n\n> 如有不足，欢迎指正 :grin:","source":"_posts/promise.all()代码实现.md","raw":"---\ntitle: Promise.all()手工代码实现\ntoc: true\ntags: \n- JS\n- Promis.all()\n---\n# 写个函数代替promise.all()\n\n### 百度版\n这我百度过来感觉相对比较靠谱的代码：\n<!--more-->\n```js\nfunction promiseAll(promises) {\n  return new Promise(function(resolve, reject) {\n    if (!Array.isArray(promises)) {\n      return reject(new TypeError('arguments must be an array'));\n    }\n    var resolvedCounter = 0;\n    var promiseNum = promises.length;\n    var resolvedValues = new Array(promiseNum);\n    for (var i = 0; i < promiseNum; i++) {\n      (function(i) {\n        Promise.resolve(promises[i]).then(function(value) {\n          resolvedCounter++\n          resolvedValues[i] = value\n          if (resolvedCounter == promiseNum) {\n            return resolve(resolvedValues)\n          }\n        }, function(reason) {\n          return reject(reason)\n        })\n      })(i)\n    }\n  })\n}\n```\n这款代码的缺陷：\n* 代码冗余\n* 代码只对数组类型进行操作，实际上Promise.all()的参数只要是可迭代的，都可以进行操作。\n\n### 优化版\n当我对这段代码不满意时，我参考了阮一峰大佬的《ES6 入门》和另外一本经典书《深入理解ES6》关于Iterator这一章的讲解，得到下面又换后的代码：\n\n#### 代码优化：\n```js\n\nfunction promiseAll(promises) {\n  return new Promise(function(resolve, reject) {\n    if (typeof obj[Symbol.iterator] !== 'function') {\n        return reject(new TypeError('arguments must be iterator'));\n    }\n    let promiseValue = [];\n    let length = promises.length;\n\n    for (let i = 0; i < length; i++) {\n          Promise.resolve(promises[i]).then(function(value) {\n            promiseValue[i] = value;\n              if(promiseValue.length === length) {\n                resolve(promiseValue)\n              }\n            }, function(reason) {return reject(reason)})\n        }\n\n  })\n}\n\n```\n\n> 如有不足，欢迎指正 :grin:","slug":"promise.all()代码实现","published":1,"date":"2019-12-19T15:52:56.148Z","updated":"2019-12-19T15:52:56.148Z","_id":"ck4cwgnik0027ckukg3zb0jbr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"写个函数代替promise-all\"><a href=\"#写个函数代替promise-all\" class=\"headerlink\" title=\"写个函数代替promise.all()\"></a>写个函数代替promise.all()</h1><h3 id=\"百度版\"><a href=\"#百度版\" class=\"headerlink\" title=\"百度版\"></a>百度版</h3><p>这我百度过来感觉相对比较靠谱的代码：<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseAll</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(promises)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'arguments must be an array'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promiseNum = promises.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">      (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">          resolvedCounter++</span><br><span class=\"line\">          resolvedValues[i] = value</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这款代码的缺陷：</p>\n<ul>\n<li>代码冗余</li>\n<li>代码只对数组类型进行操作，实际上Promise.all()的参数只要是可迭代的，都可以进行操作。</li>\n</ul>\n<h3 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h3><p>当我对这段代码不满意时，我参考了阮一峰大佬的《ES6 入门》和另外一本经典书《深入理解ES6》关于Iterator这一章的讲解，得到下面又换后的代码：</p>\n<h4 id=\"代码优化：\"><a href=\"#代码优化：\" class=\"headerlink\" title=\"代码优化：\"></a>代码优化：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseAll</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj[<span class=\"built_in\">Symbol</span>.iterator] !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'arguments must be iterator'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promiseValue = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = promises.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            promiseValue[i] = value;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(promiseValue.length === length) &#123;</span><br><span class=\"line\">                resolve(promiseValue)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">return</span> reject(reason)&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如有不足，欢迎指正 :grin:</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"写个函数代替promise-all\"><a href=\"#写个函数代替promise-all\" class=\"headerlink\" title=\"写个函数代替promise.all()\"></a>写个函数代替promise.all()</h1><h3 id=\"百度版\"><a href=\"#百度版\" class=\"headerlink\" title=\"百度版\"></a>百度版</h3><p>这我百度过来感觉相对比较靠谱的代码：<br>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseAll</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(promises)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'arguments must be an array'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resolvedCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promiseNum = promises.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resolvedValues = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(promiseNum);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class=\"line\">      (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">          resolvedCounter++</span><br><span class=\"line\">          resolvedValues[i] = value</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(resolvedValues)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> reject(reason)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这款代码的缺陷：</p>\n<ul>\n<li>代码冗余</li>\n<li>代码只对数组类型进行操作，实际上Promise.all()的参数只要是可迭代的，都可以进行操作。</li>\n</ul>\n<h3 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h3><p>当我对这段代码不满意时，我参考了阮一峰大佬的《ES6 入门》和另外一本经典书《深入理解ES6》关于Iterator这一章的讲解，得到下面又换后的代码：</p>\n<h4 id=\"代码优化：\"><a href=\"#代码优化：\" class=\"headerlink\" title=\"代码优化：\"></a>代码优化：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseAll</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj[<span class=\"built_in\">Symbol</span>.iterator] !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'arguments must be iterator'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promiseValue = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = promises.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">Promise</span>.resolve(promises[i]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            promiseValue[i] = value;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(promiseValue.length === length) &#123;</span><br><span class=\"line\">                resolve(promiseValue)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;<span class=\"keyword\">return</span> reject(reason)&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如有不足，欢迎指正 :grin:</p>\n</blockquote>"},{"title":"query-string中parse的源码实现","toc":true,"_content":"## 前言\nquery-string模块在做地址解析查询参数时，会经常用到，在项目中自己曾经通过对`location.search`做过查询参数和值的解析，但是代码写出来还是很长的，而且当别的同事看你的代码时，很可能不知道你写的是什么，所以在此处我们完全可以使用query-string来辅助我们开发。\n\n我曾经在这篇[博客](https://ustc-han.github.io/2018/12/20/queryString%E6%A8%A1%E5%9D%97/)里写到过具体用法，此处不再赘述，网上教程也很多，简单易懂。我们的重心是queryString.parse(str)功能的实现，下面的代码是仿照源码所写，实现了queryString.parse(str)的功能。\n\n## 源码实现\n```js\nfunction splitFirst(item, flag) {\n // 定位首次出现的 '=',避免value中有等号\n  const index = item.indexOf(flag);\n  let key, value;\n// 如果没有等号，则是'name = null' 的简写'name'\n  if(index === -1) {\n    key = item;\n    value = null;\n  } else {\n    key = item.slice(0, index);\n    value = item.slice(index + 1);\n  }\n  return [key, value];\n}\n\nfunction parse(str) {\n  // 创建一个没有原型的空对象\n  let result = Object.create(null);\n  // 判断str为空或不是字符串时，返回{}\n  if(!str || typeof str !== 'string') return result;\n  // 如果传入的字符串第一个字符是#||&||?，替换为‘’\n  const newStr = str.trim().replace(/^[#&?]/, '');\n  // 对字符串拆分为数组\n  const input = newStr.split('&');\n  //遍历数组\n  for(let item of input) {\n    //取出每一项'name=100'中的key和value\n    let [key, value] = splitFirst(item, '=');\n    // 判断对象中有没有该key,没有的化直接加入，\n    if(!result[key]) {\n      result[key] = value;\n    }else {\n      // 对象中已存在该key,有value是string和数组两种情况\n      // name = 'han',name = [han,li]\n      if(typeof result[key] === 'string') {\n        const t = result[key];\n        result[key] = [t, value];\n      }else {\n        result[key].push(value)\n      }\n    }\n  }\n  return result\n}\nparse('name=han&name=li&age=10')\n\n```","source":"_posts/query-string源码仿写.md","raw":"---\ntitle: query-string中parse的源码实现\ntags: \n- JS\ntoc: true\n---\n## 前言\nquery-string模块在做地址解析查询参数时，会经常用到，在项目中自己曾经通过对`location.search`做过查询参数和值的解析，但是代码写出来还是很长的，而且当别的同事看你的代码时，很可能不知道你写的是什么，所以在此处我们完全可以使用query-string来辅助我们开发。\n\n我曾经在这篇[博客](https://ustc-han.github.io/2018/12/20/queryString%E6%A8%A1%E5%9D%97/)里写到过具体用法，此处不再赘述，网上教程也很多，简单易懂。我们的重心是queryString.parse(str)功能的实现，下面的代码是仿照源码所写，实现了queryString.parse(str)的功能。\n\n## 源码实现\n```js\nfunction splitFirst(item, flag) {\n // 定位首次出现的 '=',避免value中有等号\n  const index = item.indexOf(flag);\n  let key, value;\n// 如果没有等号，则是'name = null' 的简写'name'\n  if(index === -1) {\n    key = item;\n    value = null;\n  } else {\n    key = item.slice(0, index);\n    value = item.slice(index + 1);\n  }\n  return [key, value];\n}\n\nfunction parse(str) {\n  // 创建一个没有原型的空对象\n  let result = Object.create(null);\n  // 判断str为空或不是字符串时，返回{}\n  if(!str || typeof str !== 'string') return result;\n  // 如果传入的字符串第一个字符是#||&||?，替换为‘’\n  const newStr = str.trim().replace(/^[#&?]/, '');\n  // 对字符串拆分为数组\n  const input = newStr.split('&');\n  //遍历数组\n  for(let item of input) {\n    //取出每一项'name=100'中的key和value\n    let [key, value] = splitFirst(item, '=');\n    // 判断对象中有没有该key,没有的化直接加入，\n    if(!result[key]) {\n      result[key] = value;\n    }else {\n      // 对象中已存在该key,有value是string和数组两种情况\n      // name = 'han',name = [han,li]\n      if(typeof result[key] === 'string') {\n        const t = result[key];\n        result[key] = [t, value];\n      }else {\n        result[key].push(value)\n      }\n    }\n  }\n  return result\n}\nparse('name=han&name=li&age=10')\n\n```","slug":"query-string源码仿写","published":1,"date":"2019-12-19T15:52:56.148Z","updated":"2019-12-19T15:52:56.149Z","_id":"ck4cwgnil0029ckukytrua2as","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>query-string模块在做地址解析查询参数时，会经常用到，在项目中自己曾经通过对<code>location.search</code>做过查询参数和值的解析，但是代码写出来还是很长的，而且当别的同事看你的代码时，很可能不知道你写的是什么，所以在此处我们完全可以使用query-string来辅助我们开发。</p>\n<p>我曾经在这篇<a href=\"https://ustc-han.github.io/2018/12/20/queryString%E6%A8%A1%E5%9D%97/\">博客</a>里写到过具体用法，此处不再赘述，网上教程也很多，简单易懂。我们的重心是queryString.parse(str)功能的实现，下面的代码是仿照源码所写，实现了queryString.parse(str)的功能。</p>\n<h2 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splitFirst</span>(<span class=\"params\">item, flag</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 定位首次出现的 '=',避免value中有等号</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> index = item.indexOf(flag);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> key, value;</span><br><span class=\"line\"><span class=\"comment\">// 如果没有等号，则是'name = null' 的简写'name'</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    key = item;</span><br><span class=\"line\">    value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    key = item.slice(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">    value = item.slice(index + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [key, value];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个没有原型的空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断str为空或不是字符串时，返回&#123;&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!str || <span class=\"keyword\">typeof</span> str !== <span class=\"string\">'string'</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  <span class=\"comment\">// 如果传入的字符串第一个字符是#||&amp;||?，替换为‘’</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newStr = str.trim().replace(<span class=\"regexp\">/^[#&amp;?]/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 对字符串拆分为数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> input = newStr.split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">  <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> input) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//取出每一项'name=100'中的key和value</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> [key, value] = splitFirst(item, <span class=\"string\">'='</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 判断对象中有没有该key,没有的化直接加入，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!result[key]) &#123;</span><br><span class=\"line\">      result[key] = value;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 对象中已存在该key,有value是string和数组两种情况</span></span><br><span class=\"line\">      <span class=\"comment\">// name = 'han',name = [han,li]</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> result[key] === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> t = result[key];</span><br><span class=\"line\">        result[key] = [t, value];</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result[key].push(value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">parse(<span class=\"string\">'name=han&amp;name=li&amp;age=10'</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>query-string模块在做地址解析查询参数时，会经常用到，在项目中自己曾经通过对<code>location.search</code>做过查询参数和值的解析，但是代码写出来还是很长的，而且当别的同事看你的代码时，很可能不知道你写的是什么，所以在此处我们完全可以使用query-string来辅助我们开发。</p>\n<p>我曾经在这篇<a href=\"https://ustc-han.github.io/2018/12/20/queryString%E6%A8%A1%E5%9D%97/\">博客</a>里写到过具体用法，此处不再赘述，网上教程也很多，简单易懂。我们的重心是queryString.parse(str)功能的实现，下面的代码是仿照源码所写，实现了queryString.parse(str)的功能。</p>\n<h2 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splitFirst</span>(<span class=\"params\">item, flag</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 定位首次出现的 '=',避免value中有等号</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> index = item.indexOf(flag);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> key, value;</span><br><span class=\"line\"><span class=\"comment\">// 如果没有等号，则是'name = null' 的简写'name'</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    key = item;</span><br><span class=\"line\">    value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    key = item.slice(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">    value = item.slice(index + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [key, value];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个没有原型的空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断str为空或不是字符串时，返回&#123;&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!str || <span class=\"keyword\">typeof</span> str !== <span class=\"string\">'string'</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  <span class=\"comment\">// 如果传入的字符串第一个字符是#||&amp;||?，替换为‘’</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newStr = str.trim().replace(<span class=\"regexp\">/^[#&amp;?]/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 对字符串拆分为数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> input = newStr.split(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">  <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> input) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//取出每一项'name=100'中的key和value</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> [key, value] = splitFirst(item, <span class=\"string\">'='</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 判断对象中有没有该key,没有的化直接加入，</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!result[key]) &#123;</span><br><span class=\"line\">      result[key] = value;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 对象中已存在该key,有value是string和数组两种情况</span></span><br><span class=\"line\">      <span class=\"comment\">// name = 'han',name = [han,li]</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> result[key] === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> t = result[key];</span><br><span class=\"line\">        result[key] = [t, value];</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result[key].push(value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">parse(<span class=\"string\">'name=han&amp;name=li&amp;age=10'</span>)</span><br></pre></td></tr></table></figure>"},{"title":"queryString模块","toc":true,"_content":"## queryString模块\n### 1. 安装：\n    npm install query-string;\n### 2. 引入：\n    import queryString from 'query-string';\n### 3. 应用：\n#### - parse方法：\nqueryString.parse()方法用于将一个查询字符串解析为 JavaScript对象。\n<!--more-->\n\n```js\nvar str = 'foo=bar&abc=xyz&abc=123';\n\nqueryString.parse(str)\n// { foo: 'bar', abc: [ 'xyz', '123' ] }\n```\n\n应用举例：*地址栏解析*\n使用该方法会自动的去掉前面的？或者hash符号\n\n*[JS](https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=js&oq=markdown&rsv_pq=ebf79fd80000d7e3&rsv_t=3dc6iuXLdZkFX9hdim9%2FvbE1mEIMj9TwDql89cx66DYUM1SuJSoSCRyBwes&rqlang=cn&rsv_enter=1&inputT=2192&rsv_sug3=22&rsv_sug1=18&rsv_sug7=101&rsv_sug2=0&rsv_sug4=3745)* 点击链接,在控制台输入*window.location.search*得到下面的内容\n\n```js\nwindow.location.search\n\"?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=js&oq=markdown&rsv_pq=ebf79fd80000d7e3&rsv_t=3dc6iuXLdZkFX9hdim9%2FvbE1mEIMj9TwDql89cx66DYUM1SuJSoSCRyBwes&rqlang=cn&rsv_enter=1&inputT=2192&rsv_sug3=22&rsv_sug1=18&rsv_sug7=101&rsv_sug2=0&rsv_sug4=3745\"\n```\neg:\n```js\nconsole.log(location.search);\n//=> '?foo=bar&abc=xyz'\n \nconst parsed = queryString.parse(location.search);\nconsole.log(parsed);\n//=> {foo: 'bar',abc: 'xyz'}\n \nconsole.log(location.hash);\n//=> '#token=bada55cafe'\n \nconst parsedHash = queryString.parse(location.hash);\nconsole.log(parsedHash);\n//=> {token: 'bada55cafe'}\n```\n这样做地址解析很方便\n\n#### -Stringify方法\nqueryString.stringify()是parse方法的逆操作：\neg:\n\n```js\nquerystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' }) \n// returns \n'foo=bar&baz=qux&baz=quux&corge=' \n \nquerystring.stringify({foo: 'bar', baz: 'qux'}, ';', ':') \n// returns \n'foo:bar;baz:qux'\n```\n\n\n\n","source":"_posts/queryString模块.md","raw":"---\ntitle: queryString模块\ntags: \n- Node\ntoc: true\n---\n## queryString模块\n### 1. 安装：\n    npm install query-string;\n### 2. 引入：\n    import queryString from 'query-string';\n### 3. 应用：\n#### - parse方法：\nqueryString.parse()方法用于将一个查询字符串解析为 JavaScript对象。\n<!--more-->\n\n```js\nvar str = 'foo=bar&abc=xyz&abc=123';\n\nqueryString.parse(str)\n// { foo: 'bar', abc: [ 'xyz', '123' ] }\n```\n\n应用举例：*地址栏解析*\n使用该方法会自动的去掉前面的？或者hash符号\n\n*[JS](https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=js&oq=markdown&rsv_pq=ebf79fd80000d7e3&rsv_t=3dc6iuXLdZkFX9hdim9%2FvbE1mEIMj9TwDql89cx66DYUM1SuJSoSCRyBwes&rqlang=cn&rsv_enter=1&inputT=2192&rsv_sug3=22&rsv_sug1=18&rsv_sug7=101&rsv_sug2=0&rsv_sug4=3745)* 点击链接,在控制台输入*window.location.search*得到下面的内容\n\n```js\nwindow.location.search\n\"?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=js&oq=markdown&rsv_pq=ebf79fd80000d7e3&rsv_t=3dc6iuXLdZkFX9hdim9%2FvbE1mEIMj9TwDql89cx66DYUM1SuJSoSCRyBwes&rqlang=cn&rsv_enter=1&inputT=2192&rsv_sug3=22&rsv_sug1=18&rsv_sug7=101&rsv_sug2=0&rsv_sug4=3745\"\n```\neg:\n```js\nconsole.log(location.search);\n//=> '?foo=bar&abc=xyz'\n \nconst parsed = queryString.parse(location.search);\nconsole.log(parsed);\n//=> {foo: 'bar',abc: 'xyz'}\n \nconsole.log(location.hash);\n//=> '#token=bada55cafe'\n \nconst parsedHash = queryString.parse(location.hash);\nconsole.log(parsedHash);\n//=> {token: 'bada55cafe'}\n```\n这样做地址解析很方便\n\n#### -Stringify方法\nqueryString.stringify()是parse方法的逆操作：\neg:\n\n```js\nquerystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' }) \n// returns \n'foo=bar&baz=qux&baz=quux&corge=' \n \nquerystring.stringify({foo: 'bar', baz: 'qux'}, ';', ':') \n// returns \n'foo:bar;baz:qux'\n```\n\n\n\n","slug":"queryString模块","published":1,"date":"2019-12-19T15:52:56.149Z","updated":"2019-12-19T15:52:56.149Z","_id":"ck4cwgnim002cckuky883lk50","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"queryString模块\"><a href=\"#queryString模块\" class=\"headerlink\" title=\"queryString模块\"></a>queryString模块</h2><h3 id=\"1-安装：\"><a href=\"#1-安装：\" class=\"headerlink\" title=\"1. 安装：\"></a>1. 安装：</h3><pre><code>npm install query-string;\n</code></pre><h3 id=\"2-引入：\"><a href=\"#2-引入：\" class=\"headerlink\" title=\"2. 引入：\"></a>2. 引入：</h3><pre><code>import queryString from &apos;query-string&apos;;\n</code></pre><h3 id=\"3-应用：\"><a href=\"#3-应用：\" class=\"headerlink\" title=\"3. 应用：\"></a>3. 应用：</h3><h4 id=\"parse方法：\"><a href=\"#parse方法：\" class=\"headerlink\" title=\"- parse方法：\"></a>- parse方法：</h4><p>queryString.parse()方法用于将一个查询字符串解析为 JavaScript对象。<br><a id=\"more\"></a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'foo=bar&amp;abc=xyz&amp;abc=123'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">queryString.parse(str)</span><br><span class=\"line\"><span class=\"comment\">// &#123; foo: 'bar', abc: [ 'xyz', '123' ] &#125;</span></span><br></pre></td></tr></table></figure>\n<p>应用举例：<em>地址栏解析</em><br>使用该方法会自动的去掉前面的？或者hash符号</p>\n<p><em><a href=\"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=js&amp;oq=markdown&amp;rsv_pq=ebf79fd80000d7e3&amp;rsv_t=3dc6iuXLdZkFX9hdim9%2FvbE1mEIMj9TwDql89cx66DYUM1SuJSoSCRyBwes&amp;rqlang=cn&amp;rsv_enter=1&amp;inputT=2192&amp;rsv_sug3=22&amp;rsv_sug1=18&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_sug4=3745\" target=\"_blank\" rel=\"noopener\">JS</a></em> 点击链接,在控制台输入<em>window.location.search</em>得到下面的内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.search</span><br><span class=\"line\"><span class=\"string\">\"?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=js&amp;oq=markdown&amp;rsv_pq=ebf79fd80000d7e3&amp;rsv_t=3dc6iuXLdZkFX9hdim9%2FvbE1mEIMj9TwDql89cx66DYUM1SuJSoSCRyBwes&amp;rqlang=cn&amp;rsv_enter=1&amp;inputT=2192&amp;rsv_sug3=22&amp;rsv_sug1=18&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_sug4=3745\"</span></span><br></pre></td></tr></table></figure>\n<p>eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(location.search);</span><br><span class=\"line\"><span class=\"comment\">//=&gt; '?foo=bar&amp;abc=xyz'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> parsed = queryString.parse(location.search);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parsed);</span><br><span class=\"line\"><span class=\"comment\">//=&gt; &#123;foo: 'bar',abc: 'xyz'&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.hash);</span><br><span class=\"line\"><span class=\"comment\">//=&gt; '#token=bada55cafe'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> parsedHash = queryString.parse(location.hash);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parsedHash);</span><br><span class=\"line\"><span class=\"comment\">//=&gt; &#123;token: 'bada55cafe'&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样做地址解析很方便</p>\n<h4 id=\"Stringify方法\"><a href=\"#Stringify方法\" class=\"headerlink\" title=\"-Stringify方法\"></a>-Stringify方法</h4><p>queryString.stringify()是parse方法的逆操作：<br>eg:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">querystring.stringify(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: [<span class=\"string\">'qux'</span>, <span class=\"string\">'quux'</span>], <span class=\"attr\">corge</span>: <span class=\"string\">''</span> &#125;) </span><br><span class=\"line\"><span class=\"comment\">// returns </span></span><br><span class=\"line\"><span class=\"string\">'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge='</span> </span><br><span class=\"line\"> </span><br><span class=\"line\">querystring.stringify(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"string\">'qux'</span>&#125;, <span class=\"string\">';'</span>, <span class=\"string\">':'</span>) </span><br><span class=\"line\"><span class=\"comment\">// returns </span></span><br><span class=\"line\"><span class=\"string\">'foo:bar;baz:qux'</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"queryString模块\"><a href=\"#queryString模块\" class=\"headerlink\" title=\"queryString模块\"></a>queryString模块</h2><h3 id=\"1-安装：\"><a href=\"#1-安装：\" class=\"headerlink\" title=\"1. 安装：\"></a>1. 安装：</h3><pre><code>npm install query-string;\n</code></pre><h3 id=\"2-引入：\"><a href=\"#2-引入：\" class=\"headerlink\" title=\"2. 引入：\"></a>2. 引入：</h3><pre><code>import queryString from &apos;query-string&apos;;\n</code></pre><h3 id=\"3-应用：\"><a href=\"#3-应用：\" class=\"headerlink\" title=\"3. 应用：\"></a>3. 应用：</h3><h4 id=\"parse方法：\"><a href=\"#parse方法：\" class=\"headerlink\" title=\"- parse方法：\"></a>- parse方法：</h4><p>queryString.parse()方法用于将一个查询字符串解析为 JavaScript对象。<br>","more":"</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'foo=bar&amp;abc=xyz&amp;abc=123'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">queryString.parse(str)</span><br><span class=\"line\"><span class=\"comment\">// &#123; foo: 'bar', abc: [ 'xyz', '123' ] &#125;</span></span><br></pre></td></tr></table></figure>\n<p>应用举例：<em>地址栏解析</em><br>使用该方法会自动的去掉前面的？或者hash符号</p>\n<p><em><a href=\"https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=js&amp;oq=markdown&amp;rsv_pq=ebf79fd80000d7e3&amp;rsv_t=3dc6iuXLdZkFX9hdim9%2FvbE1mEIMj9TwDql89cx66DYUM1SuJSoSCRyBwes&amp;rqlang=cn&amp;rsv_enter=1&amp;inputT=2192&amp;rsv_sug3=22&amp;rsv_sug1=18&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_sug4=3745\" target=\"_blank\" rel=\"noopener\">JS</a></em> 点击链接,在控制台输入<em>window.location.search</em>得到下面的内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.search</span><br><span class=\"line\"><span class=\"string\">\"?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=js&amp;oq=markdown&amp;rsv_pq=ebf79fd80000d7e3&amp;rsv_t=3dc6iuXLdZkFX9hdim9%2FvbE1mEIMj9TwDql89cx66DYUM1SuJSoSCRyBwes&amp;rqlang=cn&amp;rsv_enter=1&amp;inputT=2192&amp;rsv_sug3=22&amp;rsv_sug1=18&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_sug4=3745\"</span></span><br></pre></td></tr></table></figure>\n<p>eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(location.search);</span><br><span class=\"line\"><span class=\"comment\">//=&gt; '?foo=bar&amp;abc=xyz'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> parsed = queryString.parse(location.search);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parsed);</span><br><span class=\"line\"><span class=\"comment\">//=&gt; &#123;foo: 'bar',abc: 'xyz'&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.hash);</span><br><span class=\"line\"><span class=\"comment\">//=&gt; '#token=bada55cafe'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> parsedHash = queryString.parse(location.hash);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parsedHash);</span><br><span class=\"line\"><span class=\"comment\">//=&gt; &#123;token: 'bada55cafe'&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样做地址解析很方便</p>\n<h4 id=\"Stringify方法\"><a href=\"#Stringify方法\" class=\"headerlink\" title=\"-Stringify方法\"></a>-Stringify方法</h4><p>queryString.stringify()是parse方法的逆操作：<br>eg:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">querystring.stringify(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: [<span class=\"string\">'qux'</span>, <span class=\"string\">'quux'</span>], <span class=\"attr\">corge</span>: <span class=\"string\">''</span> &#125;) </span><br><span class=\"line\"><span class=\"comment\">// returns </span></span><br><span class=\"line\"><span class=\"string\">'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge='</span> </span><br><span class=\"line\"> </span><br><span class=\"line\">querystring.stringify(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"string\">'qux'</span>&#125;, <span class=\"string\">';'</span>, <span class=\"string\">':'</span>) </span><br><span class=\"line\"><span class=\"comment\">// returns </span></span><br><span class=\"line\"><span class=\"string\">'foo:bar;baz:qux'</span></span><br></pre></td></tr></table></figure>"},{"title":"react 事件处理","_content":"## react 事件处理的几个方法：\n#### class定义组件，在constructor函数绑定回调函数：\n```\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isToggleOn: true,\n      value: 10\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this,12); // 要点一(作用域绑定和传参)\n  }\n\n  handleClick(v) {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn,\n      value: v\n    })); \n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>   // 要点二 （回调函数）\n           {this.state.isToggleOn ? 'ON' : 'OFF'}\n        </button>\n        <p>{this.state.value}</p>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Toggle />,\n  document.getElementById('root')\n);\n```\n当组件的方法使用ES5来写的话，需要将函数绑定到组件中。class 的方法默认不会绑定 this。如果你忘记绑定 this.handleClick 并把它传入了 onClick，当你调用这个函数的时候 this 的值为 undefined。\n```\n\"use strict\";\n\nfunction name() {\n  console.log(this);\\\\ undefined\n}\n\nname();\n```\n这种写法还有一个弊端，当组件被多次使用的时候，多分同样的功能的函数将保存在内存中，比较冗余。\n\n#### 使用ES6语法定义函数。\n```\nclass LoggingButton extends React.Component {\n  // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n  // 注意: 这是 *实验性* 语法。\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n\n```\nES6定义的箭头函数，函数內的this是在函数定义的时候绑定的，而ES5定义的函数则是在函数被调用的时候绑定的。所以使用箭头函数的时候，函数的this会绑定组件`LoggingButton`\n\n#### 回调函数使用箭头函数\n\n```\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this); //使用ES5\n  }\n\n  render() {\n    // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n    return (\n      <button onClick={(e) => this.handleClick(e)}>\n        Click me\n      </button>\n    );\n  }\n}\n```\n回调函数使用ES6的语法，在`LoggingButton`组件每次被渲染的时候都会重新生成回调函数，如果子组件通过props使用该函数，则会引起重复渲染。","source":"_posts/react事件.md","raw":"---\ntitle: react 事件处理\ntags: \n- React\n---\n## react 事件处理的几个方法：\n#### class定义组件，在constructor函数绑定回调函数：\n```\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isToggleOn: true,\n      value: 10\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this,12); // 要点一(作用域绑定和传参)\n  }\n\n  handleClick(v) {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn,\n      value: v\n    })); \n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>   // 要点二 （回调函数）\n           {this.state.isToggleOn ? 'ON' : 'OFF'}\n        </button>\n        <p>{this.state.value}</p>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Toggle />,\n  document.getElementById('root')\n);\n```\n当组件的方法使用ES5来写的话，需要将函数绑定到组件中。class 的方法默认不会绑定 this。如果你忘记绑定 this.handleClick 并把它传入了 onClick，当你调用这个函数的时候 this 的值为 undefined。\n```\n\"use strict\";\n\nfunction name() {\n  console.log(this);\\\\ undefined\n}\n\nname();\n```\n这种写法还有一个弊端，当组件被多次使用的时候，多分同样的功能的函数将保存在内存中，比较冗余。\n\n#### 使用ES6语法定义函数。\n```\nclass LoggingButton extends React.Component {\n  // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n  // 注意: 这是 *实验性* 语法。\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n\n```\nES6定义的箭头函数，函数內的this是在函数定义的时候绑定的，而ES5定义的函数则是在函数被调用的时候绑定的。所以使用箭头函数的时候，函数的this会绑定组件`LoggingButton`\n\n#### 回调函数使用箭头函数\n\n```\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this); //使用ES5\n  }\n\n  render() {\n    // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n    return (\n      <button onClick={(e) => this.handleClick(e)}>\n        Click me\n      </button>\n    );\n  }\n}\n```\n回调函数使用ES6的语法，在`LoggingButton`组件每次被渲染的时候都会重新生成回调函数，如果子组件通过props使用该函数，则会引起重复渲染。","slug":"react事件","published":1,"date":"2019-12-19T15:52:56.149Z","updated":"2019-12-19T15:52:56.150Z","_id":"ck4cwgnin002eckukeaghwh7q","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"react-事件处理的几个方法：\"><a href=\"#react-事件处理的几个方法：\" class=\"headerlink\" title=\"react 事件处理的几个方法：\"></a>react 事件处理的几个方法：</h2><h4 id=\"class定义组件，在constructor函数绑定回调函数：\"><a href=\"#class定义组件，在constructor函数绑定回调函数：\" class=\"headerlink\" title=\"class定义组件，在constructor函数绑定回调函数：\"></a>class定义组件，在constructor函数绑定回调函数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Toggle extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      isToggleOn: true,</span><br><span class=\"line\">      value: 10</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // This binding is necessary to make `this` work in the callback</span><br><span class=\"line\">    this.handleClick = this.handleClick.bind(this,12); // 要点一(作用域绑定和传参)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick(v) &#123;</span><br><span class=\"line\">    this.setState(prevState =&gt; (&#123;</span><br><span class=\"line\">      isToggleOn: !prevState.isToggleOn,</span><br><span class=\"line\">      value: v</span><br><span class=\"line\">    &#125;)); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;this.handleClick&#125;&gt;   // 要点二 （回调函数）</span><br><span class=\"line\">           &#123;this.state.isToggleOn ? &apos;ON&apos; : &apos;OFF&apos;&#125;</span><br><span class=\"line\">        &lt;/button&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;this.state.value&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Toggle /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>当组件的方法使用ES5来写的话，需要将函数绑定到组件中。class 的方法默认不会绑定 this。如果你忘记绑定 this.handleClick 并把它传入了 onClick，当你调用这个函数的时候 this 的值为 undefined。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function name() &#123;</span><br><span class=\"line\">  console.log(this);\\\\ undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">name();</span><br></pre></td></tr></table></figure></p>\n<p>这种写法还有一个弊端，当组件被多次使用的时候，多分同样的功能的函数将保存在内存中，比较冗余。</p>\n<h4 id=\"使用ES6语法定义函数。\"><a href=\"#使用ES6语法定义函数。\" class=\"headerlink\" title=\"使用ES6语法定义函数。\"></a>使用ES6语法定义函数。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class LoggingButton extends React.Component &#123;</span><br><span class=\"line\">  // 此语法确保 `handleClick` 内的 `this` 已被绑定。</span><br><span class=\"line\">  // 注意: 这是 *实验性* 语法。</span><br><span class=\"line\">  handleClick = () =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;this is:&apos;, this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;button onClick=&#123;this.handleClick&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES6定义的箭头函数，函数內的this是在函数定义的时候绑定的，而ES5定义的函数则是在函数被调用的时候绑定的。所以使用箭头函数的时候，函数的this会绑定组件<code>LoggingButton</code></p>\n<h4 id=\"回调函数使用箭头函数\"><a href=\"#回调函数使用箭头函数\" class=\"headerlink\" title=\"回调函数使用箭头函数\"></a>回调函数使用箭头函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class LoggingButton extends React.Component &#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    console.log(&apos;this is:&apos;, this); //使用ES5</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 此语法确保 `handleClick` 内的 `this` 已被绑定。</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;button onClick=&#123;(e) =&gt; this.handleClick(e)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回调函数使用ES6的语法，在<code>LoggingButton</code>组件每次被渲染的时候都会重新生成回调函数，如果子组件通过props使用该函数，则会引起重复渲染。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"react-事件处理的几个方法：\"><a href=\"#react-事件处理的几个方法：\" class=\"headerlink\" title=\"react 事件处理的几个方法：\"></a>react 事件处理的几个方法：</h2><h4 id=\"class定义组件，在constructor函数绑定回调函数：\"><a href=\"#class定义组件，在constructor函数绑定回调函数：\" class=\"headerlink\" title=\"class定义组件，在constructor函数绑定回调函数：\"></a>class定义组件，在constructor函数绑定回调函数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Toggle extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      isToggleOn: true,</span><br><span class=\"line\">      value: 10</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // This binding is necessary to make `this` work in the callback</span><br><span class=\"line\">    this.handleClick = this.handleClick.bind(this,12); // 要点一(作用域绑定和传参)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleClick(v) &#123;</span><br><span class=\"line\">    this.setState(prevState =&gt; (&#123;</span><br><span class=\"line\">      isToggleOn: !prevState.isToggleOn,</span><br><span class=\"line\">      value: v</span><br><span class=\"line\">    &#125;)); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;this.handleClick&#125;&gt;   // 要点二 （回调函数）</span><br><span class=\"line\">           &#123;this.state.isToggleOn ? &apos;ON&apos; : &apos;OFF&apos;&#125;</span><br><span class=\"line\">        &lt;/button&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;this.state.value&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Toggle /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>当组件的方法使用ES5来写的话，需要将函数绑定到组件中。class 的方法默认不会绑定 this。如果你忘记绑定 this.handleClick 并把它传入了 onClick，当你调用这个函数的时候 this 的值为 undefined。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function name() &#123;</span><br><span class=\"line\">  console.log(this);\\\\ undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">name();</span><br></pre></td></tr></table></figure></p>\n<p>这种写法还有一个弊端，当组件被多次使用的时候，多分同样的功能的函数将保存在内存中，比较冗余。</p>\n<h4 id=\"使用ES6语法定义函数。\"><a href=\"#使用ES6语法定义函数。\" class=\"headerlink\" title=\"使用ES6语法定义函数。\"></a>使用ES6语法定义函数。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class LoggingButton extends React.Component &#123;</span><br><span class=\"line\">  // 此语法确保 `handleClick` 内的 `this` 已被绑定。</span><br><span class=\"line\">  // 注意: 这是 *实验性* 语法。</span><br><span class=\"line\">  handleClick = () =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;this is:&apos;, this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;button onClick=&#123;this.handleClick&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES6定义的箭头函数，函数內的this是在函数定义的时候绑定的，而ES5定义的函数则是在函数被调用的时候绑定的。所以使用箭头函数的时候，函数的this会绑定组件<code>LoggingButton</code></p>\n<h4 id=\"回调函数使用箭头函数\"><a href=\"#回调函数使用箭头函数\" class=\"headerlink\" title=\"回调函数使用箭头函数\"></a>回调函数使用箭头函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class LoggingButton extends React.Component &#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    console.log(&apos;this is:&apos;, this); //使用ES5</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 此语法确保 `handleClick` 内的 `this` 已被绑定。</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;button onClick=&#123;(e) =&gt; this.handleClick(e)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回调函数使用ES6的语法，在<code>LoggingButton</code>组件每次被渲染的时候都会重新生成回调函数，如果子组件通过props使用该函数，则会引起重复渲染。</p>\n"},{"title":"React路由","_content":"# 待更新\n## 前言\n最近回顾了react路由的相关知识，然后看了history相关的源码来从本质上区分react中常用的两种路由hashRooter和browserRooter之间的区别，发现两者最大的区别有两点，一点是在事件监听上，另一点是在页面刷新上。源码的大致的功能看明白了，但是还有许多细节需要之后的时间去完善。下面做一下技术总结。\n\n## React路由常用组件：\n在 [React Rooter](https://reacttraining.com/react-router/web/api/Route)的官方文档里对React常用的路由组件例如：\n`<Router>、<Roote>、<Switch>、<Redict>、<Link>`有详细的讲解，包括路由的匹配规则等都有详细的描述,此处不想过多的赘述它们的使用，只做简要的概括。\n\n- Router：\n   - 在公司项目里使用的包是'react-router-dom'而不是'react-rooter'，这是因为前者是基于后者的，在'react-rooter'的基础上加入了一些新的组件，例如`<Link> 、<HashRooter>、<browserRooter>`。[参考链接](https://github.com/mrdulin/blog/issues/42)\n  - 在引入的时候可以直接`import { BrowserRouter as Rooter, Route, Link } from \"react-router-dom\";`也可以直接引入Rooter，然后再Rooter的history属性上绑定 hashRooter或browserRooter，不过这样比较麻烦，因为我们需要实例化history依赖中的createHashHistory或者createBrowserRooter方法。\n- Route\n  - 负责渲染具体的业务组件，负责匹配url和对应的组件\n  - 有三种渲染的组件的方式：component(对应的组件)、render(值是匿名函数，函数里渲染组件)、children(不关心path的匹配，无论哪种路由都会渲染)\n  - component属性值最好是组件，如果是匿名函数的话，由于route通过属性component的值使用React.createElement来构造组件，而函数是引用类型，每次都不是同一个函数，会导致每次渲染都要生成新的组件。\n- Switch\n  - 匹配到一个Route子组件就返回不再继续匹配其他组件。\n- Link\n  - Link是对a标签的封装，通过createHref函数将to里的字段和基础字段的拼接生成新的href。\n  当点击Link组件的时候会阻止a的默认事件，并将href的值传入history.pushState()。\n<!--more-->\n## HarshRooter和BrowserRooter的区别：\nHarshRooter和BrowserRooter分别是对Rooter组件的history属性为hashHistory和browserHistory的封装。HarshRooter和BrowserRooter的区别说到底是hashHistory和browserHistory的区别。而hashHistory使用的是createHashHistory方法，browserHistory使用的是createBrowserRooter。\n\n公司项目使用的HashRooter,举个项目中的例子:\n\n项目的URL：\n`https://dev.cn-northwest-1.test.bwtsi.cn/#/Tradeshift.Proforma/2ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments`\n\n```js\nconst history = createHashHistory();\nconst baseAppHash = _.chain(window.top.location.hash)\n\t.split(__app.id)\n\t.take(1)\n\t.concat(__app.id)\n  .join('').value();\n  \n  // baseAppHash :'#/Tradeshift.Proforma'\n  // pathName: '/2ede5898-a031-49bc-9334-71c454759efa'\n  // search: \"?from=ProformaManagerAP%2FsourceDocuments\"\n  // hash: ''\n\nhistory.listen(location => {\n\twindow.top.location.hash = [\n\t\tbaseAppHash,\n\t\tlocation.pathname,\n\t\tlocation.search,\n\t\tlocation.hash\n\t].join('');\n});\n\nexport const HashRouter = history;\n```\n从上面的例子可以看出，系统在使用`<Rooter history = {}>`这种形式来使用Rooter组件的时候，我们需要对属性值通过实例化createHashHistory()并通过实例中的listen来监听文档hash的变化。\n\n### 源码上看区别\n源码中的createHashHistory.js和createHashHistory.js中的history已经不是浏览器的history对象了，它在内部对history的一些方法做了封装，最后将history返回。\n\nhistory的结构：\n```js\n const history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref,\n    push,\n    replace,\n    go,\n    goBack,\n    goForward,\n    block,\n    listen\n  };\n```\n其中globalHistory就是浏览器history的对象。history中的go, goBack, goForward对应封装了原生的history.go、history.back()、history.forward()方法。\n\nlocation的结构：\n```js\nhistory.location = {\n  pathname: \"/2ede5898-a031-49bc-9334-71c454759efa\",\n  search: \"?from=ProformaManagerAP%2FsourceDocuments\", \n  hash: \"\", \n  state: undefined\n  }\n```\n从这个结构可以看出，history.location是浏览器location的封装，这个在HarshRooter和BrowserRooter中两者的定义没有区别。\n\n\n","source":"_posts/react-rooter.md","raw":"---\ntitle: React路由\ntags: \n- React\n- rooter\n- 路由\n---\n# 待更新\n## 前言\n最近回顾了react路由的相关知识，然后看了history相关的源码来从本质上区分react中常用的两种路由hashRooter和browserRooter之间的区别，发现两者最大的区别有两点，一点是在事件监听上，另一点是在页面刷新上。源码的大致的功能看明白了，但是还有许多细节需要之后的时间去完善。下面做一下技术总结。\n\n## React路由常用组件：\n在 [React Rooter](https://reacttraining.com/react-router/web/api/Route)的官方文档里对React常用的路由组件例如：\n`<Router>、<Roote>、<Switch>、<Redict>、<Link>`有详细的讲解，包括路由的匹配规则等都有详细的描述,此处不想过多的赘述它们的使用，只做简要的概括。\n\n- Router：\n   - 在公司项目里使用的包是'react-router-dom'而不是'react-rooter'，这是因为前者是基于后者的，在'react-rooter'的基础上加入了一些新的组件，例如`<Link> 、<HashRooter>、<browserRooter>`。[参考链接](https://github.com/mrdulin/blog/issues/42)\n  - 在引入的时候可以直接`import { BrowserRouter as Rooter, Route, Link } from \"react-router-dom\";`也可以直接引入Rooter，然后再Rooter的history属性上绑定 hashRooter或browserRooter，不过这样比较麻烦，因为我们需要实例化history依赖中的createHashHistory或者createBrowserRooter方法。\n- Route\n  - 负责渲染具体的业务组件，负责匹配url和对应的组件\n  - 有三种渲染的组件的方式：component(对应的组件)、render(值是匿名函数，函数里渲染组件)、children(不关心path的匹配，无论哪种路由都会渲染)\n  - component属性值最好是组件，如果是匿名函数的话，由于route通过属性component的值使用React.createElement来构造组件，而函数是引用类型，每次都不是同一个函数，会导致每次渲染都要生成新的组件。\n- Switch\n  - 匹配到一个Route子组件就返回不再继续匹配其他组件。\n- Link\n  - Link是对a标签的封装，通过createHref函数将to里的字段和基础字段的拼接生成新的href。\n  当点击Link组件的时候会阻止a的默认事件，并将href的值传入history.pushState()。\n<!--more-->\n## HarshRooter和BrowserRooter的区别：\nHarshRooter和BrowserRooter分别是对Rooter组件的history属性为hashHistory和browserHistory的封装。HarshRooter和BrowserRooter的区别说到底是hashHistory和browserHistory的区别。而hashHistory使用的是createHashHistory方法，browserHistory使用的是createBrowserRooter。\n\n公司项目使用的HashRooter,举个项目中的例子:\n\n项目的URL：\n`https://dev.cn-northwest-1.test.bwtsi.cn/#/Tradeshift.Proforma/2ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments`\n\n```js\nconst history = createHashHistory();\nconst baseAppHash = _.chain(window.top.location.hash)\n\t.split(__app.id)\n\t.take(1)\n\t.concat(__app.id)\n  .join('').value();\n  \n  // baseAppHash :'#/Tradeshift.Proforma'\n  // pathName: '/2ede5898-a031-49bc-9334-71c454759efa'\n  // search: \"?from=ProformaManagerAP%2FsourceDocuments\"\n  // hash: ''\n\nhistory.listen(location => {\n\twindow.top.location.hash = [\n\t\tbaseAppHash,\n\t\tlocation.pathname,\n\t\tlocation.search,\n\t\tlocation.hash\n\t].join('');\n});\n\nexport const HashRouter = history;\n```\n从上面的例子可以看出，系统在使用`<Rooter history = {}>`这种形式来使用Rooter组件的时候，我们需要对属性值通过实例化createHashHistory()并通过实例中的listen来监听文档hash的变化。\n\n### 源码上看区别\n源码中的createHashHistory.js和createHashHistory.js中的history已经不是浏览器的history对象了，它在内部对history的一些方法做了封装，最后将history返回。\n\nhistory的结构：\n```js\n const history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref,\n    push,\n    replace,\n    go,\n    goBack,\n    goForward,\n    block,\n    listen\n  };\n```\n其中globalHistory就是浏览器history的对象。history中的go, goBack, goForward对应封装了原生的history.go、history.back()、history.forward()方法。\n\nlocation的结构：\n```js\nhistory.location = {\n  pathname: \"/2ede5898-a031-49bc-9334-71c454759efa\",\n  search: \"?from=ProformaManagerAP%2FsourceDocuments\", \n  hash: \"\", \n  state: undefined\n  }\n```\n从这个结构可以看出，history.location是浏览器location的封装，这个在HarshRooter和BrowserRooter中两者的定义没有区别。\n\n\n","slug":"react-rooter","published":1,"date":"2019-12-19T15:52:56.149Z","updated":"2019-12-19T15:52:56.149Z","_id":"ck4cwgnin002gckukin6902mh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"待更新\"><a href=\"#待更新\" class=\"headerlink\" title=\"待更新\"></a>待更新</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近回顾了react路由的相关知识，然后看了history相关的源码来从本质上区分react中常用的两种路由hashRooter和browserRooter之间的区别，发现两者最大的区别有两点，一点是在事件监听上，另一点是在页面刷新上。源码的大致的功能看明白了，但是还有许多细节需要之后的时间去完善。下面做一下技术总结。</p>\n<h2 id=\"React路由常用组件：\"><a href=\"#React路由常用组件：\" class=\"headerlink\" title=\"React路由常用组件：\"></a>React路由常用组件：</h2><p>在 <a href=\"https://reacttraining.com/react-router/web/api/Route\" target=\"_blank\" rel=\"noopener\">React Rooter</a>的官方文档里对React常用的路由组件例如：<br><code>&lt;Router&gt;、&lt;Roote&gt;、&lt;Switch&gt;、&lt;Redict&gt;、&lt;Link&gt;</code>有详细的讲解，包括路由的匹配规则等都有详细的描述,此处不想过多的赘述它们的使用，只做简要的概括。</p>\n<ul>\n<li>Router：<ul>\n<li>在公司项目里使用的包是’react-router-dom’而不是’react-rooter’，这是因为前者是基于后者的，在’react-rooter’的基础上加入了一些新的组件，例如<code>&lt;Link&gt; 、&lt;HashRooter&gt;、&lt;browserRooter&gt;</code>。<a href=\"https://github.com/mrdulin/blog/issues/42\" target=\"_blank\" rel=\"noopener\">参考链接</a><ul>\n<li>在引入的时候可以直接<code>import { BrowserRouter as Rooter, Route, Link } from &quot;react-router-dom&quot;;</code>也可以直接引入Rooter，然后再Rooter的history属性上绑定 hashRooter或browserRooter，不过这样比较麻烦，因为我们需要实例化history依赖中的createHashHistory或者createBrowserRooter方法。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Route<ul>\n<li>负责渲染具体的业务组件，负责匹配url和对应的组件</li>\n<li>有三种渲染的组件的方式：component(对应的组件)、render(值是匿名函数，函数里渲染组件)、children(不关心path的匹配，无论哪种路由都会渲染)</li>\n<li>component属性值最好是组件，如果是匿名函数的话，由于route通过属性component的值使用React.createElement来构造组件，而函数是引用类型，每次都不是同一个函数，会导致每次渲染都要生成新的组件。</li>\n</ul>\n</li>\n<li>Switch<ul>\n<li>匹配到一个Route子组件就返回不再继续匹配其他组件。</li>\n</ul>\n</li>\n<li>Link<ul>\n<li>Link是对a标签的封装，通过createHref函数将to里的字段和基础字段的拼接生成新的href。<br>当点击Link组件的时候会阻止a的默认事件，并将href的值传入history.pushState()。<a id=\"more\"></a>\n<h2 id=\"HarshRooter和BrowserRooter的区别：\"><a href=\"#HarshRooter和BrowserRooter的区别：\" class=\"headerlink\" title=\"HarshRooter和BrowserRooter的区别：\"></a>HarshRooter和BrowserRooter的区别：</h2>HarshRooter和BrowserRooter分别是对Rooter组件的history属性为hashHistory和browserHistory的封装。HarshRooter和BrowserRooter的区别说到底是hashHistory和browserHistory的区别。而hashHistory使用的是createHashHistory方法，browserHistory使用的是createBrowserRooter。</li>\n</ul>\n</li>\n</ul>\n<p>公司项目使用的HashRooter,举个项目中的例子:</p>\n<p>项目的URL：<br><code>https://dev.cn-northwest-1.test.bwtsi.cn/#/Tradeshift.Proforma/2ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> history = createHashHistory();</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseAppHash = _.chain(<span class=\"built_in\">window</span>.top.location.hash)</span><br><span class=\"line\">\t.split(__app.id)</span><br><span class=\"line\">\t.take(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t.concat(__app.id)</span><br><span class=\"line\">  .join(<span class=\"string\">''</span>).value();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// baseAppHash :'#/Tradeshift.Proforma'</span></span><br><span class=\"line\">  <span class=\"comment\">// pathName: '/2ede5898-a031-49bc-9334-71c454759efa'</span></span><br><span class=\"line\">  <span class=\"comment\">// search: \"?from=ProformaManagerAP%2FsourceDocuments\"</span></span><br><span class=\"line\">  <span class=\"comment\">// hash: ''</span></span><br><span class=\"line\"></span><br><span class=\"line\">history.listen(<span class=\"function\"><span class=\"params\">location</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.top.location.hash = [</span><br><span class=\"line\">\t\tbaseAppHash,</span><br><span class=\"line\">\t\tlocation.pathname,</span><br><span class=\"line\">\t\tlocation.search,</span><br><span class=\"line\">\t\tlocation.hash</span><br><span class=\"line\">\t].join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> HashRouter = history;</span><br></pre></td></tr></table></figure>\n<p>从上面的例子可以看出，系统在使用<code>&lt;Rooter history = {}&gt;</code>这种形式来使用Rooter组件的时候，我们需要对属性值通过实例化createHashHistory()并通过实例中的listen来监听文档hash的变化。</p>\n<h3 id=\"源码上看区别\"><a href=\"#源码上看区别\" class=\"headerlink\" title=\"源码上看区别\"></a>源码上看区别</h3><p>源码中的createHashHistory.js和createHashHistory.js中的history已经不是浏览器的history对象了，它在内部对history的一些方法做了封装，最后将history返回。</p>\n<p>history的结构：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> history = &#123;</span><br><span class=\"line\">   length: globalHistory.length,</span><br><span class=\"line\">   action: <span class=\"string\">'POP'</span>,</span><br><span class=\"line\">   location: initialLocation,</span><br><span class=\"line\">   createHref,</span><br><span class=\"line\">   push,</span><br><span class=\"line\">   replace,</span><br><span class=\"line\">   go,</span><br><span class=\"line\">   goBack,</span><br><span class=\"line\">   goForward,</span><br><span class=\"line\">   block,</span><br><span class=\"line\">   listen</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>其中globalHistory就是浏览器history的对象。history中的go, goBack, goForward对应封装了原生的history.go、history.back()、history.forward()方法。</p>\n<p>location的结构：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.location = &#123;</span><br><span class=\"line\">  pathname: <span class=\"string\">\"/2ede5898-a031-49bc-9334-71c454759efa\"</span>,</span><br><span class=\"line\">  search: <span class=\"string\">\"?from=ProformaManagerAP%2FsourceDocuments\"</span>, </span><br><span class=\"line\">  hash: <span class=\"string\">\"\"</span>, </span><br><span class=\"line\">  state: <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这个结构可以看出，history.location是浏览器location的封装，这个在HarshRooter和BrowserRooter中两者的定义没有区别。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"待更新\"><a href=\"#待更新\" class=\"headerlink\" title=\"待更新\"></a>待更新</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近回顾了react路由的相关知识，然后看了history相关的源码来从本质上区分react中常用的两种路由hashRooter和browserRooter之间的区别，发现两者最大的区别有两点，一点是在事件监听上，另一点是在页面刷新上。源码的大致的功能看明白了，但是还有许多细节需要之后的时间去完善。下面做一下技术总结。</p>\n<h2 id=\"React路由常用组件：\"><a href=\"#React路由常用组件：\" class=\"headerlink\" title=\"React路由常用组件：\"></a>React路由常用组件：</h2><p>在 <a href=\"https://reacttraining.com/react-router/web/api/Route\" target=\"_blank\" rel=\"noopener\">React Rooter</a>的官方文档里对React常用的路由组件例如：<br><code>&lt;Router&gt;、&lt;Roote&gt;、&lt;Switch&gt;、&lt;Redict&gt;、&lt;Link&gt;</code>有详细的讲解，包括路由的匹配规则等都有详细的描述,此处不想过多的赘述它们的使用，只做简要的概括。</p>\n<ul>\n<li>Router：<ul>\n<li>在公司项目里使用的包是’react-router-dom’而不是’react-rooter’，这是因为前者是基于后者的，在’react-rooter’的基础上加入了一些新的组件，例如<code>&lt;Link&gt; 、&lt;HashRooter&gt;、&lt;browserRooter&gt;</code>。<a href=\"https://github.com/mrdulin/blog/issues/42\" target=\"_blank\" rel=\"noopener\">参考链接</a><ul>\n<li>在引入的时候可以直接<code>import { BrowserRouter as Rooter, Route, Link } from &quot;react-router-dom&quot;;</code>也可以直接引入Rooter，然后再Rooter的history属性上绑定 hashRooter或browserRooter，不过这样比较麻烦，因为我们需要实例化history依赖中的createHashHistory或者createBrowserRooter方法。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Route<ul>\n<li>负责渲染具体的业务组件，负责匹配url和对应的组件</li>\n<li>有三种渲染的组件的方式：component(对应的组件)、render(值是匿名函数，函数里渲染组件)、children(不关心path的匹配，无论哪种路由都会渲染)</li>\n<li>component属性值最好是组件，如果是匿名函数的话，由于route通过属性component的值使用React.createElement来构造组件，而函数是引用类型，每次都不是同一个函数，会导致每次渲染都要生成新的组件。</li>\n</ul>\n</li>\n<li>Switch<ul>\n<li>匹配到一个Route子组件就返回不再继续匹配其他组件。</li>\n</ul>\n</li>\n<li>Link<ul>\n<li>Link是对a标签的封装，通过createHref函数将to里的字段和基础字段的拼接生成新的href。<br>当点击Link组件的时候会阻止a的默认事件，并将href的值传入history.pushState()。","more":"<h2 id=\"HarshRooter和BrowserRooter的区别：\"><a href=\"#HarshRooter和BrowserRooter的区别：\" class=\"headerlink\" title=\"HarshRooter和BrowserRooter的区别：\"></a>HarshRooter和BrowserRooter的区别：</h2>HarshRooter和BrowserRooter分别是对Rooter组件的history属性为hashHistory和browserHistory的封装。HarshRooter和BrowserRooter的区别说到底是hashHistory和browserHistory的区别。而hashHistory使用的是createHashHistory方法，browserHistory使用的是createBrowserRooter。</li>\n</ul>\n</li>\n</ul>\n<p>公司项目使用的HashRooter,举个项目中的例子:</p>\n<p>项目的URL：<br><code>https://dev.cn-northwest-1.test.bwtsi.cn/#/Tradeshift.Proforma/2ede5898-a031-49bc-9334-71c454759efa?from=ProformaManagerAP%2FsourceDocuments</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> history = createHashHistory();</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseAppHash = _.chain(<span class=\"built_in\">window</span>.top.location.hash)</span><br><span class=\"line\">\t.split(__app.id)</span><br><span class=\"line\">\t.take(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t.concat(__app.id)</span><br><span class=\"line\">  .join(<span class=\"string\">''</span>).value();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// baseAppHash :'#/Tradeshift.Proforma'</span></span><br><span class=\"line\">  <span class=\"comment\">// pathName: '/2ede5898-a031-49bc-9334-71c454759efa'</span></span><br><span class=\"line\">  <span class=\"comment\">// search: \"?from=ProformaManagerAP%2FsourceDocuments\"</span></span><br><span class=\"line\">  <span class=\"comment\">// hash: ''</span></span><br><span class=\"line\"></span><br><span class=\"line\">history.listen(<span class=\"function\"><span class=\"params\">location</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.top.location.hash = [</span><br><span class=\"line\">\t\tbaseAppHash,</span><br><span class=\"line\">\t\tlocation.pathname,</span><br><span class=\"line\">\t\tlocation.search,</span><br><span class=\"line\">\t\tlocation.hash</span><br><span class=\"line\">\t].join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> HashRouter = history;</span><br></pre></td></tr></table></figure>\n<p>从上面的例子可以看出，系统在使用<code>&lt;Rooter history = {}&gt;</code>这种形式来使用Rooter组件的时候，我们需要对属性值通过实例化createHashHistory()并通过实例中的listen来监听文档hash的变化。</p>\n<h3 id=\"源码上看区别\"><a href=\"#源码上看区别\" class=\"headerlink\" title=\"源码上看区别\"></a>源码上看区别</h3><p>源码中的createHashHistory.js和createHashHistory.js中的history已经不是浏览器的history对象了，它在内部对history的一些方法做了封装，最后将history返回。</p>\n<p>history的结构：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> history = &#123;</span><br><span class=\"line\">   length: globalHistory.length,</span><br><span class=\"line\">   action: <span class=\"string\">'POP'</span>,</span><br><span class=\"line\">   location: initialLocation,</span><br><span class=\"line\">   createHref,</span><br><span class=\"line\">   push,</span><br><span class=\"line\">   replace,</span><br><span class=\"line\">   go,</span><br><span class=\"line\">   goBack,</span><br><span class=\"line\">   goForward,</span><br><span class=\"line\">   block,</span><br><span class=\"line\">   listen</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>其中globalHistory就是浏览器history的对象。history中的go, goBack, goForward对应封装了原生的history.go、history.back()、history.forward()方法。</p>\n<p>location的结构：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.location = &#123;</span><br><span class=\"line\">  pathname: <span class=\"string\">\"/2ede5898-a031-49bc-9334-71c454759efa\"</span>,</span><br><span class=\"line\">  search: <span class=\"string\">\"?from=ProformaManagerAP%2FsourceDocuments\"</span>, </span><br><span class=\"line\">  hash: <span class=\"string\">\"\"</span>, </span><br><span class=\"line\">  state: <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这个结构可以看出，history.location是浏览器location的封装，这个在HarshRooter和BrowserRooter中两者的定义没有区别。</p>"},{"title":"redux 基础","_content":"# redux笔记\n[点击查看图解](https://images2017.cnblogs.com/blog/1097840/201708/1097840-20170802140748615-1446659032.png)\n<p>action: 一个操作的定义，大概是这个样子, 本身是一个对象</p>\n\n```\n{\n    type:'add',\n    todo \n}\n```\nactionCreater: 一个函数，返回结果是一个action\n\n\n```\nfunction add (todo) {\n        return {\n            type: 'add',\n            todo\n        }\n    }\n```\n<!--more-->\n\nreducer： 真正更新数据操作的函数，大概是这么个样子\n==此处return状态不可以直接改，可以用解构，对象还可以Object.assign()==\n\n```\n// reducer\nlet todoReducer = function (state = todoList, action) {\n    switch (action.type) {\n        case 'add':\n            return [...state, action.todo]\n        case 'delete':\n            return state.filter(todo => todo.id !== action.id)\n        default:\n            return state\n    }\n}\n```\n\nstore： 只有一个,把action,state,reducer连接起来的对象。有如下方法\n\n> dispatch：触发一个action\n> \n> subscribe ： 订阅store\n> \n> getState ：获得当前的state\n> \n> replaceReducer ：更换reducer\n \n/* 简单示例 */\n\n```\nlet { createStore } = self.Redux\n \n//默认state\nlet todoList = []\n// reducer\nlet todoReducer = function (state = todoList, action) {\n    switch (action.type) {\n        case 'add':\n            return [...state, action.todo]\n        case 'delete':\n            return state.filter(todo => todo.id !== action.id)\n        default:\n            return state\n    }\n}\n \n//创建store\nlet store = createStore(todoReducer)\n \n//订阅\nfunction subscribe1Fn() {\n    console.log(store.getState())\n}\nlet sub = store.subscribe(subscribe1Fn)\n \nstore.dispatch({\n    type: 'add',\n    todo: {\n        id: 1,\n        content: '学习redux'\n    }\n})\n \nstore.dispatch({\n    type: 'add',\n    todo: {\n        id: 2,\n        content: '吃饭睡觉'\n    }\n})\n \nstore.dispatch({\n    type: 'delete',\n    id: 2\n})\n \n// 取消订阅\nsub()\n \nconsole.log('取消订阅后：')\nstore.dispatch({\n    type: 'add',\n    todo: {\n        id: 3,\n        content: '打游戏'\n    }\n})\n```\n[输出结果点击查看](https://images2017.cnblogs.com/blog/1097840/201708/1097840-20170802142828193-478843503.png)\n\n\n","source":"_posts/redux基础.md","raw":"---\ntitle: redux 基础\ntags: \n- React\n---\n# redux笔记\n[点击查看图解](https://images2017.cnblogs.com/blog/1097840/201708/1097840-20170802140748615-1446659032.png)\n<p>action: 一个操作的定义，大概是这个样子, 本身是一个对象</p>\n\n```\n{\n    type:'add',\n    todo \n}\n```\nactionCreater: 一个函数，返回结果是一个action\n\n\n```\nfunction add (todo) {\n        return {\n            type: 'add',\n            todo\n        }\n    }\n```\n<!--more-->\n\nreducer： 真正更新数据操作的函数，大概是这么个样子\n==此处return状态不可以直接改，可以用解构，对象还可以Object.assign()==\n\n```\n// reducer\nlet todoReducer = function (state = todoList, action) {\n    switch (action.type) {\n        case 'add':\n            return [...state, action.todo]\n        case 'delete':\n            return state.filter(todo => todo.id !== action.id)\n        default:\n            return state\n    }\n}\n```\n\nstore： 只有一个,把action,state,reducer连接起来的对象。有如下方法\n\n> dispatch：触发一个action\n> \n> subscribe ： 订阅store\n> \n> getState ：获得当前的state\n> \n> replaceReducer ：更换reducer\n \n/* 简单示例 */\n\n```\nlet { createStore } = self.Redux\n \n//默认state\nlet todoList = []\n// reducer\nlet todoReducer = function (state = todoList, action) {\n    switch (action.type) {\n        case 'add':\n            return [...state, action.todo]\n        case 'delete':\n            return state.filter(todo => todo.id !== action.id)\n        default:\n            return state\n    }\n}\n \n//创建store\nlet store = createStore(todoReducer)\n \n//订阅\nfunction subscribe1Fn() {\n    console.log(store.getState())\n}\nlet sub = store.subscribe(subscribe1Fn)\n \nstore.dispatch({\n    type: 'add',\n    todo: {\n        id: 1,\n        content: '学习redux'\n    }\n})\n \nstore.dispatch({\n    type: 'add',\n    todo: {\n        id: 2,\n        content: '吃饭睡觉'\n    }\n})\n \nstore.dispatch({\n    type: 'delete',\n    id: 2\n})\n \n// 取消订阅\nsub()\n \nconsole.log('取消订阅后：')\nstore.dispatch({\n    type: 'add',\n    todo: {\n        id: 3,\n        content: '打游戏'\n    }\n})\n```\n[输出结果点击查看](https://images2017.cnblogs.com/blog/1097840/201708/1097840-20170802142828193-478843503.png)\n\n\n","slug":"redux基础","published":1,"date":"2019-12-19T15:52:56.150Z","updated":"2019-12-19T15:52:56.150Z","_id":"ck4cwgnio002jckuke7zka2b8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"redux笔记\"><a href=\"#redux笔记\" class=\"headerlink\" title=\"redux笔记\"></a>redux笔记</h1><p><a href=\"https://images2017.cnblogs.com/blog/1097840/201708/1097840-20170802140748615-1446659032.png\" target=\"_blank\" rel=\"noopener\">点击查看图解</a></p>\n<p>action: 一个操作的定义，大概是这个样子, 本身是一个对象</p>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type:&apos;add&apos;,</span><br><span class=\"line\">    todo </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>actionCreater: 一个函数，返回结果是一个action</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add (todo) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            type: &apos;add&apos;,</span><br><span class=\"line\">            todo</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>reducer： 真正更新数据操作的函数，大概是这么个样子<br>==此处return状态不可以直接改，可以用解构，对象还可以Object.assign()==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// reducer</span><br><span class=\"line\">let todoReducer = function (state = todoList, action) &#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;add&apos;:</span><br><span class=\"line\">            return [...state, action.todo]</span><br><span class=\"line\">        case &apos;delete&apos;:</span><br><span class=\"line\">            return state.filter(todo =&gt; todo.id !== action.id)</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>store： 只有一个,把action,state,reducer连接起来的对象。有如下方法</p>\n<blockquote>\n<p>dispatch：触发一个action</p>\n<p>subscribe ： 订阅store</p>\n<p>getState ：获得当前的state</p>\n<p>replaceReducer ：更换reducer</p>\n</blockquote>\n<p>/<em> 简单示例 </em>/</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123; createStore &#125; = self.Redux</span><br><span class=\"line\"> </span><br><span class=\"line\">//默认state</span><br><span class=\"line\">let todoList = []</span><br><span class=\"line\">// reducer</span><br><span class=\"line\">let todoReducer = function (state = todoList, action) &#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;add&apos;:</span><br><span class=\"line\">            return [...state, action.todo]</span><br><span class=\"line\">        case &apos;delete&apos;:</span><br><span class=\"line\">            return state.filter(todo =&gt; todo.id !== action.id)</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//创建store</span><br><span class=\"line\">let store = createStore(todoReducer)</span><br><span class=\"line\"> </span><br><span class=\"line\">//订阅</span><br><span class=\"line\">function subscribe1Fn() &#123;</span><br><span class=\"line\">    console.log(store.getState())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let sub = store.subscribe(subscribe1Fn)</span><br><span class=\"line\"> </span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">    type: &apos;add&apos;,</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">        id: 1,</span><br><span class=\"line\">        content: &apos;学习redux&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">    type: &apos;add&apos;,</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">        id: 2,</span><br><span class=\"line\">        content: &apos;吃饭睡觉&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">    type: &apos;delete&apos;,</span><br><span class=\"line\">    id: 2</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 取消订阅</span><br><span class=\"line\">sub()</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(&apos;取消订阅后：&apos;)</span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">    type: &apos;add&apos;,</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">        id: 3,</span><br><span class=\"line\">        content: &apos;打游戏&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://images2017.cnblogs.com/blog/1097840/201708/1097840-20170802142828193-478843503.png\" target=\"_blank\" rel=\"noopener\">输出结果点击查看</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"redux笔记\"><a href=\"#redux笔记\" class=\"headerlink\" title=\"redux笔记\"></a>redux笔记</h1><p><a href=\"https://images2017.cnblogs.com/blog/1097840/201708/1097840-20170802140748615-1446659032.png\" target=\"_blank\" rel=\"noopener\">点击查看图解</a></p>\n<p>action: 一个操作的定义，大概是这个样子, 本身是一个对象</p>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type:&apos;add&apos;,</span><br><span class=\"line\">    todo </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>actionCreater: 一个函数，返回结果是一个action</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add (todo) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            type: &apos;add&apos;,</span><br><span class=\"line\">            todo</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","more":"<p>reducer： 真正更新数据操作的函数，大概是这么个样子<br>==此处return状态不可以直接改，可以用解构，对象还可以Object.assign()==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// reducer</span><br><span class=\"line\">let todoReducer = function (state = todoList, action) &#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;add&apos;:</span><br><span class=\"line\">            return [...state, action.todo]</span><br><span class=\"line\">        case &apos;delete&apos;:</span><br><span class=\"line\">            return state.filter(todo =&gt; todo.id !== action.id)</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>store： 只有一个,把action,state,reducer连接起来的对象。有如下方法</p>\n<blockquote>\n<p>dispatch：触发一个action</p>\n<p>subscribe ： 订阅store</p>\n<p>getState ：获得当前的state</p>\n<p>replaceReducer ：更换reducer</p>\n</blockquote>\n<p>/<em> 简单示例 </em>/</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123; createStore &#125; = self.Redux</span><br><span class=\"line\"> </span><br><span class=\"line\">//默认state</span><br><span class=\"line\">let todoList = []</span><br><span class=\"line\">// reducer</span><br><span class=\"line\">let todoReducer = function (state = todoList, action) &#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;add&apos;:</span><br><span class=\"line\">            return [...state, action.todo]</span><br><span class=\"line\">        case &apos;delete&apos;:</span><br><span class=\"line\">            return state.filter(todo =&gt; todo.id !== action.id)</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//创建store</span><br><span class=\"line\">let store = createStore(todoReducer)</span><br><span class=\"line\"> </span><br><span class=\"line\">//订阅</span><br><span class=\"line\">function subscribe1Fn() &#123;</span><br><span class=\"line\">    console.log(store.getState())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let sub = store.subscribe(subscribe1Fn)</span><br><span class=\"line\"> </span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">    type: &apos;add&apos;,</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">        id: 1,</span><br><span class=\"line\">        content: &apos;学习redux&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">    type: &apos;add&apos;,</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">        id: 2,</span><br><span class=\"line\">        content: &apos;吃饭睡觉&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">    type: &apos;delete&apos;,</span><br><span class=\"line\">    id: 2</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">// 取消订阅</span><br><span class=\"line\">sub()</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(&apos;取消订阅后：&apos;)</span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">    type: &apos;add&apos;,</span><br><span class=\"line\">    todo: &#123;</span><br><span class=\"line\">        id: 3,</span><br><span class=\"line\">        content: &apos;打游戏&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://images2017.cnblogs.com/blog/1097840/201708/1097840-20170802142828193-478843503.png\" target=\"_blank\" rel=\"noopener\">输出结果点击查看</a></p>"},{"title":"String.replace()","toc":true,"_content":"## String.replace()\n```\nString.replace(string|[RegExp],newSubStr|function)\n```\n","source":"_posts/replace.md","raw":"---\ntitle: String.replace()\ntoc: true\ntags: \n- JS\n- replace\n- String\n---\n## String.replace()\n```\nString.replace(string|[RegExp],newSubStr|function)\n```\n","slug":"replace","published":1,"date":"2019-12-19T15:52:56.150Z","updated":"2019-12-19T15:52:56.150Z","_id":"ck4cwgnip002kckukbembkibl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"String-replace\"><a href=\"#String-replace\" class=\"headerlink\" title=\"String.replace()\"></a>String.replace()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.replace(string|[RegExp],newSubStr|function)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"String-replace\"><a href=\"#String-replace\" class=\"headerlink\" title=\"String.replace()\"></a>String.replace()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.replace(string|[RegExp],newSubStr|function)</span><br></pre></td></tr></table></figure>\n"},{"title":"spectacle踩坑总结","toc":true,"_content":"spectacle 踩坑总结\n===\n  spectacle 是一款免费的窗口调节工具，对比可以在Mac 中下载收费的`Magent`\n### 一、Download:\n   点击找到仓库：[spectacle](https://github.com/eczarny/spectacle)\n\n下载到本地: ` git@github.com:eczarny/spectacle.git`\n<!--more-->\n\n### 二、Build:\n* 安装 **carthage** ：`brew install carthage`\n\n* 运行：`carthage bootstrap --platform Mac`\n\n  * 此时可能会报错：\n\n    >`xcrun: error: unable to find utility \"xcodebuild\", not a developer tool or in PATH`\n\n  * 解决方法：[点击跳转](https://www.jianshu.com/p/4baf84ef2e76)\n* 运行：` open Spectacle.xcodeproj`\n  * 此时可能会报错：\n\n    >`Command PhaseScriptExecution failed with a nonzero exit code\n`\n\n  * 解决方法：[点击跳转](https://juejin.im/post/5ba35cc05188255c7c655a8c)\n\n### 三、Run:\n  在xcode中: `command+R`\n\n### 四、build后的大坑：\n[点击跳转可以直接下载](https://spectacleapp.com/)\n:sob::sob::sob::sob::sob:\n\n\n\n\n\n\n","source":"_posts/spectacle.md","raw":"---\ntitle: spectacle踩坑总结\ntags: \n- 开发工具\ntoc: true\n---\nspectacle 踩坑总结\n===\n  spectacle 是一款免费的窗口调节工具，对比可以在Mac 中下载收费的`Magent`\n### 一、Download:\n   点击找到仓库：[spectacle](https://github.com/eczarny/spectacle)\n\n下载到本地: ` git@github.com:eczarny/spectacle.git`\n<!--more-->\n\n### 二、Build:\n* 安装 **carthage** ：`brew install carthage`\n\n* 运行：`carthage bootstrap --platform Mac`\n\n  * 此时可能会报错：\n\n    >`xcrun: error: unable to find utility \"xcodebuild\", not a developer tool or in PATH`\n\n  * 解决方法：[点击跳转](https://www.jianshu.com/p/4baf84ef2e76)\n* 运行：` open Spectacle.xcodeproj`\n  * 此时可能会报错：\n\n    >`Command PhaseScriptExecution failed with a nonzero exit code\n`\n\n  * 解决方法：[点击跳转](https://juejin.im/post/5ba35cc05188255c7c655a8c)\n\n### 三、Run:\n  在xcode中: `command+R`\n\n### 四、build后的大坑：\n[点击跳转可以直接下载](https://spectacleapp.com/)\n:sob::sob::sob::sob::sob:\n\n\n\n\n\n\n","slug":"spectacle","published":1,"date":"2019-12-19T15:52:56.151Z","updated":"2019-12-19T15:52:56.151Z","_id":"ck4cwgniq002mckukqxklaf3g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"spectacle-踩坑总结\"><a href=\"#spectacle-踩坑总结\" class=\"headerlink\" title=\"spectacle 踩坑总结\"></a>spectacle 踩坑总结</h1><p>  spectacle 是一款免费的窗口调节工具，对比可以在Mac 中下载收费的<code>Magent</code></p>\n<h3 id=\"一、Download\"><a href=\"#一、Download\" class=\"headerlink\" title=\"一、Download:\"></a>一、Download:</h3><p>   点击找到仓库：<a href=\"https://github.com/eczarny/spectacle\" target=\"_blank\" rel=\"noopener\">spectacle</a></p>\n<p>下载到本地: <code>git@github.com:eczarny/spectacle.git</code><br><a id=\"more\"></a></p>\n<h3 id=\"二、Build\"><a href=\"#二、Build\" class=\"headerlink\" title=\"二、Build:\"></a>二、Build:</h3><ul>\n<li><p>安装 <strong>carthage</strong> ：<code>brew install carthage</code></p>\n</li>\n<li><p>运行：<code>carthage bootstrap --platform Mac</code></p>\n<ul>\n<li><p>此时可能会报错：</p>\n<blockquote>\n<p><code>xcrun: error: unable to find utility &quot;xcodebuild&quot;, not a developer tool or in PATH</code></p>\n</blockquote>\n</li>\n<li><p>解决方法：<a href=\"https://www.jianshu.com/p/4baf84ef2e76\" target=\"_blank\" rel=\"noopener\">点击跳转</a></p>\n</li>\n</ul>\n</li>\n<li><p>运行：<code>open Spectacle.xcodeproj</code></p>\n<ul>\n<li><p>此时可能会报错：</p>\n<blockquote>\n<p><code>Command PhaseScriptExecution failed with a nonzero exit code</code></p>\n</blockquote>\n</li>\n<li><p>解决方法：<a href=\"https://juejin.im/post/5ba35cc05188255c7c655a8c\" target=\"_blank\" rel=\"noopener\">点击跳转</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、Run\"><a href=\"#三、Run\" class=\"headerlink\" title=\"三、Run:\"></a>三、Run:</h3><p>  在xcode中: <code>command+R</code></p>\n<h3 id=\"四、build后的大坑：\"><a href=\"#四、build后的大坑：\" class=\"headerlink\" title=\"四、build后的大坑：\"></a>四、build后的大坑：</h3><p><a href=\"https://spectacleapp.com/\" target=\"_blank\" rel=\"noopener\">点击跳转可以直接下载</a><br>:sob::sob::sob::sob::sob:</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"spectacle-踩坑总结\"><a href=\"#spectacle-踩坑总结\" class=\"headerlink\" title=\"spectacle 踩坑总结\"></a>spectacle 踩坑总结</h1><p>  spectacle 是一款免费的窗口调节工具，对比可以在Mac 中下载收费的<code>Magent</code></p>\n<h3 id=\"一、Download\"><a href=\"#一、Download\" class=\"headerlink\" title=\"一、Download:\"></a>一、Download:</h3><p>   点击找到仓库：<a href=\"https://github.com/eczarny/spectacle\" target=\"_blank\" rel=\"noopener\">spectacle</a></p>\n<p>下载到本地: <code>git@github.com:eczarny/spectacle.git</code><br>","more":"</p>\n<h3 id=\"二、Build\"><a href=\"#二、Build\" class=\"headerlink\" title=\"二、Build:\"></a>二、Build:</h3><ul>\n<li><p>安装 <strong>carthage</strong> ：<code>brew install carthage</code></p>\n</li>\n<li><p>运行：<code>carthage bootstrap --platform Mac</code></p>\n<ul>\n<li><p>此时可能会报错：</p>\n<blockquote>\n<p><code>xcrun: error: unable to find utility &quot;xcodebuild&quot;, not a developer tool or in PATH</code></p>\n</blockquote>\n</li>\n<li><p>解决方法：<a href=\"https://www.jianshu.com/p/4baf84ef2e76\" target=\"_blank\" rel=\"noopener\">点击跳转</a></p>\n</li>\n</ul>\n</li>\n<li><p>运行：<code>open Spectacle.xcodeproj</code></p>\n<ul>\n<li><p>此时可能会报错：</p>\n<blockquote>\n<p><code>Command PhaseScriptExecution failed with a nonzero exit code</code></p>\n</blockquote>\n</li>\n<li><p>解决方法：<a href=\"https://juejin.im/post/5ba35cc05188255c7c655a8c\" target=\"_blank\" rel=\"noopener\">点击跳转</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、Run\"><a href=\"#三、Run\" class=\"headerlink\" title=\"三、Run:\"></a>三、Run:</h3><p>  在xcode中: <code>command+R</code></p>\n<h3 id=\"四、build后的大坑：\"><a href=\"#四、build后的大坑：\" class=\"headerlink\" title=\"四、build后的大坑：\"></a>四、build后的大坑：</h3><p><a href=\"https://spectacleapp.com/\" target=\"_blank\" rel=\"noopener\">点击跳转可以直接下载</a><br>:sob::sob::sob::sob::sob:</p>"},{"title":"url从输入到页面显示的过程","toc":true,"_content":"## 前言：\n从url输入到地址栏，到页面显示内容一般经历下面的步骤：\n- DNS 解析:将域名解析成 IP 地址\n- TCP 连接：TCP 三次握手\n- 发送 HTTP 请求\n- 服务器处理请求并返回 HTTP 报文\n- 浏览器解析渲染页面\n- 断开连接：TCP 四次挥手\n## 1、DNS解析：\n一般我们输入的是URL，但是浏览器并不能通过URL直接来访问服务器。DNS解析就是一个将域名解析为对应的IP地址的过程。\n### 1.1 浏览器通过域名转DNS的过程：\n- 浏览器缓存：浏览器会按照一定的频率缓存 DNS 记录。\n- 操作系统缓存：如果浏览器缓存中找不到需要的 DNS 记录，那就去操作系统中找。\n- 路由缓存：路由器也有 DNS 缓存。\n- ISP 的 DNS 服务器：ISP 是互联网服务提供商(Internet Service - Provider)的简称，ISP 有专门的 DNS 服务器应对 DNS 查询请求。\n- 根服务器：ISP 的 DNS 服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS 服务器先问根域名服务器.com 域名服务器的 IP 地址，然后再问.baidu 域名服务器，依次类推）\n## 2、TCP链接（三次握手）：\nTCP作为一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率！\n\nTCP连接的一方A，由操作系统动态`随机选取`一个32位长的序列号（Initial Sequence Number），假设A的初始序列号为1000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，1001，1002，1003…，并把自己的初始序列号ISN告诉B。如果A收到B确认编号为2001，则意味着字节编号为1001-2000，共1000个字节已经安全到达。\n\n同理B也是类似的操作，假设B的初始序列号ISN为2000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，2001，2002，2003…，并把自己的初始序列号ISN告诉A，以便A可以确认B发送的每一个字节。如果B收到A确认编号为4001，则意味着字节编号为2001-4000，共2000个字节已经安全到达。\n### 2.1为什么是3次握手？\n<!--more-->\n**假设为四次握手**：\n\n1.1 A 发送同步信号SYN + A's Initial sequence number\n\n1.2 B 确认收到A的同步信号，并记录 A's ISN 到本地，命名 B's ACK sequence number\n\n1.3 B发送同步信号SYN + B's Initial sequence number \n\n1.4 A确认收到B的同步信号，并记录 B's ISN 到本地，命名 A's ACK sequence number\n\n很显然1.2和1.3 这两个步骤可以合并，只需要三次握手，可以提高连接的速度与效率。\n\n\n**二次握手怎么样？**：\n\n2.1 A 发送同步信号SYN + A's Initial sequence number\n\n2.2 B发送同步信号SYN + B's Initial sequence number + B's ACK sequence number\n\n`这里有一个问题，A与B就A的初始序列号达成了一致，这里是1000。但是B无法知道A是否已经接收到自己的同步信号，如果这个同步信号丢失了，A和B就B的初始序列号将无法达成一致。如果A发给B的确认丢了,\nA不会超时重传这个ACK，因为TCP不会为`没有数据的ACK`(请求数据端)超时重传。B如果没有收到A的ACK，会超时重传自己的SYN同步信号，一直到收到A的ACK为止。`\n\n**丢包的情况**\n\n1.A发给B的SYN 中途被丢，没有到达B\n\nA会周期性超时重传，直到收到B的确认\n\n2.B发给A的SYN +ACK 中途被丢，没有到达A\n\nB会周期性超时重传，直到收到A的确认\n\n3.第三个包，即A发给B的ACK 中途被丢，没有到达B\n\nA发完ACK，单方面认为TCP为 Established状态，而B显然认为TCP为Active状态：\n\n\na. 假定此时双方都没有数据发送，B会周期性超时重传，直到收到A的确认，收到之后B的TCP 连接也为 Established状态，双向可以发包。\n\nb. 假定此时A有数据发送，B收到A的 Data + ACK，自然会切换为established 状态，并接受A的 Data。\n\nc. 假定B有数据发送，数据发送不了，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据。\n\n**’关于为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误‘**\n> client 发出的第一个连接请求报文段并没有丢失，而是在某个Web结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。\n\n参考链接2：https://www.zhihu.com/question/24853633/answer/573627478\n![三次握手](http://www.w3.org/2000/svg)\n\n## 3.浏览器解析渲染页面\n- 根据HTML解析出DOM树\n- 根据CSS生成CSS规则树\n- 根据DOM树和CSS规则树生成渲染树\n- 根据渲染树计算每一个节点的信息\n- 根据计算好的信息渲染页面\n\n1. 根据 HTML 解析 DOM 树\n\n    根据 HTML 的内容，将标签按照结构解析成为 DOM 树，DOM 树解析的过程是一个深度优先遍历。即先构建当前节点的所有子节点，再构建下一个兄弟节点。\n    在读取 HTML 文档，构建 DOM 树的过程中，若遇到 script 标签，则 DOM 树的构建会暂停，直至脚本执行完毕。\n\n2. 根据 CSS 解析生成 CSS 规则树\n\n    解析 CSS 规则树时 js 执行将暂停，直至 CSS 规则树就绪。\n\n    浏览器在 CSS 规则树生成之前不会进行渲染。\n\n3. 结合 DOM 树和 CSS 规则树，生成渲染树\n\n    DOM 树和 CSS 规则树全部准备好了以后，浏览器才会开始构建渲染树。\n\n    精简 CSS 并可以加快 CSS 规则树的构建，从而加快页面相应速度。\n\n4. 根据渲染树计算每一个节点的信息（布局）\n\n    布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸\n\n    回流：在布局完成后，发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。\n\n5. 根据计算好的信息绘制页面\n\n    绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。\n\n    重绘：某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的重绘。\n\n    回流：某个元素的尺寸发生了变化，则需重新计算渲染树，重新渲染。\n\n    ## 4.断开连接（TCP四次挥手）\n\n  - \b发送终止信号FIN和当前序列号\n  - 被动方收到终止信号和主动方序列号，发送确认信号ack和自己的序列号seq给主动方。\n  - 等待数据传送完毕，被动方发送终止信号FIN、确认信号ack和自己的序列号seq给主动方\n  - 主动方收到终止信号FIN、确认信号ack和被动方序列号后，发送确认信号ack和序列号seq给被动方。\n\n  >主动方发出确认信号2 MSL(报文最大生存时间)后关闭的主要原因是确保确认信号被被动方接受，如果报文丢包就超时重传，这样避免主动方关闭后，被动方无法正常关闭。\n  \n  三次握手的原因是接收方将确认信号ack、同步信号SYN和初始序列号使用同一个报文传送给发送方。而四次挥手是因为当被动方发送确认终止信号后，还可以继续传输数据给主动方，等数据发送完后才可以发送终止信号FIN\n\n\n","source":"_posts/url从输入到页面显示.md","raw":"---\ntitle: url从输入到页面显示的过程\ntags: \n- Web\n- DNS\n- 三次握手\n- 四次挥手\ntoc: true\n---\n## 前言：\n从url输入到地址栏，到页面显示内容一般经历下面的步骤：\n- DNS 解析:将域名解析成 IP 地址\n- TCP 连接：TCP 三次握手\n- 发送 HTTP 请求\n- 服务器处理请求并返回 HTTP 报文\n- 浏览器解析渲染页面\n- 断开连接：TCP 四次挥手\n## 1、DNS解析：\n一般我们输入的是URL，但是浏览器并不能通过URL直接来访问服务器。DNS解析就是一个将域名解析为对应的IP地址的过程。\n### 1.1 浏览器通过域名转DNS的过程：\n- 浏览器缓存：浏览器会按照一定的频率缓存 DNS 记录。\n- 操作系统缓存：如果浏览器缓存中找不到需要的 DNS 记录，那就去操作系统中找。\n- 路由缓存：路由器也有 DNS 缓存。\n- ISP 的 DNS 服务器：ISP 是互联网服务提供商(Internet Service - Provider)的简称，ISP 有专门的 DNS 服务器应对 DNS 查询请求。\n- 根服务器：ISP 的 DNS 服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS 服务器先问根域名服务器.com 域名服务器的 IP 地址，然后再问.baidu 域名服务器，依次类推）\n## 2、TCP链接（三次握手）：\nTCP作为一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率！\n\nTCP连接的一方A，由操作系统动态`随机选取`一个32位长的序列号（Initial Sequence Number），假设A的初始序列号为1000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，1001，1002，1003…，并把自己的初始序列号ISN告诉B。如果A收到B确认编号为2001，则意味着字节编号为1001-2000，共1000个字节已经安全到达。\n\n同理B也是类似的操作，假设B的初始序列号ISN为2000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，2001，2002，2003…，并把自己的初始序列号ISN告诉A，以便A可以确认B发送的每一个字节。如果B收到A确认编号为4001，则意味着字节编号为2001-4000，共2000个字节已经安全到达。\n### 2.1为什么是3次握手？\n<!--more-->\n**假设为四次握手**：\n\n1.1 A 发送同步信号SYN + A's Initial sequence number\n\n1.2 B 确认收到A的同步信号，并记录 A's ISN 到本地，命名 B's ACK sequence number\n\n1.3 B发送同步信号SYN + B's Initial sequence number \n\n1.4 A确认收到B的同步信号，并记录 B's ISN 到本地，命名 A's ACK sequence number\n\n很显然1.2和1.3 这两个步骤可以合并，只需要三次握手，可以提高连接的速度与效率。\n\n\n**二次握手怎么样？**：\n\n2.1 A 发送同步信号SYN + A's Initial sequence number\n\n2.2 B发送同步信号SYN + B's Initial sequence number + B's ACK sequence number\n\n`这里有一个问题，A与B就A的初始序列号达成了一致，这里是1000。但是B无法知道A是否已经接收到自己的同步信号，如果这个同步信号丢失了，A和B就B的初始序列号将无法达成一致。如果A发给B的确认丢了,\nA不会超时重传这个ACK，因为TCP不会为`没有数据的ACK`(请求数据端)超时重传。B如果没有收到A的ACK，会超时重传自己的SYN同步信号，一直到收到A的ACK为止。`\n\n**丢包的情况**\n\n1.A发给B的SYN 中途被丢，没有到达B\n\nA会周期性超时重传，直到收到B的确认\n\n2.B发给A的SYN +ACK 中途被丢，没有到达A\n\nB会周期性超时重传，直到收到A的确认\n\n3.第三个包，即A发给B的ACK 中途被丢，没有到达B\n\nA发完ACK，单方面认为TCP为 Established状态，而B显然认为TCP为Active状态：\n\n\na. 假定此时双方都没有数据发送，B会周期性超时重传，直到收到A的确认，收到之后B的TCP 连接也为 Established状态，双向可以发包。\n\nb. 假定此时A有数据发送，B收到A的 Data + ACK，自然会切换为established 状态，并接受A的 Data。\n\nc. 假定B有数据发送，数据发送不了，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据。\n\n**’关于为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误‘**\n> client 发出的第一个连接请求报文段并没有丢失，而是在某个Web结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。\n\n参考链接2：https://www.zhihu.com/question/24853633/answer/573627478\n![三次握手](http://www.w3.org/2000/svg)\n\n## 3.浏览器解析渲染页面\n- 根据HTML解析出DOM树\n- 根据CSS生成CSS规则树\n- 根据DOM树和CSS规则树生成渲染树\n- 根据渲染树计算每一个节点的信息\n- 根据计算好的信息渲染页面\n\n1. 根据 HTML 解析 DOM 树\n\n    根据 HTML 的内容，将标签按照结构解析成为 DOM 树，DOM 树解析的过程是一个深度优先遍历。即先构建当前节点的所有子节点，再构建下一个兄弟节点。\n    在读取 HTML 文档，构建 DOM 树的过程中，若遇到 script 标签，则 DOM 树的构建会暂停，直至脚本执行完毕。\n\n2. 根据 CSS 解析生成 CSS 规则树\n\n    解析 CSS 规则树时 js 执行将暂停，直至 CSS 规则树就绪。\n\n    浏览器在 CSS 规则树生成之前不会进行渲染。\n\n3. 结合 DOM 树和 CSS 规则树，生成渲染树\n\n    DOM 树和 CSS 规则树全部准备好了以后，浏览器才会开始构建渲染树。\n\n    精简 CSS 并可以加快 CSS 规则树的构建，从而加快页面相应速度。\n\n4. 根据渲染树计算每一个节点的信息（布局）\n\n    布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸\n\n    回流：在布局完成后，发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。\n\n5. 根据计算好的信息绘制页面\n\n    绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。\n\n    重绘：某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的重绘。\n\n    回流：某个元素的尺寸发生了变化，则需重新计算渲染树，重新渲染。\n\n    ## 4.断开连接（TCP四次挥手）\n\n  - \b发送终止信号FIN和当前序列号\n  - 被动方收到终止信号和主动方序列号，发送确认信号ack和自己的序列号seq给主动方。\n  - 等待数据传送完毕，被动方发送终止信号FIN、确认信号ack和自己的序列号seq给主动方\n  - 主动方收到终止信号FIN、确认信号ack和被动方序列号后，发送确认信号ack和序列号seq给被动方。\n\n  >主动方发出确认信号2 MSL(报文最大生存时间)后关闭的主要原因是确保确认信号被被动方接受，如果报文丢包就超时重传，这样避免主动方关闭后，被动方无法正常关闭。\n  \n  三次握手的原因是接收方将确认信号ack、同步信号SYN和初始序列号使用同一个报文传送给发送方。而四次挥手是因为当被动方发送确认终止信号后，还可以继续传输数据给主动方，等数据发送完后才可以发送终止信号FIN\n\n\n","slug":"url从输入到页面显示","published":1,"date":"2019-12-19T15:52:56.151Z","updated":"2019-12-19T15:52:56.151Z","_id":"ck4cwgniq002nckuk5exrvb6g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>从url输入到地址栏，到页面显示内容一般经历下面的步骤：</p>\n<ul>\n<li>DNS 解析:将域名解析成 IP 地址</li>\n<li>TCP 连接：TCP 三次握手</li>\n<li>发送 HTTP 请求</li>\n<li>服务器处理请求并返回 HTTP 报文</li>\n<li>浏览器解析渲染页面</li>\n<li>断开连接：TCP 四次挥手<h2 id=\"1、DNS解析：\"><a href=\"#1、DNS解析：\" class=\"headerlink\" title=\"1、DNS解析：\"></a>1、DNS解析：</h2>一般我们输入的是URL，但是浏览器并不能通过URL直接来访问服务器。DNS解析就是一个将域名解析为对应的IP地址的过程。<h3 id=\"1-1-浏览器通过域名转DNS的过程：\"><a href=\"#1-1-浏览器通过域名转DNS的过程：\" class=\"headerlink\" title=\"1.1 浏览器通过域名转DNS的过程：\"></a>1.1 浏览器通过域名转DNS的过程：</h3></li>\n<li>浏览器缓存：浏览器会按照一定的频率缓存 DNS 记录。</li>\n<li>操作系统缓存：如果浏览器缓存中找不到需要的 DNS 记录，那就去操作系统中找。</li>\n<li>路由缓存：路由器也有 DNS 缓存。</li>\n<li>ISP 的 DNS 服务器：ISP 是互联网服务提供商(Internet Service - Provider)的简称，ISP 有专门的 DNS 服务器应对 DNS 查询请求。</li>\n<li>根服务器：ISP 的 DNS 服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS 服务器先问根域名服务器.com 域名服务器的 IP 地址，然后再问.baidu 域名服务器，依次类推）<h2 id=\"2、TCP链接（三次握手）：\"><a href=\"#2、TCP链接（三次握手）：\" class=\"headerlink\" title=\"2、TCP链接（三次握手）：\"></a>2、TCP链接（三次握手）：</h2>TCP作为一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率！</li>\n</ul>\n<p>TCP连接的一方A，由操作系统动态<code>随机选取</code>一个32位长的序列号（Initial Sequence Number），假设A的初始序列号为1000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，1001，1002，1003…，并把自己的初始序列号ISN告诉B。如果A收到B确认编号为2001，则意味着字节编号为1001-2000，共1000个字节已经安全到达。</p>\n<p>同理B也是类似的操作，假设B的初始序列号ISN为2000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，2001，2002，2003…，并把自己的初始序列号ISN告诉A，以便A可以确认B发送的每一个字节。如果B收到A确认编号为4001，则意味着字节编号为2001-4000，共2000个字节已经安全到达。</p>\n<h3 id=\"2-1为什么是3次握手？\"><a href=\"#2-1为什么是3次握手？\" class=\"headerlink\" title=\"2.1为什么是3次握手？\"></a>2.1为什么是3次握手？</h3><a id=\"more\"></a>\n<p><strong>假设为四次握手</strong>：</p>\n<p>1.1 A 发送同步信号SYN + A’s Initial sequence number</p>\n<p>1.2 B 确认收到A的同步信号，并记录 A’s ISN 到本地，命名 B’s ACK sequence number</p>\n<p>1.3 B发送同步信号SYN + B’s Initial sequence number </p>\n<p>1.4 A确认收到B的同步信号，并记录 B’s ISN 到本地，命名 A’s ACK sequence number</p>\n<p>很显然1.2和1.3 这两个步骤可以合并，只需要三次握手，可以提高连接的速度与效率。</p>\n<p><strong>二次握手怎么样？</strong>：</p>\n<p>2.1 A 发送同步信号SYN + A’s Initial sequence number</p>\n<p>2.2 B发送同步信号SYN + B’s Initial sequence number + B’s ACK sequence number</p>\n<p><code>这里有一个问题，A与B就A的初始序列号达成了一致，这里是1000。但是B无法知道A是否已经接收到自己的同步信号，如果这个同步信号丢失了，A和B就B的初始序列号将无法达成一致。如果A发给B的确认丢了,\nA不会超时重传这个ACK，因为TCP不会为</code>没有数据的ACK<code>(请求数据端)超时重传。B如果没有收到A的ACK，会超时重传自己的SYN同步信号，一直到收到A的ACK为止。</code></p>\n<p><strong>丢包的情况</strong></p>\n<p>1.A发给B的SYN 中途被丢，没有到达B</p>\n<p>A会周期性超时重传，直到收到B的确认</p>\n<p>2.B发给A的SYN +ACK 中途被丢，没有到达A</p>\n<p>B会周期性超时重传，直到收到A的确认</p>\n<p>3.第三个包，即A发给B的ACK 中途被丢，没有到达B</p>\n<p>A发完ACK，单方面认为TCP为 Established状态，而B显然认为TCP为Active状态：</p>\n<p>a. 假定此时双方都没有数据发送，B会周期性超时重传，直到收到A的确认，收到之后B的TCP 连接也为 Established状态，双向可以发包。</p>\n<p>b. 假定此时A有数据发送，B收到A的 Data + ACK，自然会切换为established 状态，并接受A的 Data。</p>\n<p>c. 假定B有数据发送，数据发送不了，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据。</p>\n<p><strong>’关于为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误‘</strong></p>\n<blockquote>\n<p>client 发出的第一个连接请求报文段并没有丢失，而是在某个Web结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。</p>\n</blockquote>\n<p>参考链接2：<a href=\"https://www.zhihu.com/question/24853633/answer/573627478\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24853633/answer/573627478</a><br><img src=\"http://www.w3.org/2000/svg\" alt=\"三次握手\"></p>\n<h2 id=\"3-浏览器解析渲染页面\"><a href=\"#3-浏览器解析渲染页面\" class=\"headerlink\" title=\"3.浏览器解析渲染页面\"></a>3.浏览器解析渲染页面</h2><ul>\n<li>根据HTML解析出DOM树</li>\n<li>根据CSS生成CSS规则树</li>\n<li>根据DOM树和CSS规则树生成渲染树</li>\n<li>根据渲染树计算每一个节点的信息</li>\n<li>根据计算好的信息渲染页面</li>\n</ul>\n<ol>\n<li><p>根据 HTML 解析 DOM 树</p>\n<p> 根据 HTML 的内容，将标签按照结构解析成为 DOM 树，DOM 树解析的过程是一个深度优先遍历。即先构建当前节点的所有子节点，再构建下一个兄弟节点。<br> 在读取 HTML 文档，构建 DOM 树的过程中，若遇到 script 标签，则 DOM 树的构建会暂停，直至脚本执行完毕。</p>\n</li>\n<li><p>根据 CSS 解析生成 CSS 规则树</p>\n<p> 解析 CSS 规则树时 js 执行将暂停，直至 CSS 规则树就绪。</p>\n<p> 浏览器在 CSS 规则树生成之前不会进行渲染。</p>\n</li>\n<li><p>结合 DOM 树和 CSS 规则树，生成渲染树</p>\n<p> DOM 树和 CSS 规则树全部准备好了以后，浏览器才会开始构建渲染树。</p>\n<p> 精简 CSS 并可以加快 CSS 规则树的构建，从而加快页面相应速度。</p>\n</li>\n<li><p>根据渲染树计算每一个节点的信息（布局）</p>\n<p> 布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸</p>\n<p> 回流：在布局完成后，发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。</p>\n</li>\n<li><p>根据计算好的信息绘制页面</p>\n<p> 绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。</p>\n<p> 重绘：某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的重绘。</p>\n<p> 回流：某个元素的尺寸发生了变化，则需重新计算渲染树，重新渲染。</p>\n<h2 id=\"4-断开连接（TCP四次挥手）\"><a href=\"#4-断开连接（TCP四次挥手）\" class=\"headerlink\" title=\"4.断开连接（TCP四次挥手）\"></a>4.断开连接（TCP四次挥手）</h2><ul>\n<li>\b发送终止信号FIN和当前序列号</li>\n<li>被动方收到终止信号和主动方序列号，发送确认信号ack和自己的序列号seq给主动方。</li>\n<li>等待数据传送完毕，被动方发送终止信号FIN、确认信号ack和自己的序列号seq给主动方</li>\n<li>主动方收到终止信号FIN、确认信号ack和被动方序列号后，发送确认信号ack和序列号seq给被动方。</li>\n</ul>\n<blockquote>\n<p>主动方发出确认信号2 MSL(报文最大生存时间)后关闭的主要原因是确保确认信号被被动方接受，如果报文丢包就超时重传，这样避免主动方关闭后，被动方无法正常关闭。</p>\n</blockquote>\n<p>三次握手的原因是接收方将确认信号ack、同步信号SYN和初始序列号使用同一个报文传送给发送方。而四次挥手是因为当被动方发送确认终止信号后，还可以继续传输数据给主动方，等数据发送完后才可以发送终止信号FIN</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>从url输入到地址栏，到页面显示内容一般经历下面的步骤：</p>\n<ul>\n<li>DNS 解析:将域名解析成 IP 地址</li>\n<li>TCP 连接：TCP 三次握手</li>\n<li>发送 HTTP 请求</li>\n<li>服务器处理请求并返回 HTTP 报文</li>\n<li>浏览器解析渲染页面</li>\n<li>断开连接：TCP 四次挥手<h2 id=\"1、DNS解析：\"><a href=\"#1、DNS解析：\" class=\"headerlink\" title=\"1、DNS解析：\"></a>1、DNS解析：</h2>一般我们输入的是URL，但是浏览器并不能通过URL直接来访问服务器。DNS解析就是一个将域名解析为对应的IP地址的过程。<h3 id=\"1-1-浏览器通过域名转DNS的过程：\"><a href=\"#1-1-浏览器通过域名转DNS的过程：\" class=\"headerlink\" title=\"1.1 浏览器通过域名转DNS的过程：\"></a>1.1 浏览器通过域名转DNS的过程：</h3></li>\n<li>浏览器缓存：浏览器会按照一定的频率缓存 DNS 记录。</li>\n<li>操作系统缓存：如果浏览器缓存中找不到需要的 DNS 记录，那就去操作系统中找。</li>\n<li>路由缓存：路由器也有 DNS 缓存。</li>\n<li>ISP 的 DNS 服务器：ISP 是互联网服务提供商(Internet Service - Provider)的简称，ISP 有专门的 DNS 服务器应对 DNS 查询请求。</li>\n<li>根服务器：ISP 的 DNS 服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS 服务器先问根域名服务器.com 域名服务器的 IP 地址，然后再问.baidu 域名服务器，依次类推）<h2 id=\"2、TCP链接（三次握手）：\"><a href=\"#2、TCP链接（三次握手）：\" class=\"headerlink\" title=\"2、TCP链接（三次握手）：\"></a>2、TCP链接（三次握手）：</h2>TCP作为一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率！</li>\n</ul>\n<p>TCP连接的一方A，由操作系统动态<code>随机选取</code>一个32位长的序列号（Initial Sequence Number），假设A的初始序列号为1000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，1001，1002，1003…，并把自己的初始序列号ISN告诉B。如果A收到B确认编号为2001，则意味着字节编号为1001-2000，共1000个字节已经安全到达。</p>\n<p>同理B也是类似的操作，假设B的初始序列号ISN为2000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，2001，2002，2003…，并把自己的初始序列号ISN告诉A，以便A可以确认B发送的每一个字节。如果B收到A确认编号为4001，则意味着字节编号为2001-4000，共2000个字节已经安全到达。</p>\n<h3 id=\"2-1为什么是3次握手？\"><a href=\"#2-1为什么是3次握手？\" class=\"headerlink\" title=\"2.1为什么是3次握手？\"></a>2.1为什么是3次握手？</h3>","more":"<p><strong>假设为四次握手</strong>：</p>\n<p>1.1 A 发送同步信号SYN + A’s Initial sequence number</p>\n<p>1.2 B 确认收到A的同步信号，并记录 A’s ISN 到本地，命名 B’s ACK sequence number</p>\n<p>1.3 B发送同步信号SYN + B’s Initial sequence number </p>\n<p>1.4 A确认收到B的同步信号，并记录 B’s ISN 到本地，命名 A’s ACK sequence number</p>\n<p>很显然1.2和1.3 这两个步骤可以合并，只需要三次握手，可以提高连接的速度与效率。</p>\n<p><strong>二次握手怎么样？</strong>：</p>\n<p>2.1 A 发送同步信号SYN + A’s Initial sequence number</p>\n<p>2.2 B发送同步信号SYN + B’s Initial sequence number + B’s ACK sequence number</p>\n<p><code>这里有一个问题，A与B就A的初始序列号达成了一致，这里是1000。但是B无法知道A是否已经接收到自己的同步信号，如果这个同步信号丢失了，A和B就B的初始序列号将无法达成一致。如果A发给B的确认丢了,\nA不会超时重传这个ACK，因为TCP不会为</code>没有数据的ACK<code>(请求数据端)超时重传。B如果没有收到A的ACK，会超时重传自己的SYN同步信号，一直到收到A的ACK为止。</code></p>\n<p><strong>丢包的情况</strong></p>\n<p>1.A发给B的SYN 中途被丢，没有到达B</p>\n<p>A会周期性超时重传，直到收到B的确认</p>\n<p>2.B发给A的SYN +ACK 中途被丢，没有到达A</p>\n<p>B会周期性超时重传，直到收到A的确认</p>\n<p>3.第三个包，即A发给B的ACK 中途被丢，没有到达B</p>\n<p>A发完ACK，单方面认为TCP为 Established状态，而B显然认为TCP为Active状态：</p>\n<p>a. 假定此时双方都没有数据发送，B会周期性超时重传，直到收到A的确认，收到之后B的TCP 连接也为 Established状态，双向可以发包。</p>\n<p>b. 假定此时A有数据发送，B收到A的 Data + ACK，自然会切换为established 状态，并接受A的 Data。</p>\n<p>c. 假定B有数据发送，数据发送不了，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据。</p>\n<p><strong>’关于为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误‘</strong></p>\n<blockquote>\n<p>client 发出的第一个连接请求报文段并没有丢失，而是在某个Web结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。</p>\n</blockquote>\n<p>参考链接2：<a href=\"https://www.zhihu.com/question/24853633/answer/573627478\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24853633/answer/573627478</a><br><img src=\"http://www.w3.org/2000/svg\" alt=\"三次握手\"></p>\n<h2 id=\"3-浏览器解析渲染页面\"><a href=\"#3-浏览器解析渲染页面\" class=\"headerlink\" title=\"3.浏览器解析渲染页面\"></a>3.浏览器解析渲染页面</h2><ul>\n<li>根据HTML解析出DOM树</li>\n<li>根据CSS生成CSS规则树</li>\n<li>根据DOM树和CSS规则树生成渲染树</li>\n<li>根据渲染树计算每一个节点的信息</li>\n<li>根据计算好的信息渲染页面</li>\n</ul>\n<ol>\n<li><p>根据 HTML 解析 DOM 树</p>\n<p> 根据 HTML 的内容，将标签按照结构解析成为 DOM 树，DOM 树解析的过程是一个深度优先遍历。即先构建当前节点的所有子节点，再构建下一个兄弟节点。<br> 在读取 HTML 文档，构建 DOM 树的过程中，若遇到 script 标签，则 DOM 树的构建会暂停，直至脚本执行完毕。</p>\n</li>\n<li><p>根据 CSS 解析生成 CSS 规则树</p>\n<p> 解析 CSS 规则树时 js 执行将暂停，直至 CSS 规则树就绪。</p>\n<p> 浏览器在 CSS 规则树生成之前不会进行渲染。</p>\n</li>\n<li><p>结合 DOM 树和 CSS 规则树，生成渲染树</p>\n<p> DOM 树和 CSS 规则树全部准备好了以后，浏览器才会开始构建渲染树。</p>\n<p> 精简 CSS 并可以加快 CSS 规则树的构建，从而加快页面相应速度。</p>\n</li>\n<li><p>根据渲染树计算每一个节点的信息（布局）</p>\n<p> 布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸</p>\n<p> 回流：在布局完成后，发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。</p>\n</li>\n<li><p>根据计算好的信息绘制页面</p>\n<p> 绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。</p>\n<p> 重绘：某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的重绘。</p>\n<p> 回流：某个元素的尺寸发生了变化，则需重新计算渲染树，重新渲染。</p>\n<h2 id=\"4-断开连接（TCP四次挥手）\"><a href=\"#4-断开连接（TCP四次挥手）\" class=\"headerlink\" title=\"4.断开连接（TCP四次挥手）\"></a>4.断开连接（TCP四次挥手）</h2><ul>\n<li>\b发送终止信号FIN和当前序列号</li>\n<li>被动方收到终止信号和主动方序列号，发送确认信号ack和自己的序列号seq给主动方。</li>\n<li>等待数据传送完毕，被动方发送终止信号FIN、确认信号ack和自己的序列号seq给主动方</li>\n<li>主动方收到终止信号FIN、确认信号ack和被动方序列号后，发送确认信号ack和序列号seq给被动方。</li>\n</ul>\n<blockquote>\n<p>主动方发出确认信号2 MSL(报文最大生存时间)后关闭的主要原因是确保确认信号被被动方接受，如果报文丢包就超时重传，这样避免主动方关闭后，被动方无法正常关闭。</p>\n</blockquote>\n<p>三次握手的原因是接收方将确认信号ack、同步信号SYN和初始序列号使用同一个报文传送给发送方。而四次挥手是因为当被动方发送确认终止信号后，还可以继续传输数据给主动方，等数据发送完后才可以发送终止信号FIN</p>\n</li>\n</ol>"},{"title":"中间件教程","_content":"## 中间件教程\n1. 中间件流程：https://zhuanlan.zhihu.com/p/21391101?refer=leanreact\n2. 通俗版：https://www.cnblogs.com/wshiqtb/p/7909770.html\n3. 源码：https://blog.csdn.net/worisaa/article/details/61913915\n4. redux函数源码：https://www.cnblogs.com/cloud-/p/7282188.html","source":"_posts/中间件教程.md","raw":"---\ntitle: 中间件教程\ntags: \n- React\n---\n## 中间件教程\n1. 中间件流程：https://zhuanlan.zhihu.com/p/21391101?refer=leanreact\n2. 通俗版：https://www.cnblogs.com/wshiqtb/p/7909770.html\n3. 源码：https://blog.csdn.net/worisaa/article/details/61913915\n4. redux函数源码：https://www.cnblogs.com/cloud-/p/7282188.html","slug":"中间件教程","published":1,"date":"2019-12-19T15:52:56.151Z","updated":"2019-12-19T15:52:56.152Z","_id":"ck4cwgnir002pckuk5ygrjrxu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"中间件教程\"><a href=\"#中间件教程\" class=\"headerlink\" title=\"中间件教程\"></a>中间件教程</h2><ol>\n<li>中间件流程：<a href=\"https://zhuanlan.zhihu.com/p/21391101?refer=leanreact\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/21391101?refer=leanreact</a></li>\n<li>通俗版：<a href=\"https://www.cnblogs.com/wshiqtb/p/7909770.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wshiqtb/p/7909770.html</a></li>\n<li>源码：<a href=\"https://blog.csdn.net/worisaa/article/details/61913915\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/worisaa/article/details/61913915</a></li>\n<li>redux函数源码：<a href=\"https://www.cnblogs.com/cloud-/p/7282188.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cloud-/p/7282188.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"中间件教程\"><a href=\"#中间件教程\" class=\"headerlink\" title=\"中间件教程\"></a>中间件教程</h2><ol>\n<li>中间件流程：<a href=\"https://zhuanlan.zhihu.com/p/21391101?refer=leanreact\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/21391101?refer=leanreact</a></li>\n<li>通俗版：<a href=\"https://www.cnblogs.com/wshiqtb/p/7909770.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wshiqtb/p/7909770.html</a></li>\n<li>源码：<a href=\"https://blog.csdn.net/worisaa/article/details/61913915\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/worisaa/article/details/61913915</a></li>\n<li>redux函数源码：<a href=\"https://www.cnblogs.com/cloud-/p/7282188.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cloud-/p/7282188.html</a></li>\n</ol>\n"},{"title":"二叉树遍历","_content":"## 前序遍历\n### 递归方式：\n```js\nvar preorderTraversal = function(root) {\n    var ans = [];\n    if(root) {\n        ans.push(root.val);\n        ans = ans.concat(preorderTraversal(root.left));\n        ans = ans.concat(preorderTraversal(root.right));\n    }\n    return ans;\n};\n```\n### 非递归方式\n\n```js\nvar preorderTraversal = function(root) {\n    if(root === null) return [];\n    var stack = [root];\n    var ans = [];\n    while(stack.length) {\n        var node = stack.pop();\n        ans.push(node.val);\n        node.right && stack.push(node.right);\n        node.left && stack.push(node.left);\n    }\n    return ans;\n};\n```\n<!-- more-->\n## 中序遍历\n### 递归模式\n\n```js\nvar inorderTraversal = function(root) {\n    var arr = [];\n    if(root) {\n        arr.push(...inorderTraversal(root.left));\n        arr.push(root.val);\n        arr.push(...inorderTraversal(root.right));\n    }\n    return arr;\n};\n```\n### 非递归\n```js\nvar inorderTraversal = function(root) {\n    let stack = [];\n    let ans = [];\n    let p = root;\n    while(p || stack.length) {\n        while(p) {\n            stack.push(p);\n            p = p.left;\n        }\n        p = stack.pop();\n        ans.push(p.val);\n        p = p.right;\n    }\n    return ans\n};\n```\n\n## 后续遍历\n### 递归模式\n\n```js\nvar postorderTraversal = function(root) {\n    var arr = [];\n    if(root) {\n        arr.push(...postorderTraversal(root.left));\n        arr.push(...postorderTraversal(root.right));\n        arr.push(root.val);\n    }\n    return arr;\n};\n```\n### 非递归模式\n\n```js\nvar postorderTraversal = function(root) {\n    if(root === null) return []\n\n    var stack = [root];\n    var ans = [];\n    while(stack.length) {\n        var node = stack.pop();\n        ans.unshift(node.val);\n        node.left && stack.push(node.left);\n        node.right && stack.push(node.right);\n    }\n    return ans;\n};\n```\n## 层次遍历\n```js\nvar levelOrder = function(root) {\n    if(!root) {\n        return [];\n    }\n    let queue = [root];\n    let ans = [];\n    let level = 0;\n    while(queue.length) {\n        ans[level] = [];\n        let queueLen = queue.length;\n        while(queueLen) {\n            let p = queue.shift();\n            ans[level].push(p.val);\n            p.left && queue.push(p.left);\n            p.right && queue.push(p.right);\n            queueLen--;\n        }\n        level++\n    }\n    return ans\n};\n```\n参考链接：https://app.yinxiang.com/fx/d65415ec-c007-40d6-ab49-3bb918313d93\n脚本运行链接：https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/2/traverse-a-tree/2/\n","source":"_posts/二叉树遍历.md","raw":"---\ntitle: 二叉树遍历\ntags: \n- JS\n- 前序遍历\n- 中序遍历\n- 后序遍历\n- 层次遍历\n---\n## 前序遍历\n### 递归方式：\n```js\nvar preorderTraversal = function(root) {\n    var ans = [];\n    if(root) {\n        ans.push(root.val);\n        ans = ans.concat(preorderTraversal(root.left));\n        ans = ans.concat(preorderTraversal(root.right));\n    }\n    return ans;\n};\n```\n### 非递归方式\n\n```js\nvar preorderTraversal = function(root) {\n    if(root === null) return [];\n    var stack = [root];\n    var ans = [];\n    while(stack.length) {\n        var node = stack.pop();\n        ans.push(node.val);\n        node.right && stack.push(node.right);\n        node.left && stack.push(node.left);\n    }\n    return ans;\n};\n```\n<!-- more-->\n## 中序遍历\n### 递归模式\n\n```js\nvar inorderTraversal = function(root) {\n    var arr = [];\n    if(root) {\n        arr.push(...inorderTraversal(root.left));\n        arr.push(root.val);\n        arr.push(...inorderTraversal(root.right));\n    }\n    return arr;\n};\n```\n### 非递归\n```js\nvar inorderTraversal = function(root) {\n    let stack = [];\n    let ans = [];\n    let p = root;\n    while(p || stack.length) {\n        while(p) {\n            stack.push(p);\n            p = p.left;\n        }\n        p = stack.pop();\n        ans.push(p.val);\n        p = p.right;\n    }\n    return ans\n};\n```\n\n## 后续遍历\n### 递归模式\n\n```js\nvar postorderTraversal = function(root) {\n    var arr = [];\n    if(root) {\n        arr.push(...postorderTraversal(root.left));\n        arr.push(...postorderTraversal(root.right));\n        arr.push(root.val);\n    }\n    return arr;\n};\n```\n### 非递归模式\n\n```js\nvar postorderTraversal = function(root) {\n    if(root === null) return []\n\n    var stack = [root];\n    var ans = [];\n    while(stack.length) {\n        var node = stack.pop();\n        ans.unshift(node.val);\n        node.left && stack.push(node.left);\n        node.right && stack.push(node.right);\n    }\n    return ans;\n};\n```\n## 层次遍历\n```js\nvar levelOrder = function(root) {\n    if(!root) {\n        return [];\n    }\n    let queue = [root];\n    let ans = [];\n    let level = 0;\n    while(queue.length) {\n        ans[level] = [];\n        let queueLen = queue.length;\n        while(queueLen) {\n            let p = queue.shift();\n            ans[level].push(p.val);\n            p.left && queue.push(p.left);\n            p.right && queue.push(p.right);\n            queueLen--;\n        }\n        level++\n    }\n    return ans\n};\n```\n参考链接：https://app.yinxiang.com/fx/d65415ec-c007-40d6-ab49-3bb918313d93\n脚本运行链接：https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/2/traverse-a-tree/2/\n","slug":"二叉树遍历","published":1,"date":"2019-12-19T15:52:56.152Z","updated":"2019-12-19T15:52:56.152Z","_id":"ck4cwgnis002rckukb38mkuks","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><h3 id=\"递归方式：\"><a href=\"#递归方式：\" class=\"headerlink\" title=\"递归方式：\"></a>递归方式：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> preorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root) &#123;</span><br><span class=\"line\">        ans.push(root.val);</span><br><span class=\"line\">        ans = ans.concat(preorderTraversal(root.left));</span><br><span class=\"line\">        ans = ans.concat(preorderTraversal(root.right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归方式\"><a href=\"#非递归方式\" class=\"headerlink\" title=\"非递归方式\"></a>非递归方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> preorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [root];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> node = stack.pop();</span><br><span class=\"line\">        ans.push(node.val);</span><br><span class=\"line\">        node.right &amp;&amp; stack.push(node.right);</span><br><span class=\"line\">        node.left &amp;&amp; stack.push(node.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><h3 id=\"递归模式\"><a href=\"#递归模式\" class=\"headerlink\" title=\"递归模式\"></a>递归模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root) &#123;</span><br><span class=\"line\">        arr.push(...inorderTraversal(root.left));</span><br><span class=\"line\">        arr.push(root.val);</span><br><span class=\"line\">        arr.push(...inorderTraversal(root.right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归\"><a href=\"#非递归\" class=\"headerlink\" title=\"非递归\"></a>非递归</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p || stack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p) &#123;</span><br><span class=\"line\">            stack.push(p);</span><br><span class=\"line\">            p = p.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = stack.pop();</span><br><span class=\"line\">        ans.push(p.val);</span><br><span class=\"line\">        p = p.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后续遍历\"><a href=\"#后续遍历\" class=\"headerlink\" title=\"后续遍历\"></a>后续遍历</h2><h3 id=\"递归模式-1\"><a href=\"#递归模式-1\" class=\"headerlink\" title=\"递归模式\"></a>递归模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> postorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root) &#123;</span><br><span class=\"line\">        arr.push(...postorderTraversal(root.left));</span><br><span class=\"line\">        arr.push(...postorderTraversal(root.right));</span><br><span class=\"line\">        arr.push(root.val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归模式\"><a href=\"#非递归模式\" class=\"headerlink\" title=\"非递归模式\"></a>非递归模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> postorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [root];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> node = stack.pop();</span><br><span class=\"line\">        ans.unshift(node.val);</span><br><span class=\"line\">        node.left &amp;&amp; stack.push(node.left);</span><br><span class=\"line\">        node.right &amp;&amp; stack.push(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = [root];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(queue.length) &#123;</span><br><span class=\"line\">        ans[level] = [];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queueLen = queue.length;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(queueLen) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> p = queue.shift();</span><br><span class=\"line\">            ans[level].push(p.val);</span><br><span class=\"line\">            p.left &amp;&amp; queue.push(p.left);</span><br><span class=\"line\">            p.right &amp;&amp; queue.push(p.right);</span><br><span class=\"line\">            queueLen--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        level++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>参考链接：<a href=\"https://app.yinxiang.com/fx/d65415ec-c007-40d6-ab49-3bb918313d93\" target=\"_blank\" rel=\"noopener\">https://app.yinxiang.com/fx/d65415ec-c007-40d6-ab49-3bb918313d93</a><br>脚本运行链接：<a href=\"https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/2/traverse-a-tree/2/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/2/traverse-a-tree/2/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><h3 id=\"递归方式：\"><a href=\"#递归方式：\" class=\"headerlink\" title=\"递归方式：\"></a>递归方式：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> preorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root) &#123;</span><br><span class=\"line\">        ans.push(root.val);</span><br><span class=\"line\">        ans = ans.concat(preorderTraversal(root.left));</span><br><span class=\"line\">        ans = ans.concat(preorderTraversal(root.right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归方式\"><a href=\"#非递归方式\" class=\"headerlink\" title=\"非递归方式\"></a>非递归方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> preorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [root];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> node = stack.pop();</span><br><span class=\"line\">        ans.push(node.val);</span><br><span class=\"line\">        node.right &amp;&amp; stack.push(node.right);</span><br><span class=\"line\">        node.left &amp;&amp; stack.push(node.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h2><h3 id=\"递归模式\"><a href=\"#递归模式\" class=\"headerlink\" title=\"递归模式\"></a>递归模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root) &#123;</span><br><span class=\"line\">        arr.push(...inorderTraversal(root.left));</span><br><span class=\"line\">        arr.push(root.val);</span><br><span class=\"line\">        arr.push(...inorderTraversal(root.right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归\"><a href=\"#非递归\" class=\"headerlink\" title=\"非递归\"></a>非递归</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p || stack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p) &#123;</span><br><span class=\"line\">            stack.push(p);</span><br><span class=\"line\">            p = p.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = stack.pop();</span><br><span class=\"line\">        ans.push(p.val);</span><br><span class=\"line\">        p = p.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后续遍历\"><a href=\"#后续遍历\" class=\"headerlink\" title=\"后续遍历\"></a>后续遍历</h2><h3 id=\"递归模式-1\"><a href=\"#递归模式-1\" class=\"headerlink\" title=\"递归模式\"></a>递归模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> postorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root) &#123;</span><br><span class=\"line\">        arr.push(...postorderTraversal(root.left));</span><br><span class=\"line\">        arr.push(...postorderTraversal(root.right));</span><br><span class=\"line\">        arr.push(root.val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归模式\"><a href=\"#非递归模式\" class=\"headerlink\" title=\"非递归模式\"></a>非递归模式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> postorderTraversal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = [root];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> node = stack.pop();</span><br><span class=\"line\">        ans.unshift(node.val);</span><br><span class=\"line\">        node.left &amp;&amp; stack.push(node.left);</span><br><span class=\"line\">        node.right &amp;&amp; stack.push(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queue = [root];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(queue.length) &#123;</span><br><span class=\"line\">        ans[level] = [];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> queueLen = queue.length;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(queueLen) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> p = queue.shift();</span><br><span class=\"line\">            ans[level].push(p.val);</span><br><span class=\"line\">            p.left &amp;&amp; queue.push(p.left);</span><br><span class=\"line\">            p.right &amp;&amp; queue.push(p.right);</span><br><span class=\"line\">            queueLen--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        level++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>参考链接：<a href=\"https://app.yinxiang.com/fx/d65415ec-c007-40d6-ab49-3bb918313d93\" target=\"_blank\" rel=\"noopener\">https://app.yinxiang.com/fx/d65415ec-c007-40d6-ab49-3bb918313d93</a><br>脚本运行链接：<a href=\"https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/2/traverse-a-tree/2/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/2/traverse-a-tree/2/</a></p>"},{"title":"从源码看redux中间件","toc":true,"_content":"\n# redux 中间件\n###  1.什么是中间件\n普通使用同步功能时，action的改变会立即触发reducer处理状态，而中间件redux的本质的目的是提供第三方插件的模式，自定义拦截 action -> reducer 的过程。变为 action -> middlewares -> reducer 。这种机制可以让我们改变数据流，实现如异步 action ，action 过滤，日志输出，异常报告等功能。\n#### 1.1 为什么要用中间件\n原生的redux中的Store.dispatch，它是不支持异步的，且功能是单一的。举个例子，当我们调用了后端的API，然后取得返回值，此时我想拿disapatch来执行action。保存dispatch的上下文没有了。怎么办，没法dispatch了? 可以用闭包啊，闭包可以保存dispatch的引用，存在内存不被释放，这样回来不就调用dispatch了吗。-- 此处膜拜中间件设计者\n\n**中间件机制的本质就是一个闭包，通过闭包将原生dispatch保存在内存,并通过每层中间件封装新的dispatch。applyMiddleware方法的主要任务就是通过一系列的中间件改造原生dispatch为满足特定需求的dispatch。**\n\n我和我的小伙伴在我们的开源库，实现了redux的mini版，有兴趣欢迎浏览。链接：https://github.com/ThinkBucket/redux-mini\n\n### 2.理解中间件预备知识\nRedux 提供了一个叫 applyMiddleware() 的方法，可以应用多个中间件，要想理解applyMiddleware，首要理解compose()的用法，而要想看懂compose()函数，首先要理解arr.reduceRight()方法\n\n#### 2.1 arr.reduceRight()：\nreduceRight对数组的迭代方向是从右向左的迭代\n\n```js\nlet funcs = [f,g,h]\nfuncs.reduceRight((a, b) => b(a), args);\n```\n对于数组中的每个元素，多对一迭代。最后返回 f(g(h(args))\n\n#### 2.2 compose源码\n\n```js\nfunction compose(funcs) {\n\treturn args => funcs.reduceRight((composed,f) => f(compose), args)\n}\n```\n compose([f, g, h])(store.dispatch) 结果 f(g(h(store.dispatch)))\n f,g,h代表了三个中间件\n \n\n---\n### 3.applyMiddleware源码：\n\n```js\nimport compose from './compose'\n\nexport default function applyMiddleware(...middlewares) {\n  return (createStore) => (reducer, preloadedState, enhancer) => {\n    var store = createStore(reducer, preloadedState, enhancer)\n    var dispatch = store.dispatch\n    var chain = []\n\n    var middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    }\n    \n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n看一眼，一脸懵逼，有没有……\n\n![image]( https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/d52a2834349b033ba6049a7710ce36d3d439bd8b.jpg)\n\n要想看懂这一堆箭头函数，还需要看一下createStore()的源码，createStore在项目中的用法：\n\n`store = createStore(reducer,initialState,enhancer)`\n\n> createStore源码：\n\n```js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n .......\n}\n```\n其中enhanser是applyMiddleware(middlewares)函数，`store = createStore(reducer,initialState,enhancer)`执行完等价于`return enhancer(createStore)(reducer, preloadedState)`等价于\n`applyMiddleware(middlewares)(createStore)(reducer, preloadedState)`\n\n带着这条结果回头再看applyMiddleware源码：\n`store = createStore(reducer,initialState,enhancer)`相当于为applyMiddleware传递了所有它执行所需要的所有参数\napplyMiddleware(middlewares)执行后，传人(createStore)(reducer, preloadedState)；\n```js\n（(createStore) => (reducer, preloadedState, enhancer) => {\n    var store = createStore(reducer, preloadedState, enhancer)\n    var dispatch = store.dispatch\n    var chain = []\n\n    var middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    }\n    \n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }）(createStore)(reducer, preloadedState)\n\n```\n项目中定义执行完store = createStore(reducer, preloadedState, enhancer)，然后将store绑定在Provider组件上。\n\n> 上面的代码执行到第二行 var store = createStore(reducer, preloadedState, enhancer)\n此时enhance为undefined，此时返回的是一个没有绑定任何中间件的store，也就是最开始原生的store。\n\n- 需要注意的地方\n\n```js\n    var middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    }\n    \n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n```\n这块代码看了很多遍才理解，这块还是有点意思的。为啥单独封装了一个middlewareAPI，dispatch定义是一个function，而不是直接传store给middleware？\n\n主要是为了保证各个中间件共享dispatch。如果写成dispatch: store.dispatch那么各层拿到的dispatch都将和内层原生dispatch相同，无法动态的更新。\n\n`dispatch = compose(...chain)(store.dispatch)`此处的store依旧是原生store，拿到的store.dispatch也是原生的dispatch;\n\n#### 3.1 中间件的庐山真面目\n中间件使用了函数式编程中函数柯理化的功能，每个中间件中的每步返回都是一个接受单参的函数。\nredux-thunk :\n```js\nconst thunk = store => next => action => \ntypeof action === 'function' ? action(store.dispatch, store.getState) : next(action);\n```\n> redux-thunk在action为function的时候可以执行 function async(dispatch,getState) => {fetch....};当不是函数的时候调用next(action)。假如系统只用了Thunk中间件。那么next(action)就是dispatch同步action，action是对象。\n\n\n```js\nconst logger = store => next => action => {\n  console.log('Middleware1: logger', store.getState())\n  console.log('Middleware1: logger action:', action)\n  console.log('m1-next', next)\n  next(action)\n}\n```\n\n- store: applyMiddleware中的middlewareAPI就是等价这里的store,`chain = middlewares.map(middleware => middleware(middlewareAPI))`,就是剥离最外层的函数。\n\n- next: next是内层已经封装好的dispatch,如果是洋葱图里最里面的一层，那么next就是原生的dipatch\n![20190801154435.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190801154435.png)\n\n- action: action是我们dispatch的action\n\n上面的洋葱图大致说明了，中间件层层嵌套，最外层调用store.dispatch(action)，通过调用next()一层层的往里剥洋葱，直到原生的dipatch，然后调用action，此时再从里到外回溯。\n\n#### 3.2 让流程更易懂点\n- 首先要明确creatStore的功能，然后再明确applyMiddleware的功能，再就是理解中间件函数结构，这就齐活了。\n- creatStore的功能有两个，一个是生成原生的store，将middlewareAPI传给所有的中间件。二是执行enhancer()将中间件封装，生成封装后dispatch的store。\n- applyMiddleware的功能利用闭包让所有中间件共享middlewareAPI。在中间件未执行完store会一直保存在内存，最终封装原生dispatch为新的dispatch \n- 中间件函数如 3.1所讲\n\n#### 是不是还是有点蒙\n![image](http://img.tukexw.com/img/c5ea0ded2055636f.jpg)\n\n下面将再细化一下：\n### 4.中间件的执行过程\n通过上面的 applyMiddleware 和 中间件的结构，假设应用了如下的中间件: [A, B, C]，一个 action 的完整执行流程\n\n#### 4.1 初始化阶段\n\n一个中间件(ES5)的结构为:\n\n```js\nfunction ({getState，dispatch}) {\n    return function (next) {\n        return function (action) {...}\n    }\n}\n```\n初始化阶段一：middlewares map 为新的 middlewares\n\n> chain = middlewares.map(middleware => middleware(middlewareAPI))\n\n执行过后，middleware 变为了\n\n```js\nfunction (next) {\n    return function (action) {...}\n}\n```\n> 初始化阶段二：compose 新的 dispatch\n\n\n```js\nconst newDispatch = compose(newMiddlewares)(store.dispatch)\n```\n\n#### 4.2 compose 流程\n假设中间件[A,B,C]\n\n第一次执行\n\ncomposedC = C(store.dispatch) = function C(action) {}\n\n> next 闭包： store.dispatch\n\n第二次执行：\n\n composedBC = B(composedC) = function B(action){}\n> \n> next 闭包 composedC\n\n第三次执行：\n\ncomposedABC = A(composedBC) = function A(action){}\n> next 闭包 composedBC\n> \n> 最后的返回结果为 composedABC\n\n执行到此生成新的dispatch函数，封装好的dispatch(action)就等价与composeABC(action)\n#### 执行阶段\ncompose后的函数结构大约是A(B(C(dispatch.store))\n> dispatch(action) 等于 composedABC(action) =>  等于执行 function A(action) {...}\n> \n> 在函数 A 中执行 next(action), 此时 A 中 next 为 composedBC，那么等于执行 composedBC(action) 等于执行function B(action){...}\n> \n> 在函数 B 中执行 next(action), 此时 B 中 next 为 composedC，那么等于执行 composedC(action) 等于执行function C(action){...}\n> \n> 在函数 C 中执行 next(action), 此时 C 中 next 为 store.dispatch 即 store 原生的 dispatch, 等于执行store.dispatch(action)\n> \n> store.dispatch 会执行 reducer 生成最新的 store 数据\n> \n> 所有的 next 执行完过后开始回溯\n> \n> 将C中的执行结果返还给B\n> \n>  将B中的执行结果返还给A\n> \n> 将A中的执行结果返还给最外层\n> \n> 整个执行 action 的过程为 A -> B -> C -> dispatch -> C -> B -> A\n\n\n\n\n\n","source":"_posts/从源码看redux中间件.md","raw":"---\ntitle: 从源码看redux中间件\ntags: \n- React\ntoc: true\n---\n\n# redux 中间件\n###  1.什么是中间件\n普通使用同步功能时，action的改变会立即触发reducer处理状态，而中间件redux的本质的目的是提供第三方插件的模式，自定义拦截 action -> reducer 的过程。变为 action -> middlewares -> reducer 。这种机制可以让我们改变数据流，实现如异步 action ，action 过滤，日志输出，异常报告等功能。\n#### 1.1 为什么要用中间件\n原生的redux中的Store.dispatch，它是不支持异步的，且功能是单一的。举个例子，当我们调用了后端的API，然后取得返回值，此时我想拿disapatch来执行action。保存dispatch的上下文没有了。怎么办，没法dispatch了? 可以用闭包啊，闭包可以保存dispatch的引用，存在内存不被释放，这样回来不就调用dispatch了吗。-- 此处膜拜中间件设计者\n\n**中间件机制的本质就是一个闭包，通过闭包将原生dispatch保存在内存,并通过每层中间件封装新的dispatch。applyMiddleware方法的主要任务就是通过一系列的中间件改造原生dispatch为满足特定需求的dispatch。**\n\n我和我的小伙伴在我们的开源库，实现了redux的mini版，有兴趣欢迎浏览。链接：https://github.com/ThinkBucket/redux-mini\n\n### 2.理解中间件预备知识\nRedux 提供了一个叫 applyMiddleware() 的方法，可以应用多个中间件，要想理解applyMiddleware，首要理解compose()的用法，而要想看懂compose()函数，首先要理解arr.reduceRight()方法\n\n#### 2.1 arr.reduceRight()：\nreduceRight对数组的迭代方向是从右向左的迭代\n\n```js\nlet funcs = [f,g,h]\nfuncs.reduceRight((a, b) => b(a), args);\n```\n对于数组中的每个元素，多对一迭代。最后返回 f(g(h(args))\n\n#### 2.2 compose源码\n\n```js\nfunction compose(funcs) {\n\treturn args => funcs.reduceRight((composed,f) => f(compose), args)\n}\n```\n compose([f, g, h])(store.dispatch) 结果 f(g(h(store.dispatch)))\n f,g,h代表了三个中间件\n \n\n---\n### 3.applyMiddleware源码：\n\n```js\nimport compose from './compose'\n\nexport default function applyMiddleware(...middlewares) {\n  return (createStore) => (reducer, preloadedState, enhancer) => {\n    var store = createStore(reducer, preloadedState, enhancer)\n    var dispatch = store.dispatch\n    var chain = []\n\n    var middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    }\n    \n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n看一眼，一脸懵逼，有没有……\n\n![image]( https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/d52a2834349b033ba6049a7710ce36d3d439bd8b.jpg)\n\n要想看懂这一堆箭头函数，还需要看一下createStore()的源码，createStore在项目中的用法：\n\n`store = createStore(reducer,initialState,enhancer)`\n\n> createStore源码：\n\n```js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.')\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n .......\n}\n```\n其中enhanser是applyMiddleware(middlewares)函数，`store = createStore(reducer,initialState,enhancer)`执行完等价于`return enhancer(createStore)(reducer, preloadedState)`等价于\n`applyMiddleware(middlewares)(createStore)(reducer, preloadedState)`\n\n带着这条结果回头再看applyMiddleware源码：\n`store = createStore(reducer,initialState,enhancer)`相当于为applyMiddleware传递了所有它执行所需要的所有参数\napplyMiddleware(middlewares)执行后，传人(createStore)(reducer, preloadedState)；\n```js\n（(createStore) => (reducer, preloadedState, enhancer) => {\n    var store = createStore(reducer, preloadedState, enhancer)\n    var dispatch = store.dispatch\n    var chain = []\n\n    var middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    }\n    \n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }）(createStore)(reducer, preloadedState)\n\n```\n项目中定义执行完store = createStore(reducer, preloadedState, enhancer)，然后将store绑定在Provider组件上。\n\n> 上面的代码执行到第二行 var store = createStore(reducer, preloadedState, enhancer)\n此时enhance为undefined，此时返回的是一个没有绑定任何中间件的store，也就是最开始原生的store。\n\n- 需要注意的地方\n\n```js\n    var middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    }\n    \n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n```\n这块代码看了很多遍才理解，这块还是有点意思的。为啥单独封装了一个middlewareAPI，dispatch定义是一个function，而不是直接传store给middleware？\n\n主要是为了保证各个中间件共享dispatch。如果写成dispatch: store.dispatch那么各层拿到的dispatch都将和内层原生dispatch相同，无法动态的更新。\n\n`dispatch = compose(...chain)(store.dispatch)`此处的store依旧是原生store，拿到的store.dispatch也是原生的dispatch;\n\n#### 3.1 中间件的庐山真面目\n中间件使用了函数式编程中函数柯理化的功能，每个中间件中的每步返回都是一个接受单参的函数。\nredux-thunk :\n```js\nconst thunk = store => next => action => \ntypeof action === 'function' ? action(store.dispatch, store.getState) : next(action);\n```\n> redux-thunk在action为function的时候可以执行 function async(dispatch,getState) => {fetch....};当不是函数的时候调用next(action)。假如系统只用了Thunk中间件。那么next(action)就是dispatch同步action，action是对象。\n\n\n```js\nconst logger = store => next => action => {\n  console.log('Middleware1: logger', store.getState())\n  console.log('Middleware1: logger action:', action)\n  console.log('m1-next', next)\n  next(action)\n}\n```\n\n- store: applyMiddleware中的middlewareAPI就是等价这里的store,`chain = middlewares.map(middleware => middleware(middlewareAPI))`,就是剥离最外层的函数。\n\n- next: next是内层已经封装好的dispatch,如果是洋葱图里最里面的一层，那么next就是原生的dipatch\n![20190801154435.png](https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190801154435.png)\n\n- action: action是我们dispatch的action\n\n上面的洋葱图大致说明了，中间件层层嵌套，最外层调用store.dispatch(action)，通过调用next()一层层的往里剥洋葱，直到原生的dipatch，然后调用action，此时再从里到外回溯。\n\n#### 3.2 让流程更易懂点\n- 首先要明确creatStore的功能，然后再明确applyMiddleware的功能，再就是理解中间件函数结构，这就齐活了。\n- creatStore的功能有两个，一个是生成原生的store，将middlewareAPI传给所有的中间件。二是执行enhancer()将中间件封装，生成封装后dispatch的store。\n- applyMiddleware的功能利用闭包让所有中间件共享middlewareAPI。在中间件未执行完store会一直保存在内存，最终封装原生dispatch为新的dispatch \n- 中间件函数如 3.1所讲\n\n#### 是不是还是有点蒙\n![image](http://img.tukexw.com/img/c5ea0ded2055636f.jpg)\n\n下面将再细化一下：\n### 4.中间件的执行过程\n通过上面的 applyMiddleware 和 中间件的结构，假设应用了如下的中间件: [A, B, C]，一个 action 的完整执行流程\n\n#### 4.1 初始化阶段\n\n一个中间件(ES5)的结构为:\n\n```js\nfunction ({getState，dispatch}) {\n    return function (next) {\n        return function (action) {...}\n    }\n}\n```\n初始化阶段一：middlewares map 为新的 middlewares\n\n> chain = middlewares.map(middleware => middleware(middlewareAPI))\n\n执行过后，middleware 变为了\n\n```js\nfunction (next) {\n    return function (action) {...}\n}\n```\n> 初始化阶段二：compose 新的 dispatch\n\n\n```js\nconst newDispatch = compose(newMiddlewares)(store.dispatch)\n```\n\n#### 4.2 compose 流程\n假设中间件[A,B,C]\n\n第一次执行\n\ncomposedC = C(store.dispatch) = function C(action) {}\n\n> next 闭包： store.dispatch\n\n第二次执行：\n\n composedBC = B(composedC) = function B(action){}\n> \n> next 闭包 composedC\n\n第三次执行：\n\ncomposedABC = A(composedBC) = function A(action){}\n> next 闭包 composedBC\n> \n> 最后的返回结果为 composedABC\n\n执行到此生成新的dispatch函数，封装好的dispatch(action)就等价与composeABC(action)\n#### 执行阶段\ncompose后的函数结构大约是A(B(C(dispatch.store))\n> dispatch(action) 等于 composedABC(action) =>  等于执行 function A(action) {...}\n> \n> 在函数 A 中执行 next(action), 此时 A 中 next 为 composedBC，那么等于执行 composedBC(action) 等于执行function B(action){...}\n> \n> 在函数 B 中执行 next(action), 此时 B 中 next 为 composedC，那么等于执行 composedC(action) 等于执行function C(action){...}\n> \n> 在函数 C 中执行 next(action), 此时 C 中 next 为 store.dispatch 即 store 原生的 dispatch, 等于执行store.dispatch(action)\n> \n> store.dispatch 会执行 reducer 生成最新的 store 数据\n> \n> 所有的 next 执行完过后开始回溯\n> \n> 将C中的执行结果返还给B\n> \n>  将B中的执行结果返还给A\n> \n> 将A中的执行结果返还给最外层\n> \n> 整个执行 action 的过程为 A -> B -> C -> dispatch -> C -> B -> A\n\n\n\n\n\n","slug":"从源码看redux中间件","published":1,"date":"2019-12-19T15:52:56.153Z","updated":"2019-12-19T15:52:56.153Z","_id":"ck4cwgnit002uckuktl1qr0q5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"redux-中间件\"><a href=\"#redux-中间件\" class=\"headerlink\" title=\"redux 中间件\"></a>redux 中间件</h1><h3 id=\"1-什么是中间件\"><a href=\"#1-什么是中间件\" class=\"headerlink\" title=\"1.什么是中间件\"></a>1.什么是中间件</h3><p>普通使用同步功能时，action的改变会立即触发reducer处理状态，而中间件redux的本质的目的是提供第三方插件的模式，自定义拦截 action -&gt; reducer 的过程。变为 action -&gt; middlewares -&gt; reducer 。这种机制可以让我们改变数据流，实现如异步 action ，action 过滤，日志输出，异常报告等功能。</p>\n<h4 id=\"1-1-为什么要用中间件\"><a href=\"#1-1-为什么要用中间件\" class=\"headerlink\" title=\"1.1 为什么要用中间件\"></a>1.1 为什么要用中间件</h4><p>原生的redux中的Store.dispatch，它是不支持异步的，且功能是单一的。举个例子，当我们调用了后端的API，然后取得返回值，此时我想拿disapatch来执行action。保存dispatch的上下文没有了。怎么办，没法dispatch了? 可以用闭包啊，闭包可以保存dispatch的引用，存在内存不被释放，这样回来不就调用dispatch了吗。– 此处膜拜中间件设计者</p>\n<p><strong>中间件机制的本质就是一个闭包，通过闭包将原生dispatch保存在内存,并通过每层中间件封装新的dispatch。applyMiddleware方法的主要任务就是通过一系列的中间件改造原生dispatch为满足特定需求的dispatch。</strong></p>\n<p>我和我的小伙伴在我们的开源库，实现了redux的mini版，有兴趣欢迎浏览。链接：<a href=\"https://github.com/ThinkBucket/redux-mini\" target=\"_blank\" rel=\"noopener\">https://github.com/ThinkBucket/redux-mini</a></p>\n<h3 id=\"2-理解中间件预备知识\"><a href=\"#2-理解中间件预备知识\" class=\"headerlink\" title=\"2.理解中间件预备知识\"></a>2.理解中间件预备知识</h3><p>Redux 提供了一个叫 applyMiddleware() 的方法，可以应用多个中间件，要想理解applyMiddleware，首要理解compose()的用法，而要想看懂compose()函数，首先要理解arr.reduceRight()方法</p>\n<h4 id=\"2-1-arr-reduceRight-：\"><a href=\"#2-1-arr-reduceRight-：\" class=\"headerlink\" title=\"2.1 arr.reduceRight()：\"></a>2.1 arr.reduceRight()：</h4><p>reduceRight对数组的迭代方向是从右向左的迭代</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> funcs = [f,g,h]</span><br><span class=\"line\">funcs.reduceRight(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b(a), args);</span><br></pre></td></tr></table></figure>\n<p>对于数组中的每个元素，多对一迭代。最后返回 f(g(h(args))</p>\n<h4 id=\"2-2-compose源码\"><a href=\"#2-2-compose源码\" class=\"headerlink\" title=\"2.2 compose源码\"></a>2.2 compose源码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">funcs</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">args</span> =&gt;</span> funcs.reduceRight(<span class=\"function\">(<span class=\"params\">composed,f</span>) =&gt;</span> f(compose), args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> compose([f, g, h])(store.dispatch) 结果 f(g(h(store.dispatch)))<br> f,g,h代表了三个中间件</p>\n<hr>\n<h3 id=\"3-applyMiddleware源码：\"><a href=\"#3-applyMiddleware源码：\" class=\"headerlink\" title=\"3.applyMiddleware源码：\"></a>3.applyMiddleware源码：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> compose <span class=\"keyword\">from</span> <span class=\"string\">'./compose'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">createStore</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">reducer, preloadedState, enhancer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> store = createStore(reducer, preloadedState, enhancer)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dispatch = store.dispatch</span><br><span class=\"line\">    <span class=\"keyword\">var</span> chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> dispatch(action)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一眼，一脸懵逼，有没有……</p>\n<p><img src=\"https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/d52a2834349b033ba6049a7710ce36d3d439bd8b.jpg\" alt=\"image\"></p>\n<p>要想看懂这一堆箭头函数，还需要看一下createStore()的源码，createStore在项目中的用法：</p>\n<p><code>store = createStore(reducer,initialState,enhancer)</code></p>\n<blockquote>\n<p>createStore源码：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中enhanser是applyMiddleware(middlewares)函数，<code>store = createStore(reducer,initialState,enhancer)</code>执行完等价于<code>return enhancer(createStore)(reducer, preloadedState)</code>等价于<br><code>applyMiddleware(middlewares)(createStore)(reducer, preloadedState)</code></p>\n<p>带着这条结果回头再看applyMiddleware源码：<br><code>store = createStore(reducer,initialState,enhancer)</code>相当于为applyMiddleware传递了所有它执行所需要的所有参数<br>applyMiddleware(middlewares)执行后，传人(createStore)(reducer, preloadedState)；<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（(createStore) =&gt; <span class=\"function\">(<span class=\"params\">reducer, preloadedState, enhancer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> store = createStore(reducer, preloadedState, enhancer)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dispatch = store.dispatch</span><br><span class=\"line\">    <span class=\"keyword\">var</span> chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> dispatch(action)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;）(createStore)(reducer, preloadedState)</span><br></pre></td></tr></table></figure></p>\n<p>项目中定义执行完store = createStore(reducer, preloadedState, enhancer)，然后将store绑定在Provider组件上。</p>\n<blockquote>\n<p>上面的代码执行到第二行 var store = createStore(reducer, preloadedState, enhancer)<br>此时enhance为undefined，此时返回的是一个没有绑定任何中间件的store，也就是最开始原生的store。</p>\n</blockquote>\n<ul>\n<li>需要注意的地方</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> middlewareAPI = &#123;</span><br><span class=\"line\">  getState: store.getState,</span><br><span class=\"line\">  dispatch: <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> dispatch(action)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">dispatch = compose(...chain)(store.dispatch)</span><br></pre></td></tr></table></figure>\n<p>这块代码看了很多遍才理解，这块还是有点意思的。为啥单独封装了一个middlewareAPI，dispatch定义是一个function，而不是直接传store给middleware？</p>\n<p>主要是为了保证各个中间件共享dispatch。如果写成dispatch: store.dispatch那么各层拿到的dispatch都将和内层原生dispatch相同，无法动态的更新。</p>\n<p><code>dispatch = compose(...chain)(store.dispatch)</code>此处的store依旧是原生store，拿到的store.dispatch也是原生的dispatch;</p>\n<h4 id=\"3-1-中间件的庐山真面目\"><a href=\"#3-1-中间件的庐山真面目\" class=\"headerlink\" title=\"3.1 中间件的庐山真面目\"></a>3.1 中间件的庐山真面目</h4><p>中间件使用了函数式编程中函数柯理化的功能，每个中间件中的每步返回都是一个接受单参的函数。<br>redux-thunk :<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thunk = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">typeof</span> action === <span class=\"string\">'function'</span> ? action(store.dispatch, store.getState) : next(action);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>redux-thunk在action为function的时候可以执行 function async(dispatch,getState) =&gt; {fetch….};当不是函数的时候调用next(action)。假如系统只用了Thunk中间件。那么next(action)就是dispatch同步action，action是对象。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> logger = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Middleware1: logger'</span>, store.getState())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Middleware1: logger action:'</span>, action)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'m1-next'</span>, next)</span><br><span class=\"line\">  next(action)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>store: applyMiddleware中的middlewareAPI就是等价这里的store,<code>chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</code>,就是剥离最外层的函数。</p>\n</li>\n<li><p>next: next是内层已经封装好的dispatch,如果是洋葱图里最里面的一层，那么next就是原生的dipatch<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190801154435.png\" alt=\"20190801154435.png\"></p>\n</li>\n<li><p>action: action是我们dispatch的action</p>\n</li>\n</ul>\n<p>上面的洋葱图大致说明了，中间件层层嵌套，最外层调用store.dispatch(action)，通过调用next()一层层的往里剥洋葱，直到原生的dipatch，然后调用action，此时再从里到外回溯。</p>\n<h4 id=\"3-2-让流程更易懂点\"><a href=\"#3-2-让流程更易懂点\" class=\"headerlink\" title=\"3.2 让流程更易懂点\"></a>3.2 让流程更易懂点</h4><ul>\n<li>首先要明确creatStore的功能，然后再明确applyMiddleware的功能，再就是理解中间件函数结构，这就齐活了。</li>\n<li>creatStore的功能有两个，一个是生成原生的store，将middlewareAPI传给所有的中间件。二是执行enhancer()将中间件封装，生成封装后dispatch的store。</li>\n<li>applyMiddleware的功能利用闭包让所有中间件共享middlewareAPI。在中间件未执行完store会一直保存在内存，最终封装原生dispatch为新的dispatch </li>\n<li>中间件函数如 3.1所讲</li>\n</ul>\n<h4 id=\"是不是还是有点蒙\"><a href=\"#是不是还是有点蒙\" class=\"headerlink\" title=\"是不是还是有点蒙\"></a>是不是还是有点蒙</h4><p><img src=\"http://img.tukexw.com/img/c5ea0ded2055636f.jpg\" alt=\"image\"></p>\n<p>下面将再细化一下：</p>\n<h3 id=\"4-中间件的执行过程\"><a href=\"#4-中间件的执行过程\" class=\"headerlink\" title=\"4.中间件的执行过程\"></a>4.中间件的执行过程</h3><p>通过上面的 applyMiddleware 和 中间件的结构，假设应用了如下的中间件: [A, B, C]，一个 action 的完整执行流程</p>\n<h4 id=\"4-1-初始化阶段\"><a href=\"#4-1-初始化阶段\" class=\"headerlink\" title=\"4.1 初始化阶段\"></a>4.1 初始化阶段</h4><p>一个中间件(ES5)的结构为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">&#123;getState，dispatch&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">action</span>) </span>&#123;...&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化阶段一：middlewares map 为新的 middlewares</p>\n<blockquote>\n<p>chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</p>\n</blockquote>\n<p>执行过后，middleware 变为了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">action</span>) </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>初始化阶段二：compose 新的 dispatch</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newDispatch = compose(newMiddlewares)(store.dispatch)</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-compose-流程\"><a href=\"#4-2-compose-流程\" class=\"headerlink\" title=\"4.2 compose 流程\"></a>4.2 compose 流程</h4><p>假设中间件[A,B,C]</p>\n<p>第一次执行</p>\n<p>composedC = C(store.dispatch) = function C(action) {}</p>\n<blockquote>\n<p>next 闭包： store.dispatch</p>\n</blockquote>\n<p>第二次执行：</p>\n<p> composedBC = B(composedC) = function B(action){}</p>\n<blockquote>\n<p>next 闭包 composedC</p>\n</blockquote>\n<p>第三次执行：</p>\n<p>composedABC = A(composedBC) = function A(action){}</p>\n<blockquote>\n<p>next 闭包 composedBC</p>\n<p>最后的返回结果为 composedABC</p>\n</blockquote>\n<p>执行到此生成新的dispatch函数，封装好的dispatch(action)就等价与composeABC(action)</p>\n<h4 id=\"执行阶段\"><a href=\"#执行阶段\" class=\"headerlink\" title=\"执行阶段\"></a>执行阶段</h4><p>compose后的函数结构大约是A(B(C(dispatch.store))</p>\n<blockquote>\n<p>dispatch(action) 等于 composedABC(action) =&gt;  等于执行 function A(action) {…}</p>\n<p>在函数 A 中执行 next(action), 此时 A 中 next 为 composedBC，那么等于执行 composedBC(action) 等于执行function B(action){…}</p>\n<p>在函数 B 中执行 next(action), 此时 B 中 next 为 composedC，那么等于执行 composedC(action) 等于执行function C(action){…}</p>\n<p>在函数 C 中执行 next(action), 此时 C 中 next 为 store.dispatch 即 store 原生的 dispatch, 等于执行store.dispatch(action)</p>\n<p>store.dispatch 会执行 reducer 生成最新的 store 数据</p>\n<p>所有的 next 执行完过后开始回溯</p>\n<p>将C中的执行结果返还给B</p>\n<p> 将B中的执行结果返还给A</p>\n<p>将A中的执行结果返还给最外层</p>\n<p>整个执行 action 的过程为 A -&gt; B -&gt; C -&gt; dispatch -&gt; C -&gt; B -&gt; A</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redux-中间件\"><a href=\"#redux-中间件\" class=\"headerlink\" title=\"redux 中间件\"></a>redux 中间件</h1><h3 id=\"1-什么是中间件\"><a href=\"#1-什么是中间件\" class=\"headerlink\" title=\"1.什么是中间件\"></a>1.什么是中间件</h3><p>普通使用同步功能时，action的改变会立即触发reducer处理状态，而中间件redux的本质的目的是提供第三方插件的模式，自定义拦截 action -&gt; reducer 的过程。变为 action -&gt; middlewares -&gt; reducer 。这种机制可以让我们改变数据流，实现如异步 action ，action 过滤，日志输出，异常报告等功能。</p>\n<h4 id=\"1-1-为什么要用中间件\"><a href=\"#1-1-为什么要用中间件\" class=\"headerlink\" title=\"1.1 为什么要用中间件\"></a>1.1 为什么要用中间件</h4><p>原生的redux中的Store.dispatch，它是不支持异步的，且功能是单一的。举个例子，当我们调用了后端的API，然后取得返回值，此时我想拿disapatch来执行action。保存dispatch的上下文没有了。怎么办，没法dispatch了? 可以用闭包啊，闭包可以保存dispatch的引用，存在内存不被释放，这样回来不就调用dispatch了吗。– 此处膜拜中间件设计者</p>\n<p><strong>中间件机制的本质就是一个闭包，通过闭包将原生dispatch保存在内存,并通过每层中间件封装新的dispatch。applyMiddleware方法的主要任务就是通过一系列的中间件改造原生dispatch为满足特定需求的dispatch。</strong></p>\n<p>我和我的小伙伴在我们的开源库，实现了redux的mini版，有兴趣欢迎浏览。链接：<a href=\"https://github.com/ThinkBucket/redux-mini\" target=\"_blank\" rel=\"noopener\">https://github.com/ThinkBucket/redux-mini</a></p>\n<h3 id=\"2-理解中间件预备知识\"><a href=\"#2-理解中间件预备知识\" class=\"headerlink\" title=\"2.理解中间件预备知识\"></a>2.理解中间件预备知识</h3><p>Redux 提供了一个叫 applyMiddleware() 的方法，可以应用多个中间件，要想理解applyMiddleware，首要理解compose()的用法，而要想看懂compose()函数，首先要理解arr.reduceRight()方法</p>\n<h4 id=\"2-1-arr-reduceRight-：\"><a href=\"#2-1-arr-reduceRight-：\" class=\"headerlink\" title=\"2.1 arr.reduceRight()：\"></a>2.1 arr.reduceRight()：</h4><p>reduceRight对数组的迭代方向是从右向左的迭代</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> funcs = [f,g,h]</span><br><span class=\"line\">funcs.reduceRight(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b(a), args);</span><br></pre></td></tr></table></figure>\n<p>对于数组中的每个元素，多对一迭代。最后返回 f(g(h(args))</p>\n<h4 id=\"2-2-compose源码\"><a href=\"#2-2-compose源码\" class=\"headerlink\" title=\"2.2 compose源码\"></a>2.2 compose源码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">funcs</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">args</span> =&gt;</span> funcs.reduceRight(<span class=\"function\">(<span class=\"params\">composed,f</span>) =&gt;</span> f(compose), args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> compose([f, g, h])(store.dispatch) 结果 f(g(h(store.dispatch)))<br> f,g,h代表了三个中间件</p>\n<hr>\n<h3 id=\"3-applyMiddleware源码：\"><a href=\"#3-applyMiddleware源码：\" class=\"headerlink\" title=\"3.applyMiddleware源码：\"></a>3.applyMiddleware源码：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> compose <span class=\"keyword\">from</span> <span class=\"string\">'./compose'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">createStore</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">reducer, preloadedState, enhancer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> store = createStore(reducer, preloadedState, enhancer)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dispatch = store.dispatch</span><br><span class=\"line\">    <span class=\"keyword\">var</span> chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> dispatch(action)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一眼，一脸懵逼，有没有……</p>\n<p><img src=\"https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/d52a2834349b033ba6049a7710ce36d3d439bd8b.jpg\" alt=\"image\"></p>\n<p>要想看懂这一堆箭头函数，还需要看一下createStore()的源码，createStore在项目中的用法：</p>\n<p><code>store = createStore(reducer,initialState,enhancer)</code></p>\n<blockquote>\n<p>createStore源码：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> .......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中enhanser是applyMiddleware(middlewares)函数，<code>store = createStore(reducer,initialState,enhancer)</code>执行完等价于<code>return enhancer(createStore)(reducer, preloadedState)</code>等价于<br><code>applyMiddleware(middlewares)(createStore)(reducer, preloadedState)</code></p>\n<p>带着这条结果回头再看applyMiddleware源码：<br><code>store = createStore(reducer,initialState,enhancer)</code>相当于为applyMiddleware传递了所有它执行所需要的所有参数<br>applyMiddleware(middlewares)执行后，传人(createStore)(reducer, preloadedState)；<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（(createStore) =&gt; <span class=\"function\">(<span class=\"params\">reducer, preloadedState, enhancer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> store = createStore(reducer, preloadedState, enhancer)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dispatch = store.dispatch</span><br><span class=\"line\">    <span class=\"keyword\">var</span> chain = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> dispatch(action)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;）(createStore)(reducer, preloadedState)</span><br></pre></td></tr></table></figure></p>\n<p>项目中定义执行完store = createStore(reducer, preloadedState, enhancer)，然后将store绑定在Provider组件上。</p>\n<blockquote>\n<p>上面的代码执行到第二行 var store = createStore(reducer, preloadedState, enhancer)<br>此时enhance为undefined，此时返回的是一个没有绑定任何中间件的store，也就是最开始原生的store。</p>\n</blockquote>\n<ul>\n<li>需要注意的地方</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> middlewareAPI = &#123;</span><br><span class=\"line\">  getState: store.getState,</span><br><span class=\"line\">  dispatch: <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> dispatch(action)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">dispatch = compose(...chain)(store.dispatch)</span><br></pre></td></tr></table></figure>\n<p>这块代码看了很多遍才理解，这块还是有点意思的。为啥单独封装了一个middlewareAPI，dispatch定义是一个function，而不是直接传store给middleware？</p>\n<p>主要是为了保证各个中间件共享dispatch。如果写成dispatch: store.dispatch那么各层拿到的dispatch都将和内层原生dispatch相同，无法动态的更新。</p>\n<p><code>dispatch = compose(...chain)(store.dispatch)</code>此处的store依旧是原生store，拿到的store.dispatch也是原生的dispatch;</p>\n<h4 id=\"3-1-中间件的庐山真面目\"><a href=\"#3-1-中间件的庐山真面目\" class=\"headerlink\" title=\"3.1 中间件的庐山真面目\"></a>3.1 中间件的庐山真面目</h4><p>中间件使用了函数式编程中函数柯理化的功能，每个中间件中的每步返回都是一个接受单参的函数。<br>redux-thunk :<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thunk = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> </span><br><span class=\"line\"><span class=\"keyword\">typeof</span> action === <span class=\"string\">'function'</span> ? action(store.dispatch, store.getState) : next(action);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>redux-thunk在action为function的时候可以执行 function async(dispatch,getState) =&gt; {fetch….};当不是函数的时候调用next(action)。假如系统只用了Thunk中间件。那么next(action)就是dispatch同步action，action是对象。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> logger = <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Middleware1: logger'</span>, store.getState())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Middleware1: logger action:'</span>, action)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'m1-next'</span>, next)</span><br><span class=\"line\">  next(action)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>store: applyMiddleware中的middlewareAPI就是等价这里的store,<code>chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</code>,就是剥离最外层的函数。</p>\n</li>\n<li><p>next: next是内层已经封装好的dispatch,如果是洋葱图里最里面的一层，那么next就是原生的dipatch<br><img src=\"https://raw.githubusercontent.com/USTC-Han/picMap/master/img/20190801154435.png\" alt=\"20190801154435.png\"></p>\n</li>\n<li><p>action: action是我们dispatch的action</p>\n</li>\n</ul>\n<p>上面的洋葱图大致说明了，中间件层层嵌套，最外层调用store.dispatch(action)，通过调用next()一层层的往里剥洋葱，直到原生的dipatch，然后调用action，此时再从里到外回溯。</p>\n<h4 id=\"3-2-让流程更易懂点\"><a href=\"#3-2-让流程更易懂点\" class=\"headerlink\" title=\"3.2 让流程更易懂点\"></a>3.2 让流程更易懂点</h4><ul>\n<li>首先要明确creatStore的功能，然后再明确applyMiddleware的功能，再就是理解中间件函数结构，这就齐活了。</li>\n<li>creatStore的功能有两个，一个是生成原生的store，将middlewareAPI传给所有的中间件。二是执行enhancer()将中间件封装，生成封装后dispatch的store。</li>\n<li>applyMiddleware的功能利用闭包让所有中间件共享middlewareAPI。在中间件未执行完store会一直保存在内存，最终封装原生dispatch为新的dispatch </li>\n<li>中间件函数如 3.1所讲</li>\n</ul>\n<h4 id=\"是不是还是有点蒙\"><a href=\"#是不是还是有点蒙\" class=\"headerlink\" title=\"是不是还是有点蒙\"></a>是不是还是有点蒙</h4><p><img src=\"http://img.tukexw.com/img/c5ea0ded2055636f.jpg\" alt=\"image\"></p>\n<p>下面将再细化一下：</p>\n<h3 id=\"4-中间件的执行过程\"><a href=\"#4-中间件的执行过程\" class=\"headerlink\" title=\"4.中间件的执行过程\"></a>4.中间件的执行过程</h3><p>通过上面的 applyMiddleware 和 中间件的结构，假设应用了如下的中间件: [A, B, C]，一个 action 的完整执行流程</p>\n<h4 id=\"4-1-初始化阶段\"><a href=\"#4-1-初始化阶段\" class=\"headerlink\" title=\"4.1 初始化阶段\"></a>4.1 初始化阶段</h4><p>一个中间件(ES5)的结构为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">&#123;getState，dispatch&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">action</span>) </span>&#123;...&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化阶段一：middlewares map 为新的 middlewares</p>\n<blockquote>\n<p>chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</p>\n</blockquote>\n<p>执行过后，middleware 变为了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">action</span>) </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>初始化阶段二：compose 新的 dispatch</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newDispatch = compose(newMiddlewares)(store.dispatch)</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-compose-流程\"><a href=\"#4-2-compose-流程\" class=\"headerlink\" title=\"4.2 compose 流程\"></a>4.2 compose 流程</h4><p>假设中间件[A,B,C]</p>\n<p>第一次执行</p>\n<p>composedC = C(store.dispatch) = function C(action) {}</p>\n<blockquote>\n<p>next 闭包： store.dispatch</p>\n</blockquote>\n<p>第二次执行：</p>\n<p> composedBC = B(composedC) = function B(action){}</p>\n<blockquote>\n<p>next 闭包 composedC</p>\n</blockquote>\n<p>第三次执行：</p>\n<p>composedABC = A(composedBC) = function A(action){}</p>\n<blockquote>\n<p>next 闭包 composedBC</p>\n<p>最后的返回结果为 composedABC</p>\n</blockquote>\n<p>执行到此生成新的dispatch函数，封装好的dispatch(action)就等价与composeABC(action)</p>\n<h4 id=\"执行阶段\"><a href=\"#执行阶段\" class=\"headerlink\" title=\"执行阶段\"></a>执行阶段</h4><p>compose后的函数结构大约是A(B(C(dispatch.store))</p>\n<blockquote>\n<p>dispatch(action) 等于 composedABC(action) =&gt;  等于执行 function A(action) {…}</p>\n<p>在函数 A 中执行 next(action), 此时 A 中 next 为 composedBC，那么等于执行 composedBC(action) 等于执行function B(action){…}</p>\n<p>在函数 B 中执行 next(action), 此时 B 中 next 为 composedC，那么等于执行 composedC(action) 等于执行function C(action){…}</p>\n<p>在函数 C 中执行 next(action), 此时 C 中 next 为 store.dispatch 即 store 原生的 dispatch, 等于执行store.dispatch(action)</p>\n<p>store.dispatch 会执行 reducer 生成最新的 store 数据</p>\n<p>所有的 next 执行完过后开始回溯</p>\n<p>将C中的执行结果返还给B</p>\n<p> 将B中的执行结果返还给A</p>\n<p>将A中的执行结果返还给最外层</p>\n<p>整个执行 action 的过程为 A -&gt; B -&gt; C -&gt; dispatch -&gt; C -&gt; B -&gt; A</p>\n</blockquote>\n"},{"title":"传递函数给参数","toc":true,"_content":"传递函数给组件\n---\n### 一、如何绑定一个函数到一个组件实例？<br>\n  1.在构造函数中绑定:\n```\nclass Foo extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this,'Click happened');\n  }\n  handleClick(v) {\n    console.log(v);\n  }\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n```\n<!--more-->\n\n2.类属性（第三阶段提案）(无参数)\n```\nclass Foo extends Component {\n  // Note: this syntax is experimental and not standardized yet.\n  handleClick = () => {\n    console.log('Click happened');\n  }\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n```\n3.在Render中用bind绑定\n```\nclass Foo extends Component {\n  handleClick(v) {\n    console.log(v);\n  }\n  render() {\n    return <button onClick={this.handleClick.bind(this,'Click happened')}>Click Me</button>;\n  }\n}\n```\n4.在Render中的箭头函数\n```\nclass Foo extends Component {\n  handleClick(v) {\n    console.log(v);\n  }\n  render() {\n    return <button onClick={() => this.handleClick('Click happened')}>Click Me</button>;\n  }\n}\n\n```\n### 二、注意事项：\n1.为什么我的函数每次组件渲染时都会被调用?\n\n<font color=red>**错误写法:**</font>\n```\nrender() {\n  // Wrong: handleClick is called instead of passed as a reference!\n  return <button onClick={this.handleClick()}>Click Me</button>\n}\n```\n**正确写法:**\n```\nrender() {\n  // Correct: handleClick is passed as a reference!\n  return <button onClick={this.handleClick}>Click Me</button>\n}\n```\n2、事件参数e:\n事件参数e作为参数传递放在最后：\n```\npreventPop(name, e){    //事件对象e要放在最后\n        e.preventDefault();\n        alert(name);\n}\n\n<button onClick={(e) => this.preventPop(name, e)}>Delete Row</button>\n或\n<button onClick={this.preventPop.bind(this, name)}>Delete Row</button>\n```\n\n","source":"_posts/传递函数给组件.md","raw":"---\ntitle: 传递函数给参数\ntags: \n- React\ntoc: true\n---\n传递函数给组件\n---\n### 一、如何绑定一个函数到一个组件实例？<br>\n  1.在构造函数中绑定:\n```\nclass Foo extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this,'Click happened');\n  }\n  handleClick(v) {\n    console.log(v);\n  }\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n```\n<!--more-->\n\n2.类属性（第三阶段提案）(无参数)\n```\nclass Foo extends Component {\n  // Note: this syntax is experimental and not standardized yet.\n  handleClick = () => {\n    console.log('Click happened');\n  }\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n```\n3.在Render中用bind绑定\n```\nclass Foo extends Component {\n  handleClick(v) {\n    console.log(v);\n  }\n  render() {\n    return <button onClick={this.handleClick.bind(this,'Click happened')}>Click Me</button>;\n  }\n}\n```\n4.在Render中的箭头函数\n```\nclass Foo extends Component {\n  handleClick(v) {\n    console.log(v);\n  }\n  render() {\n    return <button onClick={() => this.handleClick('Click happened')}>Click Me</button>;\n  }\n}\n\n```\n### 二、注意事项：\n1.为什么我的函数每次组件渲染时都会被调用?\n\n<font color=red>**错误写法:**</font>\n```\nrender() {\n  // Wrong: handleClick is called instead of passed as a reference!\n  return <button onClick={this.handleClick()}>Click Me</button>\n}\n```\n**正确写法:**\n```\nrender() {\n  // Correct: handleClick is passed as a reference!\n  return <button onClick={this.handleClick}>Click Me</button>\n}\n```\n2、事件参数e:\n事件参数e作为参数传递放在最后：\n```\npreventPop(name, e){    //事件对象e要放在最后\n        e.preventDefault();\n        alert(name);\n}\n\n<button onClick={(e) => this.preventPop(name, e)}>Delete Row</button>\n或\n<button onClick={this.preventPop.bind(this, name)}>Delete Row</button>\n```\n\n","slug":"传递函数给组件","published":1,"date":"2019-12-19T15:52:56.153Z","updated":"2019-12-19T15:52:56.153Z","_id":"ck4cwgniu002wckuk244b78ei","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"传递函数给组件\"><a href=\"#传递函数给组件\" class=\"headerlink\" title=\"传递函数给组件\"></a>传递函数给组件</h2><h3 id=\"一、如何绑定一个函数到一个组件实例？\"><a href=\"#一、如何绑定一个函数到一个组件实例？\" class=\"headerlink\" title=\"一、如何绑定一个函数到一个组件实例？\"></a>一、如何绑定一个函数到一个组件实例？<br></h3><p>  1.在构造函数中绑定:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.handleClick = this.handleClick.bind(this,&apos;Click happened&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleClick(v) &#123;</span><br><span class=\"line\">    console.log(v);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick&#125;&gt;Click Me&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.类属性（第三阶段提案）(无参数)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo extends Component &#123;</span><br><span class=\"line\">  // Note: this syntax is experimental and not standardized yet.</span><br><span class=\"line\">  handleClick = () =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;Click happened&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick&#125;&gt;Click Me&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.在Render中用bind绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo extends Component &#123;</span><br><span class=\"line\">  handleClick(v) &#123;</span><br><span class=\"line\">    console.log(v);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick.bind(this,&apos;Click happened&apos;)&#125;&gt;Click Me&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.在Render中的箭头函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo extends Component &#123;</span><br><span class=\"line\">  handleClick(v) &#123;</span><br><span class=\"line\">    console.log(v);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;() =&gt; this.handleClick(&apos;Click happened&apos;)&#125;&gt;Click Me&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、注意事项：\"><a href=\"#二、注意事项：\" class=\"headerlink\" title=\"二、注意事项：\"></a>二、注意事项：</h3><p>1.为什么我的函数每次组件渲染时都会被调用?</p>\n<p><font color=\"red\"><strong>错误写法:</strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  // Wrong: handleClick is called instead of passed as a reference!</span><br><span class=\"line\">  return &lt;button onClick=&#123;this.handleClick()&#125;&gt;Click Me&lt;/button&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>正确写法:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  // Correct: handleClick is passed as a reference!</span><br><span class=\"line\">  return &lt;button onClick=&#123;this.handleClick&#125;&gt;Click Me&lt;/button&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、事件参数e:<br>事件参数e作为参数传递放在最后：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preventPop(name, e)&#123;    //事件对象e要放在最后</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        alert(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;button onClick=&#123;(e) =&gt; this.preventPop(name, e)&#125;&gt;Delete Row&lt;/button&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;button onClick=&#123;this.preventPop.bind(this, name)&#125;&gt;Delete Row&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"传递函数给组件\"><a href=\"#传递函数给组件\" class=\"headerlink\" title=\"传递函数给组件\"></a>传递函数给组件</h2><h3 id=\"一、如何绑定一个函数到一个组件实例？\"><a href=\"#一、如何绑定一个函数到一个组件实例？\" class=\"headerlink\" title=\"一、如何绑定一个函数到一个组件实例？\"></a>一、如何绑定一个函数到一个组件实例？<br></h3><p>  1.在构造函数中绑定:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.handleClick = this.handleClick.bind(this,&apos;Click happened&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleClick(v) &#123;</span><br><span class=\"line\">    console.log(v);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick&#125;&gt;Click Me&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>2.类属性（第三阶段提案）(无参数)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo extends Component &#123;</span><br><span class=\"line\">  // Note: this syntax is experimental and not standardized yet.</span><br><span class=\"line\">  handleClick = () =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;Click happened&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick&#125;&gt;Click Me&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.在Render中用bind绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo extends Component &#123;</span><br><span class=\"line\">  handleClick(v) &#123;</span><br><span class=\"line\">    console.log(v);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;this.handleClick.bind(this,&apos;Click happened&apos;)&#125;&gt;Click Me&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.在Render中的箭头函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Foo extends Component &#123;</span><br><span class=\"line\">  handleClick(v) &#123;</span><br><span class=\"line\">    console.log(v);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;button onClick=&#123;() =&gt; this.handleClick(&apos;Click happened&apos;)&#125;&gt;Click Me&lt;/button&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二、注意事项：\"><a href=\"#二、注意事项：\" class=\"headerlink\" title=\"二、注意事项：\"></a>二、注意事项：</h3><p>1.为什么我的函数每次组件渲染时都会被调用?</p>\n<p><font color=\"red\"><strong>错误写法:</strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  // Wrong: handleClick is called instead of passed as a reference!</span><br><span class=\"line\">  return &lt;button onClick=&#123;this.handleClick()&#125;&gt;Click Me&lt;/button&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>正确写法:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  // Correct: handleClick is passed as a reference!</span><br><span class=\"line\">  return &lt;button onClick=&#123;this.handleClick&#125;&gt;Click Me&lt;/button&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、事件参数e:<br>事件参数e作为参数传递放在最后：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preventPop(name, e)&#123;    //事件对象e要放在最后</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">        alert(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;button onClick=&#123;(e) =&gt; this.preventPop(name, e)&#125;&gt;Delete Row&lt;/button&gt;</span><br><span class=\"line\">或</span><br><span class=\"line\">&lt;button onClick=&#123;this.preventPop.bind(this, name)&#125;&gt;Delete Row&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>"},{"title":"函数链式调用","toc":true,"_content":"## 1、题目：\n实现有如下功能的可链式调用的函数：\n```\nadd(1)(2)(3); // 6\nadd(1)(2)(3)(4); // 10\nadd(1)(2)(3)(4)(5); // 15\nvar addTwo = add(2);\naddTwo; // 2\naddTwo + 5; // 7\naddTwo(3); // 5\naddTwo(3)(5); // 10\n```\n## 2、答案：\n```\nfunction add(n) {\n    var sum = 0;\n    sum += n;\n    var func = function(a) {\n        sum += a;\n        return func;\n    }\n    func.valueOf = function() {\n        return sum;\n    }\n    func.toString = function() {\n        return sum;\n    }\n    return func;\n}\n```\n增强版，满足上面的功能，并可以计算多参数的和\n```\nadd(1)(2, 3);   // 6\nadd(1, 2)(3);   // 6\nadd(1, 2, 3);   // 6\n```\n```\nfunction add(){\n\tvar args = [...arguments];\n\tvar func = function(){\n\t\targs.push(...arguments);\n\t\treturn func;\n\t}\n\tfunc.valueOf = function() {\n\t\treturn args.reduce((acc, item)=>acc+item);\n\t}\n\tfunc.toString = function() {\n\t\treturn args.reduce((acc, item)=>acc+item);\n\t}\n\treturn func\n}\n```\n## 3、讲解\n如果一个对象没有valueOf属性，将这个对象和一个数字相加将会被强制转换成字符串类型：\neg:\n```\nvar o = { a: 1 };\nconsole.log( o + 1 );\n//[object Object]1\n```\njs机制将会把对象o转成字符串类型’[object Object]‘,所以结果是字符串加数字转成‘[object Object]1’\n如果我们给它一个valueOf方法,它将返回2\n```\nvar o = { a: 1, valueOf: function() { return this.a } };\nconsole.log( o + 1 );\n// 2\n```\n\n>This can be useful in simulating value-types, which JS does not have, so that we can perform simple arithmetic or logic operations on more complex data structures. That being said, I think it's very rarely used in practice, because it's better to have an explicit method, rather than relying on coercion to convert an object. (For example, we might have an object that is used to calculate a running average. Rather than using valueOf to get the current average, it's far clearer to have a method called getAverage()).\n\n函数在JS中也是对象，为了避免返回的函数转换成字符串，现在给函数添加了一个valueOf方法。这样调用函数最终将返回一个匿名函数，并拥有valueOf方法，可以和数字加减，可以链式调用。\neg:\n```\nvar n1 = add(1); // n1 is a Function, but also has a valueOf property\nvar n2 = n1(2);  // ditto for n2\n\nconsole.log( 0 + n1 ) // => 0 + n1.valueOf() => 0 + 1 => 1\nconsole.log( 0 + n2 ) // => 0 + n2.valueOf() => 0 + (1+2) => 3\n```\n","source":"_posts/函数链式调用.md","raw":"---\ntitle: 函数链式调用\ntoc: true\ntags: \n- JS\n- 链式调用\n---\n## 1、题目：\n实现有如下功能的可链式调用的函数：\n```\nadd(1)(2)(3); // 6\nadd(1)(2)(3)(4); // 10\nadd(1)(2)(3)(4)(5); // 15\nvar addTwo = add(2);\naddTwo; // 2\naddTwo + 5; // 7\naddTwo(3); // 5\naddTwo(3)(5); // 10\n```\n## 2、答案：\n```\nfunction add(n) {\n    var sum = 0;\n    sum += n;\n    var func = function(a) {\n        sum += a;\n        return func;\n    }\n    func.valueOf = function() {\n        return sum;\n    }\n    func.toString = function() {\n        return sum;\n    }\n    return func;\n}\n```\n增强版，满足上面的功能，并可以计算多参数的和\n```\nadd(1)(2, 3);   // 6\nadd(1, 2)(3);   // 6\nadd(1, 2, 3);   // 6\n```\n```\nfunction add(){\n\tvar args = [...arguments];\n\tvar func = function(){\n\t\targs.push(...arguments);\n\t\treturn func;\n\t}\n\tfunc.valueOf = function() {\n\t\treturn args.reduce((acc, item)=>acc+item);\n\t}\n\tfunc.toString = function() {\n\t\treturn args.reduce((acc, item)=>acc+item);\n\t}\n\treturn func\n}\n```\n## 3、讲解\n如果一个对象没有valueOf属性，将这个对象和一个数字相加将会被强制转换成字符串类型：\neg:\n```\nvar o = { a: 1 };\nconsole.log( o + 1 );\n//[object Object]1\n```\njs机制将会把对象o转成字符串类型’[object Object]‘,所以结果是字符串加数字转成‘[object Object]1’\n如果我们给它一个valueOf方法,它将返回2\n```\nvar o = { a: 1, valueOf: function() { return this.a } };\nconsole.log( o + 1 );\n// 2\n```\n\n>This can be useful in simulating value-types, which JS does not have, so that we can perform simple arithmetic or logic operations on more complex data structures. That being said, I think it's very rarely used in practice, because it's better to have an explicit method, rather than relying on coercion to convert an object. (For example, we might have an object that is used to calculate a running average. Rather than using valueOf to get the current average, it's far clearer to have a method called getAverage()).\n\n函数在JS中也是对象，为了避免返回的函数转换成字符串，现在给函数添加了一个valueOf方法。这样调用函数最终将返回一个匿名函数，并拥有valueOf方法，可以和数字加减，可以链式调用。\neg:\n```\nvar n1 = add(1); // n1 is a Function, but also has a valueOf property\nvar n2 = n1(2);  // ditto for n2\n\nconsole.log( 0 + n1 ) // => 0 + n1.valueOf() => 0 + 1 => 1\nconsole.log( 0 + n2 ) // => 0 + n2.valueOf() => 0 + (1+2) => 3\n```\n","slug":"函数链式调用","published":1,"date":"2019-12-19T15:52:56.154Z","updated":"2019-12-19T15:52:56.154Z","_id":"ck4cwgniv002yckuk5qy1dfsd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1、题目：\"><a href=\"#1、题目：\" class=\"headerlink\" title=\"1、题目：\"></a>1、题目：</h2><p>实现有如下功能的可链式调用的函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(1)(2)(3); // 6</span><br><span class=\"line\">add(1)(2)(3)(4); // 10</span><br><span class=\"line\">add(1)(2)(3)(4)(5); // 15</span><br><span class=\"line\">var addTwo = add(2);</span><br><span class=\"line\">addTwo; // 2</span><br><span class=\"line\">addTwo + 5; // 7</span><br><span class=\"line\">addTwo(3); // 5</span><br><span class=\"line\">addTwo(3)(5); // 10</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、答案：\"><a href=\"#2、答案：\" class=\"headerlink\" title=\"2、答案：\"></a>2、答案：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(n) &#123;</span><br><span class=\"line\">    var sum = 0;</span><br><span class=\"line\">    sum += n;</span><br><span class=\"line\">    var func = function(a) &#123;</span><br><span class=\"line\">        sum += a;</span><br><span class=\"line\">        return func;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func.valueOf = function() &#123;</span><br><span class=\"line\">        return sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func.toString = function() &#123;</span><br><span class=\"line\">        return sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return func;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>增强版，满足上面的功能，并可以计算多参数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(1)(2, 3);   // 6</span><br><span class=\"line\">add(1, 2)(3);   // 6</span><br><span class=\"line\">add(1, 2, 3);   // 6</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add()&#123;</span><br><span class=\"line\">\tvar args = [...arguments];</span><br><span class=\"line\">\tvar func = function()&#123;</span><br><span class=\"line\">\t\targs.push(...arguments);</span><br><span class=\"line\">\t\treturn func;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunc.valueOf = function() &#123;</span><br><span class=\"line\">\t\treturn args.reduce((acc, item)=&gt;acc+item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunc.toString = function() &#123;</span><br><span class=\"line\">\t\treturn args.reduce((acc, item)=&gt;acc+item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn func</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、讲解\"><a href=\"#3、讲解\" class=\"headerlink\" title=\"3、讲解\"></a>3、讲解</h2><p>如果一个对象没有valueOf属性，将这个对象和一个数字相加将会被强制转换成字符串类型：<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123; a: 1 &#125;;</span><br><span class=\"line\">console.log( o + 1 );</span><br><span class=\"line\">//[object Object]1</span><br></pre></td></tr></table></figure></p>\n<p>js机制将会把对象o转成字符串类型’[object Object]‘,所以结果是字符串加数字转成‘[object Object]1’<br>如果我们给它一个valueOf方法,它将返回2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123; a: 1, valueOf: function() &#123; return this.a &#125; &#125;;</span><br><span class=\"line\">console.log( o + 1 );</span><br><span class=\"line\">// 2</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>This can be useful in simulating value-types, which JS does not have, so that we can perform simple arithmetic or logic operations on more complex data structures. That being said, I think it’s very rarely used in practice, because it’s better to have an explicit method, rather than relying on coercion to convert an object. (For example, we might have an object that is used to calculate a running average. Rather than using valueOf to get the current average, it’s far clearer to have a method called getAverage()).</p>\n</blockquote>\n<p>函数在JS中也是对象，为了避免返回的函数转换成字符串，现在给函数添加了一个valueOf方法。这样调用函数最终将返回一个匿名函数，并拥有valueOf方法，可以和数字加减，可以链式调用。<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n1 = add(1); // n1 is a Function, but also has a valueOf property</span><br><span class=\"line\">var n2 = n1(2);  // ditto for n2</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( 0 + n1 ) // =&gt; 0 + n1.valueOf() =&gt; 0 + 1 =&gt; 1</span><br><span class=\"line\">console.log( 0 + n2 ) // =&gt; 0 + n2.valueOf() =&gt; 0 + (1+2) =&gt; 3</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、题目：\"><a href=\"#1、题目：\" class=\"headerlink\" title=\"1、题目：\"></a>1、题目：</h2><p>实现有如下功能的可链式调用的函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(1)(2)(3); // 6</span><br><span class=\"line\">add(1)(2)(3)(4); // 10</span><br><span class=\"line\">add(1)(2)(3)(4)(5); // 15</span><br><span class=\"line\">var addTwo = add(2);</span><br><span class=\"line\">addTwo; // 2</span><br><span class=\"line\">addTwo + 5; // 7</span><br><span class=\"line\">addTwo(3); // 5</span><br><span class=\"line\">addTwo(3)(5); // 10</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、答案：\"><a href=\"#2、答案：\" class=\"headerlink\" title=\"2、答案：\"></a>2、答案：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(n) &#123;</span><br><span class=\"line\">    var sum = 0;</span><br><span class=\"line\">    sum += n;</span><br><span class=\"line\">    var func = function(a) &#123;</span><br><span class=\"line\">        sum += a;</span><br><span class=\"line\">        return func;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func.valueOf = function() &#123;</span><br><span class=\"line\">        return sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func.toString = function() &#123;</span><br><span class=\"line\">        return sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return func;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>增强版，满足上面的功能，并可以计算多参数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(1)(2, 3);   // 6</span><br><span class=\"line\">add(1, 2)(3);   // 6</span><br><span class=\"line\">add(1, 2, 3);   // 6</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add()&#123;</span><br><span class=\"line\">\tvar args = [...arguments];</span><br><span class=\"line\">\tvar func = function()&#123;</span><br><span class=\"line\">\t\targs.push(...arguments);</span><br><span class=\"line\">\t\treturn func;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunc.valueOf = function() &#123;</span><br><span class=\"line\">\t\treturn args.reduce((acc, item)=&gt;acc+item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunc.toString = function() &#123;</span><br><span class=\"line\">\t\treturn args.reduce((acc, item)=&gt;acc+item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn func</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、讲解\"><a href=\"#3、讲解\" class=\"headerlink\" title=\"3、讲解\"></a>3、讲解</h2><p>如果一个对象没有valueOf属性，将这个对象和一个数字相加将会被强制转换成字符串类型：<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123; a: 1 &#125;;</span><br><span class=\"line\">console.log( o + 1 );</span><br><span class=\"line\">//[object Object]1</span><br></pre></td></tr></table></figure></p>\n<p>js机制将会把对象o转成字符串类型’[object Object]‘,所以结果是字符串加数字转成‘[object Object]1’<br>如果我们给它一个valueOf方法,它将返回2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123; a: 1, valueOf: function() &#123; return this.a &#125; &#125;;</span><br><span class=\"line\">console.log( o + 1 );</span><br><span class=\"line\">// 2</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>This can be useful in simulating value-types, which JS does not have, so that we can perform simple arithmetic or logic operations on more complex data structures. That being said, I think it’s very rarely used in practice, because it’s better to have an explicit method, rather than relying on coercion to convert an object. (For example, we might have an object that is used to calculate a running average. Rather than using valueOf to get the current average, it’s far clearer to have a method called getAverage()).</p>\n</blockquote>\n<p>函数在JS中也是对象，为了避免返回的函数转换成字符串，现在给函数添加了一个valueOf方法。这样调用函数最终将返回一个匿名函数，并拥有valueOf方法，可以和数字加减，可以链式调用。<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n1 = add(1); // n1 is a Function, but also has a valueOf property</span><br><span class=\"line\">var n2 = n1(2);  // ditto for n2</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( 0 + n1 ) // =&gt; 0 + n1.valueOf() =&gt; 0 + 1 =&gt; 1</span><br><span class=\"line\">console.log( 0 + n2 ) // =&gt; 0 + n2.valueOf() =&gt; 0 + (1+2) =&gt; 3</span><br></pre></td></tr></table></figure></p>\n"},{"title":"如何同步自己fork来的仓库","toc":true,"_content":"如何同步自己fork来的仓库\n===\n### 一、fork来的仓库的痛点：\n\n我们在进行Github协同开发的时候，往往会去fork一个仓库到自己的Github中，过一段时间以后，原仓库可能会有各种提交以及修改，很可惜，Github本身并没有自动进行同步的机制，这个需要我们手动去执行，现在我来演示一下如何进行自己的仓库和原仓库进行Gith同步的操作。\n<!--more-->\n\n### 二、源仓库同步步骤：\n1. 进入项目目录，执行如下命令：查看你的远程仓库的路径。\n```\ngit remote -v\n```\nresult:\n```\norigin\tgit@github.com:USTC-Han/v4-debug-helper.git (fetch)\norigin\tgit@github.com:USTC-Han/v4-debug-helper.git (push)\n```\n2.配置原仓库的路径：\n```\ngit remote add upstream 原仓库SSH\n```\n3.再次查看远程目录的位置：\n```\ngit remote -v\n```\nresult:\n```\norigin\tgit@github.com:USTC-Han/v4-debug-helper.git (fetch)\norigin\tgit@github.com:USTC-Han/v4-debug-helper.git (push)\nupstream  git@github.com:TradeshiftCN/v4-debug-helper.git (fetch)\nupstream  git@github.com:TradeshiftCN/v4-debug-helper.git (push)\n```\n4.抓取原仓库的修改文件：\n```\ngit fetch upstream\n```\n5.在本地master 合并远程的master分支：\n```\ngit merge upstream/master\n```\n6.推到远端仓库\n```\ngit push origin\n```\n<font color = red>注意事项：</font>\n     \n    当自己的分支merge远端的分支可能会生成一条merge信息，\n    而这条信息可能会影响下次向源仓库提PR，\n    可以用 git rebase upstream/master 代替merge\n### 三、fork和clone的区别：\n`fork是生成一份同样的代码到自己的gitHub仓库，然后再将自己的仓库的代码clone到本地，修改后推到自己的仓库，然后提PR到源仓库。这么做的主要原因是自己不是原仓库的授权的贡献者，如果直接push到原仓库会报错。`\n\n`git clone 拷贝远端仓库代码到本地，修改后可以直接推到远端`\n\n### 四、fetch和pull的区别：\n`fetch + merge 的功能与pull的功能等同，当确定拉下来的代码不会有什么问题，直接git pull`\n\ngit fetch的样例：\n```\ngit fetch origin master:tmp\ngit diff tmp \ngit merge tmp\n```\n","source":"_posts/同步fork来的仓库.md","raw":"---\ntitle: 如何同步自己fork来的仓库\ntags: \n- Git\ntoc: true\n---\n如何同步自己fork来的仓库\n===\n### 一、fork来的仓库的痛点：\n\n我们在进行Github协同开发的时候，往往会去fork一个仓库到自己的Github中，过一段时间以后，原仓库可能会有各种提交以及修改，很可惜，Github本身并没有自动进行同步的机制，这个需要我们手动去执行，现在我来演示一下如何进行自己的仓库和原仓库进行Gith同步的操作。\n<!--more-->\n\n### 二、源仓库同步步骤：\n1. 进入项目目录，执行如下命令：查看你的远程仓库的路径。\n```\ngit remote -v\n```\nresult:\n```\norigin\tgit@github.com:USTC-Han/v4-debug-helper.git (fetch)\norigin\tgit@github.com:USTC-Han/v4-debug-helper.git (push)\n```\n2.配置原仓库的路径：\n```\ngit remote add upstream 原仓库SSH\n```\n3.再次查看远程目录的位置：\n```\ngit remote -v\n```\nresult:\n```\norigin\tgit@github.com:USTC-Han/v4-debug-helper.git (fetch)\norigin\tgit@github.com:USTC-Han/v4-debug-helper.git (push)\nupstream  git@github.com:TradeshiftCN/v4-debug-helper.git (fetch)\nupstream  git@github.com:TradeshiftCN/v4-debug-helper.git (push)\n```\n4.抓取原仓库的修改文件：\n```\ngit fetch upstream\n```\n5.在本地master 合并远程的master分支：\n```\ngit merge upstream/master\n```\n6.推到远端仓库\n```\ngit push origin\n```\n<font color = red>注意事项：</font>\n     \n    当自己的分支merge远端的分支可能会生成一条merge信息，\n    而这条信息可能会影响下次向源仓库提PR，\n    可以用 git rebase upstream/master 代替merge\n### 三、fork和clone的区别：\n`fork是生成一份同样的代码到自己的gitHub仓库，然后再将自己的仓库的代码clone到本地，修改后推到自己的仓库，然后提PR到源仓库。这么做的主要原因是自己不是原仓库的授权的贡献者，如果直接push到原仓库会报错。`\n\n`git clone 拷贝远端仓库代码到本地，修改后可以直接推到远端`\n\n### 四、fetch和pull的区别：\n`fetch + merge 的功能与pull的功能等同，当确定拉下来的代码不会有什么问题，直接git pull`\n\ngit fetch的样例：\n```\ngit fetch origin master:tmp\ngit diff tmp \ngit merge tmp\n```\n","slug":"同步fork来的仓库","published":1,"date":"2019-12-19T15:52:56.154Z","updated":"2019-12-19T15:52:56.154Z","_id":"ck4cwgniw0031ckukoz7smft1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"如何同步自己fork来的仓库\"><a href=\"#如何同步自己fork来的仓库\" class=\"headerlink\" title=\"如何同步自己fork来的仓库\"></a>如何同步自己fork来的仓库</h1><h3 id=\"一、fork来的仓库的痛点：\"><a href=\"#一、fork来的仓库的痛点：\" class=\"headerlink\" title=\"一、fork来的仓库的痛点：\"></a>一、fork来的仓库的痛点：</h3><p>我们在进行Github协同开发的时候，往往会去fork一个仓库到自己的Github中，过一段时间以后，原仓库可能会有各种提交以及修改，很可惜，Github本身并没有自动进行同步的机制，这个需要我们手动去执行，现在我来演示一下如何进行自己的仓库和原仓库进行Gith同步的操作。<br><a id=\"more\"></a></p>\n<h3 id=\"二、源仓库同步步骤：\"><a href=\"#二、源仓库同步步骤：\" class=\"headerlink\" title=\"二、源仓库同步步骤：\"></a>二、源仓库同步步骤：</h3><ol>\n<li>进入项目目录，执行如下命令：查看你的远程仓库的路径。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>result:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin\tgit@github.com:USTC-Han/v4-debug-helper.git (fetch)</span><br><span class=\"line\">origin\tgit@github.com:USTC-Han/v4-debug-helper.git (push)</span><br></pre></td></tr></table></figure></p>\n<p>2.配置原仓库的路径：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream 原仓库SSH</span><br></pre></td></tr></table></figure></p>\n<p>3.再次查看远程目录的位置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></p>\n<p>result:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin\tgit@github.com:USTC-Han/v4-debug-helper.git (fetch)</span><br><span class=\"line\">origin\tgit@github.com:USTC-Han/v4-debug-helper.git (push)</span><br><span class=\"line\">upstream  git@github.com:TradeshiftCN/v4-debug-helper.git (fetch)</span><br><span class=\"line\">upstream  git@github.com:TradeshiftCN/v4-debug-helper.git (push)</span><br></pre></td></tr></table></figure></p>\n<p>4.抓取原仓库的修改文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch upstream</span><br></pre></td></tr></table></figure></p>\n<p>5.在本地master 合并远程的master分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge upstream/master</span><br></pre></td></tr></table></figure></p>\n<p>6.推到远端仓库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">注意事项：</font>\n\n<pre><code>当自己的分支merge远端的分支可能会生成一条merge信息，\n而这条信息可能会影响下次向源仓库提PR，\n可以用 git rebase upstream/master 代替merge\n</code></pre><h3 id=\"三、fork和clone的区别：\"><a href=\"#三、fork和clone的区别：\" class=\"headerlink\" title=\"三、fork和clone的区别：\"></a>三、fork和clone的区别：</h3><p><code>fork是生成一份同样的代码到自己的gitHub仓库，然后再将自己的仓库的代码clone到本地，修改后推到自己的仓库，然后提PR到源仓库。这么做的主要原因是自己不是原仓库的授权的贡献者，如果直接push到原仓库会报错。</code></p>\n<p><code>git clone 拷贝远端仓库代码到本地，修改后可以直接推到远端</code></p>\n<h3 id=\"四、fetch和pull的区别：\"><a href=\"#四、fetch和pull的区别：\" class=\"headerlink\" title=\"四、fetch和pull的区别：\"></a>四、fetch和pull的区别：</h3><p><code>fetch + merge 的功能与pull的功能等同，当确定拉下来的代码不会有什么问题，直接git pull</code></p>\n<p>git fetch的样例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master:tmp</span><br><span class=\"line\">git diff tmp </span><br><span class=\"line\">git merge tmp</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"如何同步自己fork来的仓库\"><a href=\"#如何同步自己fork来的仓库\" class=\"headerlink\" title=\"如何同步自己fork来的仓库\"></a>如何同步自己fork来的仓库</h1><h3 id=\"一、fork来的仓库的痛点：\"><a href=\"#一、fork来的仓库的痛点：\" class=\"headerlink\" title=\"一、fork来的仓库的痛点：\"></a>一、fork来的仓库的痛点：</h3><p>我们在进行Github协同开发的时候，往往会去fork一个仓库到自己的Github中，过一段时间以后，原仓库可能会有各种提交以及修改，很可惜，Github本身并没有自动进行同步的机制，这个需要我们手动去执行，现在我来演示一下如何进行自己的仓库和原仓库进行Gith同步的操作。<br>","more":"</p>\n<h3 id=\"二、源仓库同步步骤：\"><a href=\"#二、源仓库同步步骤：\" class=\"headerlink\" title=\"二、源仓库同步步骤：\"></a>二、源仓库同步步骤：</h3><ol>\n<li>进入项目目录，执行如下命令：查看你的远程仓库的路径。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>result:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin\tgit@github.com:USTC-Han/v4-debug-helper.git (fetch)</span><br><span class=\"line\">origin\tgit@github.com:USTC-Han/v4-debug-helper.git (push)</span><br></pre></td></tr></table></figure></p>\n<p>2.配置原仓库的路径：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream 原仓库SSH</span><br></pre></td></tr></table></figure></p>\n<p>3.再次查看远程目录的位置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></p>\n<p>result:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin\tgit@github.com:USTC-Han/v4-debug-helper.git (fetch)</span><br><span class=\"line\">origin\tgit@github.com:USTC-Han/v4-debug-helper.git (push)</span><br><span class=\"line\">upstream  git@github.com:TradeshiftCN/v4-debug-helper.git (fetch)</span><br><span class=\"line\">upstream  git@github.com:TradeshiftCN/v4-debug-helper.git (push)</span><br></pre></td></tr></table></figure></p>\n<p>4.抓取原仓库的修改文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch upstream</span><br></pre></td></tr></table></figure></p>\n<p>5.在本地master 合并远程的master分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge upstream/master</span><br></pre></td></tr></table></figure></p>\n<p>6.推到远端仓库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">注意事项：</font>\n\n<pre><code>当自己的分支merge远端的分支可能会生成一条merge信息，\n而这条信息可能会影响下次向源仓库提PR，\n可以用 git rebase upstream/master 代替merge\n</code></pre><h3 id=\"三、fork和clone的区别：\"><a href=\"#三、fork和clone的区别：\" class=\"headerlink\" title=\"三、fork和clone的区别：\"></a>三、fork和clone的区别：</h3><p><code>fork是生成一份同样的代码到自己的gitHub仓库，然后再将自己的仓库的代码clone到本地，修改后推到自己的仓库，然后提PR到源仓库。这么做的主要原因是自己不是原仓库的授权的贡献者，如果直接push到原仓库会报错。</code></p>\n<p><code>git clone 拷贝远端仓库代码到本地，修改后可以直接推到远端</code></p>\n<h3 id=\"四、fetch和pull的区别：\"><a href=\"#四、fetch和pull的区别：\" class=\"headerlink\" title=\"四、fetch和pull的区别：\"></a>四、fetch和pull的区别：</h3><p><code>fetch + merge 的功能与pull的功能等同，当确定拉下来的代码不会有什么问题，直接git pull</code></p>\n<p>git fetch的样例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master:tmp</span><br><span class=\"line\">git diff tmp </span><br><span class=\"line\">git merge tmp</span><br></pre></td></tr></table></figure></p>"},{"title":"垂直margin合并","toc":true,"_content":"BFC中规定垂直方向属于同一个BFC里的元素**垂直方向**边距合并。\n\n**注意:**\n- 父子元素的垂直margin合并需要保证两者没有被非空内容、padding、border 或 clear 分隔开。在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻，会产生合并，否则不会合并。\n- 垂直方向的兄弟元素不受padding、border等的限制，即使含有也会产生合并\n<!--more-->\n如下图所示：\n\n![20191014105734.png](https://robbie-blog.oss-cn-shanghai.aliyuncs.com/img/20191014105734.png)\n[demo链接](https://codepen.io/ustc-han/pen/oNNbRxZ?editors=0100)\n\n### 解决margin合并\n\n1. 对于上下相邻的元素，设置浮动、inline-block、绝对定位属性，它们的margin在垂直方向上不会和其他元素的margin合并。\n\n2. 创建了块级格式化上下文的元素，不和它的子元素发生 margin 合并。\n\n**触发BFC的条件：**\n- html元素\n- float（除了none）\n- overflow（除了visible）\n- display（table-cell/table-caption/inline-block/flex）\n- position（除了static/relative）\n\n**触发BFC并不能保证可以解决margin合并，触发BFC是相邻元素不发生合并的子集**。例如：为上下相邻的元素设置了overflow:hidden，虽然触发了BFC，但是上下元素的上下margin还是会发生折叠\n\n### 举个例子\nhtml代码：\n```\n<div class=\"blue\"></div>\n<div class=\"red-outer\">\n  <div class=\"red-inner\">red inner</div>\n</div>\n```\nCSS代码\n```\n.blue{\n  height: 50px;\n  margin: 10px 0;\n  background: blue;\n}\n\n.red-inner {\n  background: red;\n  margin: 10px 0;\n}\n\n.red-outer {\n  overflow: hidden;\n}\n```\n[DAMO链接](https://codepen.io/ustc-han/pen/ydKeXY)\n\n解决方案：\n由解决方案的第二条，`创建了BFC的元素，不和它的子元素发生 margin 合并`。\n\n通过在外面包裹一层盒子，设置overflow: hidden;为外部盒子新建BFC规范，这样子元素不会同外部盒子合并，而外部盒子是个空元素。就相当于class为blue的盒子与class为red-inner的盒子不会合并。\n","source":"_posts/垂直盒子边距合并.md","raw":"---\ntitle: 垂直margin合并\ntags: \n- CSS\n- margin合并\n- BFC\ntoc: true\n---\nBFC中规定垂直方向属于同一个BFC里的元素**垂直方向**边距合并。\n\n**注意:**\n- 父子元素的垂直margin合并需要保证两者没有被非空内容、padding、border 或 clear 分隔开。在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻，会产生合并，否则不会合并。\n- 垂直方向的兄弟元素不受padding、border等的限制，即使含有也会产生合并\n<!--more-->\n如下图所示：\n\n![20191014105734.png](https://robbie-blog.oss-cn-shanghai.aliyuncs.com/img/20191014105734.png)\n[demo链接](https://codepen.io/ustc-han/pen/oNNbRxZ?editors=0100)\n\n### 解决margin合并\n\n1. 对于上下相邻的元素，设置浮动、inline-block、绝对定位属性，它们的margin在垂直方向上不会和其他元素的margin合并。\n\n2. 创建了块级格式化上下文的元素，不和它的子元素发生 margin 合并。\n\n**触发BFC的条件：**\n- html元素\n- float（除了none）\n- overflow（除了visible）\n- display（table-cell/table-caption/inline-block/flex）\n- position（除了static/relative）\n\n**触发BFC并不能保证可以解决margin合并，触发BFC是相邻元素不发生合并的子集**。例如：为上下相邻的元素设置了overflow:hidden，虽然触发了BFC，但是上下元素的上下margin还是会发生折叠\n\n### 举个例子\nhtml代码：\n```\n<div class=\"blue\"></div>\n<div class=\"red-outer\">\n  <div class=\"red-inner\">red inner</div>\n</div>\n```\nCSS代码\n```\n.blue{\n  height: 50px;\n  margin: 10px 0;\n  background: blue;\n}\n\n.red-inner {\n  background: red;\n  margin: 10px 0;\n}\n\n.red-outer {\n  overflow: hidden;\n}\n```\n[DAMO链接](https://codepen.io/ustc-han/pen/ydKeXY)\n\n解决方案：\n由解决方案的第二条，`创建了BFC的元素，不和它的子元素发生 margin 合并`。\n\n通过在外面包裹一层盒子，设置overflow: hidden;为外部盒子新建BFC规范，这样子元素不会同外部盒子合并，而外部盒子是个空元素。就相当于class为blue的盒子与class为red-inner的盒子不会合并。\n","slug":"垂直盒子边距合并","published":1,"date":"2019-12-19T15:52:56.154Z","updated":"2019-12-19T15:52:56.155Z","_id":"ck4cwgnix0033ckukhkn1op3d","comments":1,"layout":"post","photos":[],"link":"","content":"<p>BFC中规定垂直方向属于同一个BFC里的元素<strong>垂直方向</strong>边距合并。</p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>父子元素的垂直margin合并需要保证两者没有被非空内容、padding、border 或 clear 分隔开。在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻，会产生合并，否则不会合并。</li>\n<li>垂直方向的兄弟元素不受padding、border等的限制，即使含有也会产生合并<a id=\"more\"></a>\n如下图所示：</li>\n</ul>\n<p><img src=\"https://robbie-blog.oss-cn-shanghai.aliyuncs.com/img/20191014105734.png\" alt=\"20191014105734.png\"><br><a href=\"https://codepen.io/ustc-han/pen/oNNbRxZ?editors=0100\" target=\"_blank\" rel=\"noopener\">demo链接</a></p>\n<h3 id=\"解决margin合并\"><a href=\"#解决margin合并\" class=\"headerlink\" title=\"解决margin合并\"></a>解决margin合并</h3><ol>\n<li><p>对于上下相邻的元素，设置浮动、inline-block、绝对定位属性，它们的margin在垂直方向上不会和其他元素的margin合并。</p>\n</li>\n<li><p>创建了块级格式化上下文的元素，不和它的子元素发生 margin 合并。</p>\n</li>\n</ol>\n<p><strong>触发BFC的条件：</strong></p>\n<ul>\n<li>html元素</li>\n<li>float（除了none）</li>\n<li>overflow（除了visible）</li>\n<li>display（table-cell/table-caption/inline-block/flex）</li>\n<li>position（除了static/relative）</li>\n</ul>\n<p><strong>触发BFC并不能保证可以解决margin合并，触发BFC是相邻元素不发生合并的子集</strong>。例如：为上下相邻的元素设置了overflow:hidden，虽然触发了BFC，但是上下元素的上下margin还是会发生折叠</p>\n<h3 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h3><p>html代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;blue&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;red-outer&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;red-inner&quot;&gt;red inner&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.blue&#123;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px 0;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.red-inner &#123;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  margin: 10px 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.red-outer &#123;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/ustc-han/pen/ydKeXY\" target=\"_blank\" rel=\"noopener\">DAMO链接</a></p>\n<p>解决方案：<br>由解决方案的第二条，<code>创建了BFC的元素，不和它的子元素发生 margin 合并</code>。</p>\n<p>通过在外面包裹一层盒子，设置overflow: hidden;为外部盒子新建BFC规范，这样子元素不会同外部盒子合并，而外部盒子是个空元素。就相当于class为blue的盒子与class为red-inner的盒子不会合并。</p>\n","site":{"data":{}},"excerpt":"<p>BFC中规定垂直方向属于同一个BFC里的元素<strong>垂直方向</strong>边距合并。</p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>父子元素的垂直margin合并需要保证两者没有被非空内容、padding、border 或 clear 分隔开。在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻，会产生合并，否则不会合并。</li>\n<li>垂直方向的兄弟元素不受padding、border等的限制，即使含有也会产生合并","more":"如下图所示：</li>\n</ul>\n<p><img src=\"https://robbie-blog.oss-cn-shanghai.aliyuncs.com/img/20191014105734.png\" alt=\"20191014105734.png\"><br><a href=\"https://codepen.io/ustc-han/pen/oNNbRxZ?editors=0100\" target=\"_blank\" rel=\"noopener\">demo链接</a></p>\n<h3 id=\"解决margin合并\"><a href=\"#解决margin合并\" class=\"headerlink\" title=\"解决margin合并\"></a>解决margin合并</h3><ol>\n<li><p>对于上下相邻的元素，设置浮动、inline-block、绝对定位属性，它们的margin在垂直方向上不会和其他元素的margin合并。</p>\n</li>\n<li><p>创建了块级格式化上下文的元素，不和它的子元素发生 margin 合并。</p>\n</li>\n</ol>\n<p><strong>触发BFC的条件：</strong></p>\n<ul>\n<li>html元素</li>\n<li>float（除了none）</li>\n<li>overflow（除了visible）</li>\n<li>display（table-cell/table-caption/inline-block/flex）</li>\n<li>position（除了static/relative）</li>\n</ul>\n<p><strong>触发BFC并不能保证可以解决margin合并，触发BFC是相邻元素不发生合并的子集</strong>。例如：为上下相邻的元素设置了overflow:hidden，虽然触发了BFC，但是上下元素的上下margin还是会发生折叠</p>\n<h3 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h3><p>html代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;blue&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;red-outer&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;red-inner&quot;&gt;red inner&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.blue&#123;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px 0;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.red-inner &#123;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  margin: 10px 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.red-outer &#123;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/ustc-han/pen/ydKeXY\" target=\"_blank\" rel=\"noopener\">DAMO链接</a></p>\n<p>解决方案：<br>由解决方案的第二条，<code>创建了BFC的元素，不和它的子元素发生 margin 合并</code>。</p>\n<p>通过在外面包裹一层盒子，设置overflow: hidden;为外部盒子新建BFC规范，这样子元素不会同外部盒子合并，而外部盒子是个空元素。就相当于class为blue的盒子与class为red-inner的盒子不会合并。</p>"},{"title":"字母Ascall码","toc":true,"_content":"## codeware题\n```\nWrite a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.\n['a','b','c','d','f'] -> 'e'\n['O','Q','R','S'] -> 'P'\n```\n解决方案：\n```\nfunction findMissingLetter(array){\n  const toNumArray = array.map((item)=>item.charCodeAt());\n  for(i=0;i<toNumArray.length-1;i++){\n    if(toNumArray[i+1]-toNumArray[i] > 1){\n       return String.fromCharCode(toNumArray[i]+1);\n    }\n  }\n}\n```\n网友更好的答案：\n```\nfunction findMissingLetter(array)\n{\n   var i=array[0].charCodeAt();\n   array.map(x=>  x.charCodeAt()==i?i++:i);\n   return String.fromCharCode(i);\n}\n```\n### 字母转ASCALL使用charCodeAt()\n```\n'a'.charCodeAt();//97\n```\n### ASCALL转字母使用fromCharCode()\n```\nString.fromCharCode(65)//A\n```","source":"_posts/字母Ascall码.md","raw":"---\ntitle: 字母Ascall码\ntoc: true\ntags: \n- JS\n- ASCALL\n---\n## codeware题\n```\nWrite a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.\n['a','b','c','d','f'] -> 'e'\n['O','Q','R','S'] -> 'P'\n```\n解决方案：\n```\nfunction findMissingLetter(array){\n  const toNumArray = array.map((item)=>item.charCodeAt());\n  for(i=0;i<toNumArray.length-1;i++){\n    if(toNumArray[i+1]-toNumArray[i] > 1){\n       return String.fromCharCode(toNumArray[i]+1);\n    }\n  }\n}\n```\n网友更好的答案：\n```\nfunction findMissingLetter(array)\n{\n   var i=array[0].charCodeAt();\n   array.map(x=>  x.charCodeAt()==i?i++:i);\n   return String.fromCharCode(i);\n}\n```\n### 字母转ASCALL使用charCodeAt()\n```\n'a'.charCodeAt();//97\n```\n### ASCALL转字母使用fromCharCode()\n```\nString.fromCharCode(65)//A\n```","slug":"字母Ascall码","published":1,"date":"2019-12-19T15:52:56.155Z","updated":"2019-12-19T15:52:56.155Z","_id":"ck4cwgniy0036ckukap8224c5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"codeware题\"><a href=\"#codeware题\" class=\"headerlink\" title=\"codeware题\"></a>codeware题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.</span><br><span class=\"line\">[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;f&apos;] -&gt; &apos;e&apos;</span><br><span class=\"line\">[&apos;O&apos;,&apos;Q&apos;,&apos;R&apos;,&apos;S&apos;] -&gt; &apos;P&apos;</span><br></pre></td></tr></table></figure>\n<p>解决方案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function findMissingLetter(array)&#123;</span><br><span class=\"line\">  const toNumArray = array.map((item)=&gt;item.charCodeAt());</span><br><span class=\"line\">  for(i=0;i&lt;toNumArray.length-1;i++)&#123;</span><br><span class=\"line\">    if(toNumArray[i+1]-toNumArray[i] &gt; 1)&#123;</span><br><span class=\"line\">       return String.fromCharCode(toNumArray[i]+1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>网友更好的答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function findMissingLetter(array)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   var i=array[0].charCodeAt();</span><br><span class=\"line\">   array.map(x=&gt;  x.charCodeAt()==i?i++:i);</span><br><span class=\"line\">   return String.fromCharCode(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"字母转ASCALL使用charCodeAt\"><a href=\"#字母转ASCALL使用charCodeAt\" class=\"headerlink\" title=\"字母转ASCALL使用charCodeAt()\"></a>字母转ASCALL使用charCodeAt()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;a&apos;.charCodeAt();//97</span><br></pre></td></tr></table></figure>\n<h3 id=\"ASCALL转字母使用fromCharCode\"><a href=\"#ASCALL转字母使用fromCharCode\" class=\"headerlink\" title=\"ASCALL转字母使用fromCharCode()\"></a>ASCALL转字母使用fromCharCode()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.fromCharCode(65)//A</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"codeware题\"><a href=\"#codeware题\" class=\"headerlink\" title=\"codeware题\"></a>codeware题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.</span><br><span class=\"line\">[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;f&apos;] -&gt; &apos;e&apos;</span><br><span class=\"line\">[&apos;O&apos;,&apos;Q&apos;,&apos;R&apos;,&apos;S&apos;] -&gt; &apos;P&apos;</span><br></pre></td></tr></table></figure>\n<p>解决方案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function findMissingLetter(array)&#123;</span><br><span class=\"line\">  const toNumArray = array.map((item)=&gt;item.charCodeAt());</span><br><span class=\"line\">  for(i=0;i&lt;toNumArray.length-1;i++)&#123;</span><br><span class=\"line\">    if(toNumArray[i+1]-toNumArray[i] &gt; 1)&#123;</span><br><span class=\"line\">       return String.fromCharCode(toNumArray[i]+1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>网友更好的答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function findMissingLetter(array)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   var i=array[0].charCodeAt();</span><br><span class=\"line\">   array.map(x=&gt;  x.charCodeAt()==i?i++:i);</span><br><span class=\"line\">   return String.fromCharCode(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"字母转ASCALL使用charCodeAt\"><a href=\"#字母转ASCALL使用charCodeAt\" class=\"headerlink\" title=\"字母转ASCALL使用charCodeAt()\"></a>字母转ASCALL使用charCodeAt()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;a&apos;.charCodeAt();//97</span><br></pre></td></tr></table></figure>\n<h3 id=\"ASCALL转字母使用fromCharCode\"><a href=\"#ASCALL转字母使用fromCharCode\" class=\"headerlink\" title=\"ASCALL转字母使用fromCharCode()\"></a>ASCALL转字母使用fromCharCode()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.fromCharCode(65)//A</span><br></pre></td></tr></table></figure>"},{"title":"安装nvm管理多node版本","toc":true,"_content":"### 1、安装nvm\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n\n如果Mac使用的zsh，需要将命令中的| bash改为 | zsh\n```\n###### *note：[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)安装可以替换mac的bash,安装后可以安装一个喜欢的主题，界面将非常美观。*\n\n然后在控制台 cd ~/.nvm，观察nvm是否安装完成。\n<!--more-->\n安装完成后可以查看自己的配置文件，是否会添加新的配置项\n\n\n```\nvim ~/.bash_profile\n或\nvim ~/.zshrc\n```\n新增配置项\n\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && . \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n控制台输入下面的语句刷新配置：\n\n```\nsource ~/.bash_profile 或 source ~/.zshrc\n```\n### 2、安装npm \n例如安装node版本为8.xx.xx\n\n```\nnvm install 8\nnvm install 10\n```\n系统会默认安装8或10的最新版本，如果需要特定版本，可以补全次版本号和修订号。\n\n[node版本号讲解链接](https://github.com/USTC-Han/USTC-Han.github.io/blob/master/node/node%E7%89%88%E6%9C%AC%E5%8F%B7.md)\n\n### 3、为不同的本地仓库配置不同的npm版本\n切换到仓库的的根目录：\n\n仓库1:\n```\necho 8 > .nvmrc\n\n```\n仓库2:\n```\necho 10 > .nvmrc\n\n```\n查看是否配置完成：\n```\nvim .nvmrc\n```\n这样不用每次切换仓库都使用 nvm use *nodeNumber*\n\n参考链接1：https://github.com/creationix/nvm\n\n参考链接2: https://cloud.tencent.com/developer/article/1057493\n\n\n\n","source":"_posts/安装nvm总结(MAC).md","raw":"---\ntitle: 安装nvm管理多node版本\ntags: \n- Node\ntoc: true\n---\n### 1、安装nvm\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n\n如果Mac使用的zsh，需要将命令中的| bash改为 | zsh\n```\n###### *note：[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)安装可以替换mac的bash,安装后可以安装一个喜欢的主题，界面将非常美观。*\n\n然后在控制台 cd ~/.nvm，观察nvm是否安装完成。\n<!--more-->\n安装完成后可以查看自己的配置文件，是否会添加新的配置项\n\n\n```\nvim ~/.bash_profile\n或\nvim ~/.zshrc\n```\n新增配置项\n\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && . \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n控制台输入下面的语句刷新配置：\n\n```\nsource ~/.bash_profile 或 source ~/.zshrc\n```\n### 2、安装npm \n例如安装node版本为8.xx.xx\n\n```\nnvm install 8\nnvm install 10\n```\n系统会默认安装8或10的最新版本，如果需要特定版本，可以补全次版本号和修订号。\n\n[node版本号讲解链接](https://github.com/USTC-Han/USTC-Han.github.io/blob/master/node/node%E7%89%88%E6%9C%AC%E5%8F%B7.md)\n\n### 3、为不同的本地仓库配置不同的npm版本\n切换到仓库的的根目录：\n\n仓库1:\n```\necho 8 > .nvmrc\n\n```\n仓库2:\n```\necho 10 > .nvmrc\n\n```\n查看是否配置完成：\n```\nvim .nvmrc\n```\n这样不用每次切换仓库都使用 nvm use *nodeNumber*\n\n参考链接1：https://github.com/creationix/nvm\n\n参考链接2: https://cloud.tencent.com/developer/article/1057493\n\n\n\n","slug":"安装nvm总结(MAC)","published":1,"date":"2019-12-19T15:52:56.155Z","updated":"2019-12-19T15:52:56.155Z","_id":"ck4cwgniy0038ckuk5j2euguz","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1、安装nvm\"><a href=\"#1、安装nvm\" class=\"headerlink\" title=\"1、安装nvm\"></a>1、安装nvm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\">如果Mac使用的zsh，需要将命令中的| bash改为 | zsh</span><br></pre></td></tr></table></figure>\n<h6 id=\"note：oh-my-zsh安装可以替换mac的bash-安装后可以安装一个喜欢的主题，界面将非常美观。\"><a href=\"#note：oh-my-zsh安装可以替换mac的bash-安装后可以安装一个喜欢的主题，界面将非常美观。\" class=\"headerlink\" title=\"note：oh-my-zsh安装可以替换mac的bash,安装后可以安装一个喜欢的主题，界面将非常美观。\"></a><em>note：<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">oh-my-zsh</a>安装可以替换mac的bash,安装后可以安装一个喜欢的主题，界面将非常美观。</em></h6><p>然后在控制台 cd ~/.nvm，观察nvm是否安装完成。<br><a id=\"more\"></a><br>安装完成后可以查看自己的配置文件，是否会添加新的配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">或</span><br><span class=\"line\">vim ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>新增配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; . &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>\n<p>控制台输入下面的语句刷新配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile 或 source ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、安装npm\"><a href=\"#2、安装npm\" class=\"headerlink\" title=\"2、安装npm\"></a>2、安装npm</h3><p>例如安装node版本为8.xx.xx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 8</span><br><span class=\"line\">nvm install 10</span><br></pre></td></tr></table></figure>\n<p>系统会默认安装8或10的最新版本，如果需要特定版本，可以补全次版本号和修订号。</p>\n<p><a href=\"https://github.com/USTC-Han/USTC-Han.github.io/blob/master/node/node%E7%89%88%E6%9C%AC%E5%8F%B7.md\" target=\"_blank\" rel=\"noopener\">node版本号讲解链接</a></p>\n<h3 id=\"3、为不同的本地仓库配置不同的npm版本\"><a href=\"#3、为不同的本地仓库配置不同的npm版本\" class=\"headerlink\" title=\"3、为不同的本地仓库配置不同的npm版本\"></a>3、为不同的本地仓库配置不同的npm版本</h3><p>切换到仓库的的根目录：</p>\n<p>仓库1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 8 &gt; .nvmrc</span><br></pre></td></tr></table></figure></p>\n<p>仓库2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 10 &gt; .nvmrc</span><br></pre></td></tr></table></figure></p>\n<p>查看是否配置完成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .nvmrc</span><br></pre></td></tr></table></figure></p>\n<p>这样不用每次切换仓库都使用 nvm use <em>nodeNumber</em></p>\n<p>参考链接1：<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/creationix/nvm</a></p>\n<p>参考链接2: <a href=\"https://cloud.tencent.com/developer/article/1057493\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/article/1057493</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、安装nvm\"><a href=\"#1、安装nvm\" class=\"headerlink\" title=\"1、安装nvm\"></a>1、安装nvm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\">如果Mac使用的zsh，需要将命令中的| bash改为 | zsh</span><br></pre></td></tr></table></figure>\n<h6 id=\"note：oh-my-zsh安装可以替换mac的bash-安装后可以安装一个喜欢的主题，界面将非常美观。\"><a href=\"#note：oh-my-zsh安装可以替换mac的bash-安装后可以安装一个喜欢的主题，界面将非常美观。\" class=\"headerlink\" title=\"note：oh-my-zsh安装可以替换mac的bash,安装后可以安装一个喜欢的主题，界面将非常美观。\"></a><em>note：<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"noopener\">oh-my-zsh</a>安装可以替换mac的bash,安装后可以安装一个喜欢的主题，界面将非常美观。</em></h6><p>然后在控制台 cd ~/.nvm，观察nvm是否安装完成。<br>","more":"<br>安装完成后可以查看自己的配置文件，是否会添加新的配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">或</span><br><span class=\"line\">vim ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>新增配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class=\"line\">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; . &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>\n<p>控制台输入下面的语句刷新配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile 或 source ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、安装npm\"><a href=\"#2、安装npm\" class=\"headerlink\" title=\"2、安装npm\"></a>2、安装npm</h3><p>例如安装node版本为8.xx.xx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 8</span><br><span class=\"line\">nvm install 10</span><br></pre></td></tr></table></figure>\n<p>系统会默认安装8或10的最新版本，如果需要特定版本，可以补全次版本号和修订号。</p>\n<p><a href=\"https://github.com/USTC-Han/USTC-Han.github.io/blob/master/node/node%E7%89%88%E6%9C%AC%E5%8F%B7.md\" target=\"_blank\" rel=\"noopener\">node版本号讲解链接</a></p>\n<h3 id=\"3、为不同的本地仓库配置不同的npm版本\"><a href=\"#3、为不同的本地仓库配置不同的npm版本\" class=\"headerlink\" title=\"3、为不同的本地仓库配置不同的npm版本\"></a>3、为不同的本地仓库配置不同的npm版本</h3><p>切换到仓库的的根目录：</p>\n<p>仓库1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 8 &gt; .nvmrc</span><br></pre></td></tr></table></figure></p>\n<p>仓库2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 10 &gt; .nvmrc</span><br></pre></td></tr></table></figure></p>\n<p>查看是否配置完成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .nvmrc</span><br></pre></td></tr></table></figure></p>\n<p>这样不用每次切换仓库都使用 nvm use <em>nodeNumber</em></p>\n<p>参考链接1：<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/creationix/nvm</a></p>\n<p>参考链接2: <a href=\"https://cloud.tencent.com/developer/article/1057493\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/article/1057493</a></p>"},{"title":"宏任务和微任务","toc":true,"_content":"# 宏任务和微任务\n进入ES6或Node环境中，JS的任务分为两种，分别是宏任务（macro-task）和微任务（micro-task），在最新的ECMAScript中，微任务称为jobs，宏任务称为task，他们的执行顺序如下:\n\n`宏任务(同步任务) --> 微任务 --> 宏任务(异步任务)`\n## 一、宏任务：\n宏任务按照执行顺序细分为：宏任务同步任务和宏任务异步任务\n\n  1.同步任务：\n\n  同步任务指的是在`JS引擎主线程`上按顺序执行的任务，只有前一个任务执行完毕后，才能执行后一个任务，形成一个执行栈（函数调用栈）。\n  ```js\n  console.log('script start');\n  console.log('script end');\n  ```\n  2.异步任务：\n\n  异步任务指的是不直接进入JS引擎主线程，而是满足触发条件时，相关的线程将该异步任务推进`任务队列(task queue)`，等待JS引擎主线程上的任务执行完毕（函数调用栈为空）时读取执行的任务，例如：\n\n ` 异步Ajax、DOM事件、setTimeout、I/O、UI rendering`\n\n\n## 二、微任务\n微任务（micro-task/job）是在es6和node环境中出现的一个任务类型，常见的微任务API有：Promise.then和async/await\n\n## 三、宏任务和微任务执行顺序汇总\n* 执行宏任务中同步任务，执行结束；\n* 检查任务队列是否有微任务，存在微任务则读取微任务队列，将其推到函数调用栈中形成新的宏任务，如果包含异步任务继续放到任务队列等待执行。\n* 检查是否有宏任务异步任务，最后执行\n\n<!--more-->\n## 三、对比setTimeout、Promise、Async\n>setTimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行；<br>\npromise.then里的回调函数会放到相应宏任务的`微任务队列里`，等宏任务里面的同步代码执行完再执行；<br>\nasync函数表示函数里面可能会有异步方法，await后面跟一个表达式，async方法执行时，遇到await会`立即执行表达式`，然后把表达式后面的代码放到`微任务队列里`，让出执行栈让同步代码先执行。\n\n那个样例来说明：\n```js\nasync function async1(){\n    console.log('async1 start')\n    await async2()\n    console.log('async1 end')\n}\nasync function async2(){\n    console.log('async2')\n}\nconsole.log('script start')\nsetTimeout(function(){\n    console.log('setTimeout')\n},0)  \nasync1();\nnew Promise(function(resolve){\n    console.log('promise1')\n    resolve();\n}).then(function(){\n    console.log('promise2')\n})\nconsole.log('script end')\n\n//执行结果：\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n```\n* 当执行console.log('script start')时，JS主线程将其看作宏任务的同步任务，直接放到函数调用栈中然后弹出。\n* JS引擎主线程执行到setTimeout(function() { console.log('setTimeout'); }, 0);，JS引擎主线程认为setTimeout是异步任务API，则向浏览器内核进程申请开启定时器线程进行计时和控制该setTimeout任务。由于W3C在HTML标准中规定setTimeout低于4ms的时间间隔算为4ms，那么当计时到4ms时，定时器线程就把该回调处理函数推进宏任务队列中等待主线程执行，然后JS引擎主线程继续向下执行。\n* 当执行到async1()，将async1()推到函数调用栈中，执行到console.log('async1 start')，打印async1 start；执行到await,立即执行async2()，将async2()推到函数调用栈中，打印console.log('async2')，执行完毕返回成功的promise给async1(),并将成功的promise放到微任务队列中。\n* 将new Promise(function(resolve){}推向调用栈函数,打印console.log('promise1')，将then后的劫夺推到微任务队列中。\n* 执行同步代码console.log('script end')，将其推向调用栈函数并打印。\n* 此时微任务队列中还有两个异步任务没执行完，将async2()返回的Promise推向函数调用栈，此时await async2()执行完毕，将同步代码放到调用栈，打印console.log('async1 end')\n* 将\bthen()中的函数推向调用栈执行，打印 console.log('promise2')\n* 最后将宏任务异步队列中的setTimeout中的方法推向函数调用栈，打印console.log('setTimeout')。\n\n","source":"_posts/宏任务和微任务.md","raw":"---\ntitle: 宏任务和微任务\ntags: \n- JS\n- 宏任务\n- 微任务\ntoc: true\n---\n# 宏任务和微任务\n进入ES6或Node环境中，JS的任务分为两种，分别是宏任务（macro-task）和微任务（micro-task），在最新的ECMAScript中，微任务称为jobs，宏任务称为task，他们的执行顺序如下:\n\n`宏任务(同步任务) --> 微任务 --> 宏任务(异步任务)`\n## 一、宏任务：\n宏任务按照执行顺序细分为：宏任务同步任务和宏任务异步任务\n\n  1.同步任务：\n\n  同步任务指的是在`JS引擎主线程`上按顺序执行的任务，只有前一个任务执行完毕后，才能执行后一个任务，形成一个执行栈（函数调用栈）。\n  ```js\n  console.log('script start');\n  console.log('script end');\n  ```\n  2.异步任务：\n\n  异步任务指的是不直接进入JS引擎主线程，而是满足触发条件时，相关的线程将该异步任务推进`任务队列(task queue)`，等待JS引擎主线程上的任务执行完毕（函数调用栈为空）时读取执行的任务，例如：\n\n ` 异步Ajax、DOM事件、setTimeout、I/O、UI rendering`\n\n\n## 二、微任务\n微任务（micro-task/job）是在es6和node环境中出现的一个任务类型，常见的微任务API有：Promise.then和async/await\n\n## 三、宏任务和微任务执行顺序汇总\n* 执行宏任务中同步任务，执行结束；\n* 检查任务队列是否有微任务，存在微任务则读取微任务队列，将其推到函数调用栈中形成新的宏任务，如果包含异步任务继续放到任务队列等待执行。\n* 检查是否有宏任务异步任务，最后执行\n\n<!--more-->\n## 三、对比setTimeout、Promise、Async\n>setTimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行；<br>\npromise.then里的回调函数会放到相应宏任务的`微任务队列里`，等宏任务里面的同步代码执行完再执行；<br>\nasync函数表示函数里面可能会有异步方法，await后面跟一个表达式，async方法执行时，遇到await会`立即执行表达式`，然后把表达式后面的代码放到`微任务队列里`，让出执行栈让同步代码先执行。\n\n那个样例来说明：\n```js\nasync function async1(){\n    console.log('async1 start')\n    await async2()\n    console.log('async1 end')\n}\nasync function async2(){\n    console.log('async2')\n}\nconsole.log('script start')\nsetTimeout(function(){\n    console.log('setTimeout')\n},0)  \nasync1();\nnew Promise(function(resolve){\n    console.log('promise1')\n    resolve();\n}).then(function(){\n    console.log('promise2')\n})\nconsole.log('script end')\n\n//执行结果：\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n```\n* 当执行console.log('script start')时，JS主线程将其看作宏任务的同步任务，直接放到函数调用栈中然后弹出。\n* JS引擎主线程执行到setTimeout(function() { console.log('setTimeout'); }, 0);，JS引擎主线程认为setTimeout是异步任务API，则向浏览器内核进程申请开启定时器线程进行计时和控制该setTimeout任务。由于W3C在HTML标准中规定setTimeout低于4ms的时间间隔算为4ms，那么当计时到4ms时，定时器线程就把该回调处理函数推进宏任务队列中等待主线程执行，然后JS引擎主线程继续向下执行。\n* 当执行到async1()，将async1()推到函数调用栈中，执行到console.log('async1 start')，打印async1 start；执行到await,立即执行async2()，将async2()推到函数调用栈中，打印console.log('async2')，执行完毕返回成功的promise给async1(),并将成功的promise放到微任务队列中。\n* 将new Promise(function(resolve){}推向调用栈函数,打印console.log('promise1')，将then后的劫夺推到微任务队列中。\n* 执行同步代码console.log('script end')，将其推向调用栈函数并打印。\n* 此时微任务队列中还有两个异步任务没执行完，将async2()返回的Promise推向函数调用栈，此时await async2()执行完毕，将同步代码放到调用栈，打印console.log('async1 end')\n* 将\bthen()中的函数推向调用栈执行，打印 console.log('promise2')\n* 最后将宏任务异步队列中的setTimeout中的方法推向函数调用栈，打印console.log('setTimeout')。\n\n","slug":"宏任务和微任务","published":1,"date":"2019-12-19T15:52:56.156Z","updated":"2019-12-19T15:52:56.156Z","_id":"ck4cwgniz003bckukon13wzf4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h1><p>进入ES6或Node环境中，JS的任务分为两种，分别是宏任务（macro-task）和微任务（micro-task），在最新的ECMAScript中，微任务称为jobs，宏任务称为task，他们的执行顺序如下:</p>\n<p><code>宏任务(同步任务) --&gt; 微任务 --&gt; 宏任务(异步任务)</code></p>\n<h2 id=\"一、宏任务：\"><a href=\"#一、宏任务：\" class=\"headerlink\" title=\"一、宏任务：\"></a>一、宏任务：</h2><p>宏任务按照执行顺序细分为：宏任务同步任务和宏任务异步任务</p>\n<p>  1.同步任务：</p>\n<p>  同步任务指的是在<code>JS引擎主线程</code>上按顺序执行的任务，只有前一个任务执行完毕后，才能执行后一个任务，形成一个执行栈（函数调用栈）。<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>  2.异步任务：</p>\n<p>  异步任务指的是不直接进入JS引擎主线程，而是满足触发条件时，相关的线程将该异步任务推进<code>任务队列(task queue)</code>，等待JS引擎主线程上的任务执行完毕（函数调用栈为空）时读取执行的任务，例如：</p>\n<p> <code>异步Ajax、DOM事件、setTimeout、I/O、UI rendering</code></p>\n<h2 id=\"二、微任务\"><a href=\"#二、微任务\" class=\"headerlink\" title=\"二、微任务\"></a>二、微任务</h2><p>微任务（micro-task/job）是在es6和node环境中出现的一个任务类型，常见的微任务API有：Promise.then和async/await</p>\n<h2 id=\"三、宏任务和微任务执行顺序汇总\"><a href=\"#三、宏任务和微任务执行顺序汇总\" class=\"headerlink\" title=\"三、宏任务和微任务执行顺序汇总\"></a>三、宏任务和微任务执行顺序汇总</h2><ul>\n<li>执行宏任务中同步任务，执行结束；</li>\n<li>检查任务队列是否有微任务，存在微任务则读取微任务队列，将其推到函数调用栈中形成新的宏任务，如果包含异步任务继续放到任务队列等待执行。</li>\n<li>检查是否有宏任务异步任务，最后执行</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"三、对比setTimeout、Promise、Async\"><a href=\"#三、对比setTimeout、Promise、Async\" class=\"headerlink\" title=\"三、对比setTimeout、Promise、Async\"></a>三、对比setTimeout、Promise、Async</h2><blockquote>\n<p>setTimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行；<br><br>promise.then里的回调函数会放到相应宏任务的<code>微任务队列里</code>，等宏任务里面的同步代码执行完再执行；<br><br>async函数表示函数里面可能会有异步方法，await后面跟一个表达式，async方法执行时，遇到await会<code>立即执行表达式</code>，然后把表达式后面的代码放到<code>微任务队列里</code>，让出执行栈让同步代码先执行。</p>\n</blockquote>\n<p>那个样例来说明：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 start'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> async2()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 end'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'async2'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)  </span><br><span class=\"line\">async1();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果：</span></span><br><span class=\"line\">script start</span><br><span class=\"line\">async1 start</span><br><span class=\"line\">async2</span><br><span class=\"line\">promise1</span><br><span class=\"line\">script end</span><br><span class=\"line\">async1 end</span><br><span class=\"line\">promise2</span><br><span class=\"line\">setTimeout</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>当执行console.log(‘script start’)时，JS主线程将其看作宏任务的同步任务，直接放到函数调用栈中然后弹出。</li>\n<li>JS引擎主线程执行到setTimeout(function() { console.log(‘setTimeout’); }, 0);，JS引擎主线程认为setTimeout是异步任务API，则向浏览器内核进程申请开启定时器线程进行计时和控制该setTimeout任务。由于W3C在HTML标准中规定setTimeout低于4ms的时间间隔算为4ms，那么当计时到4ms时，定时器线程就把该回调处理函数推进宏任务队列中等待主线程执行，然后JS引擎主线程继续向下执行。</li>\n<li>当执行到async1()，将async1()推到函数调用栈中，执行到console.log(‘async1 start’)，打印async1 start；执行到await,立即执行async2()，将async2()推到函数调用栈中，打印console.log(‘async2’)，执行完毕返回成功的promise给async1(),并将成功的promise放到微任务队列中。</li>\n<li>将new Promise(function(resolve){}推向调用栈函数,打印console.log(‘promise1’)，将then后的劫夺推到微任务队列中。</li>\n<li>执行同步代码console.log(‘script end’)，将其推向调用栈函数并打印。</li>\n<li>此时微任务队列中还有两个异步任务没执行完，将async2()返回的Promise推向函数调用栈，此时await async2()执行完毕，将同步代码放到调用栈，打印console.log(‘async1 end’)</li>\n<li>将\bthen()中的函数推向调用栈执行，打印 console.log(‘promise2’)</li>\n<li>最后将宏任务异步队列中的setTimeout中的方法推向函数调用栈，打印console.log(‘setTimeout’)。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h1><p>进入ES6或Node环境中，JS的任务分为两种，分别是宏任务（macro-task）和微任务（micro-task），在最新的ECMAScript中，微任务称为jobs，宏任务称为task，他们的执行顺序如下:</p>\n<p><code>宏任务(同步任务) --&gt; 微任务 --&gt; 宏任务(异步任务)</code></p>\n<h2 id=\"一、宏任务：\"><a href=\"#一、宏任务：\" class=\"headerlink\" title=\"一、宏任务：\"></a>一、宏任务：</h2><p>宏任务按照执行顺序细分为：宏任务同步任务和宏任务异步任务</p>\n<p>  1.同步任务：</p>\n<p>  同步任务指的是在<code>JS引擎主线程</code>上按顺序执行的任务，只有前一个任务执行完毕后，才能执行后一个任务，形成一个执行栈（函数调用栈）。<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>  2.异步任务：</p>\n<p>  异步任务指的是不直接进入JS引擎主线程，而是满足触发条件时，相关的线程将该异步任务推进<code>任务队列(task queue)</code>，等待JS引擎主线程上的任务执行完毕（函数调用栈为空）时读取执行的任务，例如：</p>\n<p> <code>异步Ajax、DOM事件、setTimeout、I/O、UI rendering</code></p>\n<h2 id=\"二、微任务\"><a href=\"#二、微任务\" class=\"headerlink\" title=\"二、微任务\"></a>二、微任务</h2><p>微任务（micro-task/job）是在es6和node环境中出现的一个任务类型，常见的微任务API有：Promise.then和async/await</p>\n<h2 id=\"三、宏任务和微任务执行顺序汇总\"><a href=\"#三、宏任务和微任务执行顺序汇总\" class=\"headerlink\" title=\"三、宏任务和微任务执行顺序汇总\"></a>三、宏任务和微任务执行顺序汇总</h2><ul>\n<li>执行宏任务中同步任务，执行结束；</li>\n<li>检查任务队列是否有微任务，存在微任务则读取微任务队列，将其推到函数调用栈中形成新的宏任务，如果包含异步任务继续放到任务队列等待执行。</li>\n<li>检查是否有宏任务异步任务，最后执行</li>\n</ul>","more":"<h2 id=\"三、对比setTimeout、Promise、Async\"><a href=\"#三、对比setTimeout、Promise、Async\" class=\"headerlink\" title=\"三、对比setTimeout、Promise、Async\"></a>三、对比setTimeout、Promise、Async</h2><blockquote>\n<p>setTimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行；<br><br>promise.then里的回调函数会放到相应宏任务的<code>微任务队列里</code>，等宏任务里面的同步代码执行完再执行；<br><br>async函数表示函数里面可能会有异步方法，await后面跟一个表达式，async方法执行时，遇到await会<code>立即执行表达式</code>，然后把表达式后面的代码放到<code>微任务队列里</code>，让出执行栈让同步代码先执行。</p>\n</blockquote>\n<p>那个样例来说明：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 start'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> async2()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'async1 end'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'async2'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script start'</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)  </span><br><span class=\"line\">async1();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise1'</span>)</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise2'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'script end'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果：</span></span><br><span class=\"line\">script start</span><br><span class=\"line\">async1 start</span><br><span class=\"line\">async2</span><br><span class=\"line\">promise1</span><br><span class=\"line\">script end</span><br><span class=\"line\">async1 end</span><br><span class=\"line\">promise2</span><br><span class=\"line\">setTimeout</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>当执行console.log(‘script start’)时，JS主线程将其看作宏任务的同步任务，直接放到函数调用栈中然后弹出。</li>\n<li>JS引擎主线程执行到setTimeout(function() { console.log(‘setTimeout’); }, 0);，JS引擎主线程认为setTimeout是异步任务API，则向浏览器内核进程申请开启定时器线程进行计时和控制该setTimeout任务。由于W3C在HTML标准中规定setTimeout低于4ms的时间间隔算为4ms，那么当计时到4ms时，定时器线程就把该回调处理函数推进宏任务队列中等待主线程执行，然后JS引擎主线程继续向下执行。</li>\n<li>当执行到async1()，将async1()推到函数调用栈中，执行到console.log(‘async1 start’)，打印async1 start；执行到await,立即执行async2()，将async2()推到函数调用栈中，打印console.log(‘async2’)，执行完毕返回成功的promise给async1(),并将成功的promise放到微任务队列中。</li>\n<li>将new Promise(function(resolve){}推向调用栈函数,打印console.log(‘promise1’)，将then后的劫夺推到微任务队列中。</li>\n<li>执行同步代码console.log(‘script end’)，将其推向调用栈函数并打印。</li>\n<li>此时微任务队列中还有两个异步任务没执行完，将async2()返回的Promise推向函数调用栈，此时await async2()执行完毕，将同步代码放到调用栈，打印console.log(‘async1 end’)</li>\n<li>将\bthen()中的函数推向调用栈执行，打印 console.log(‘promise2’)</li>\n<li>最后将宏任务异步队列中的setTimeout中的方法推向函数调用栈，打印console.log(‘setTimeout’)。</li>\n</ul>"},{"title":"开发中遇到的问题","_content":"1、框架样式是写在元素上的内联样式，导致做修改难于覆盖\n\n2、对象多层嵌套中间一层为空的时候报错\n\neg：当这个部分被多次调用，而数组没有值的时候，这个时候会报错，采用lodash处理错误情况：\n```\nprops.line.collabration.array.length === 0\n _.get(props, 'line.collabration.array', []).length\n```\n\n3、promise的吞噬异常，当promise中出错后，很难判断它出错的位置。\n\n4、公司中的less单位由标准的11px导致页面写死的宽高失调\n\n5、前端的filter数据和query数据使用key标记缓存在后端，调试过程导致key被污染，页面数据无法加载。\n\n6、ES-2015-loose模式的情况下，set转数组报错; [地址](https://ustc-han.github.io/2019/05/08/Bable%E7%9A%84loose%E6%A8%A1%E5%BC%8F/)\n","source":"_posts/开发中遇到的问题.md","raw":"---\ntitle: 开发中遇到的问题\ntags: \n- 工具\n---\n1、框架样式是写在元素上的内联样式，导致做修改难于覆盖\n\n2、对象多层嵌套中间一层为空的时候报错\n\neg：当这个部分被多次调用，而数组没有值的时候，这个时候会报错，采用lodash处理错误情况：\n```\nprops.line.collabration.array.length === 0\n _.get(props, 'line.collabration.array', []).length\n```\n\n3、promise的吞噬异常，当promise中出错后，很难判断它出错的位置。\n\n4、公司中的less单位由标准的11px导致页面写死的宽高失调\n\n5、前端的filter数据和query数据使用key标记缓存在后端，调试过程导致key被污染，页面数据无法加载。\n\n6、ES-2015-loose模式的情况下，set转数组报错; [地址](https://ustc-han.github.io/2019/05/08/Bable%E7%9A%84loose%E6%A8%A1%E5%BC%8F/)\n","slug":"开发中遇到的问题","published":1,"date":"2019-12-19T15:52:56.156Z","updated":"2019-12-19T15:52:56.157Z","_id":"ck4cwgnj1003dckukujnxr0d2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1、框架样式是写在元素上的内联样式，导致做修改难于覆盖</p>\n<p>2、对象多层嵌套中间一层为空的时候报错</p>\n<p>eg：当这个部分被多次调用，而数组没有值的时候，这个时候会报错，采用lodash处理错误情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props.line.collabration.array.length === 0</span><br><span class=\"line\"> _.get(props, &apos;line.collabration.array&apos;, []).length</span><br></pre></td></tr></table></figure></p>\n<p>3、promise的吞噬异常，当promise中出错后，很难判断它出错的位置。</p>\n<p>4、公司中的less单位由标准的11px导致页面写死的宽高失调</p>\n<p>5、前端的filter数据和query数据使用key标记缓存在后端，调试过程导致key被污染，页面数据无法加载。</p>\n<p>6、ES-2015-loose模式的情况下，set转数组报错; <a href=\"https://ustc-han.github.io/2019/05/08/Bable%E7%9A%84loose%E6%A8%A1%E5%BC%8F/\">地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、框架样式是写在元素上的内联样式，导致做修改难于覆盖</p>\n<p>2、对象多层嵌套中间一层为空的时候报错</p>\n<p>eg：当这个部分被多次调用，而数组没有值的时候，这个时候会报错，采用lodash处理错误情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props.line.collabration.array.length === 0</span><br><span class=\"line\"> _.get(props, &apos;line.collabration.array&apos;, []).length</span><br></pre></td></tr></table></figure></p>\n<p>3、promise的吞噬异常，当promise中出错后，很难判断它出错的位置。</p>\n<p>4、公司中的less单位由标准的11px导致页面写死的宽高失调</p>\n<p>5、前端的filter数据和query数据使用key标记缓存在后端，调试过程导致key被污染，页面数据无法加载。</p>\n<p>6、ES-2015-loose模式的情况下，set转数组报错; <a href=\"https://ustc-han.github.io/2019/05/08/Bable%E7%9A%84loose%E6%A8%A1%E5%BC%8F/\">地址</a></p>\n"},{"title":"推空的commit","_content":"\n# 推空的commit\n\n当镜像没有打成功，需要新进一个task,去触发翻译流程\n\ngit commit --allow-empty","source":"_posts/推一个空的commit.md","raw":"---\ntitle: 推空的commit\ntags: \n- Git\n---\n\n# 推空的commit\n\n当镜像没有打成功，需要新进一个task,去触发翻译流程\n\ngit commit --allow-empty","slug":"推一个空的commit","published":1,"date":"2019-12-19T15:52:56.157Z","updated":"2019-12-19T15:52:56.157Z","_id":"ck4cwgnj2003fckuk1ty9eyqz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"推空的commit\"><a href=\"#推空的commit\" class=\"headerlink\" title=\"推空的commit\"></a>推空的commit</h1><p>当镜像没有打成功，需要新进一个task,去触发翻译流程</p>\n<p>git commit –allow-empty</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"推空的commit\"><a href=\"#推空的commit\" class=\"headerlink\" title=\"推空的commit\"></a>推空的commit</h1><p>当镜像没有打成功，需要新进一个task,去触发翻译流程</p>\n<p>git commit –allow-empty</p>\n"},{"title":"CSS 居中","toc":true,"_content":"## 水平居中\n### 单行行内元素水平居中：\n```\ntext-align: center;\n```\n### 块级元素居中：\n```     \nmargin: 0 auto;\n```\n### 多个块元素居中\n```\n父元素：\ntext-align: center;\n多个块元素\ndisplay: inline-block;\n```\n使用flex布局\n```\n父元素：display: flex;\n       justify-content: center;\n```\n## 垂直居中\n<!--more-->\n### 单行文本\n知道父元素高度：\n```\nheight: 100px;\nline-height: 100px;\n```\n不知道父元素高度：\n```\n设置上下padding相同\npadding:20px,0;\n```\n### 多行文本\n转table\n```\n父元素：\n      display: table;\n子元素：\n      display: table-cell;\n      vertical-align: middle;\n```\n转flex\n```\ndisplay: flex;\nalign-items: center;\n```\n### 高度知道的块元素\n```\n.parent {\n  position: relative;\n}\n.child {\n  position: absolute;\n  top: 50%;  /* 盒子的上边缘与父元素中线对齐 */\n  height: 100px;\n  margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */\n}\n```\n### 高度不知道的块元素\n```\n.parent {\n  position: relative;\n}\n.child {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n```\n### 使用flex\n```\n.parent {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n```\n## 水平垂直居中\n### 已知宽高\n```\n.parent {\n  position: relative;\n}\n.child {\n  width: 100px;\n  height: 100px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: -50px,0,0,-50px;\n}\n```\n### 不知宽高\n```\n.parent {\n  position: relative;\n}\n.child {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n```\n*父元素如果不设置relative,子元素相对于body定位*\n### 使用flex\n```\n.parent {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n```\n\n[参考链接](https://css-tricks.com/centering-css-complete-guide/ )","source":"_posts/居中.md","raw":"---\ntitle: CSS 居中\ntags: \n- CSS\n- 水平居中\n- 垂直居中\n- 水平垂直居中\ntoc: true\n---\n## 水平居中\n### 单行行内元素水平居中：\n```\ntext-align: center;\n```\n### 块级元素居中：\n```     \nmargin: 0 auto;\n```\n### 多个块元素居中\n```\n父元素：\ntext-align: center;\n多个块元素\ndisplay: inline-block;\n```\n使用flex布局\n```\n父元素：display: flex;\n       justify-content: center;\n```\n## 垂直居中\n<!--more-->\n### 单行文本\n知道父元素高度：\n```\nheight: 100px;\nline-height: 100px;\n```\n不知道父元素高度：\n```\n设置上下padding相同\npadding:20px,0;\n```\n### 多行文本\n转table\n```\n父元素：\n      display: table;\n子元素：\n      display: table-cell;\n      vertical-align: middle;\n```\n转flex\n```\ndisplay: flex;\nalign-items: center;\n```\n### 高度知道的块元素\n```\n.parent {\n  position: relative;\n}\n.child {\n  position: absolute;\n  top: 50%;  /* 盒子的上边缘与父元素中线对齐 */\n  height: 100px;\n  margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */\n}\n```\n### 高度不知道的块元素\n```\n.parent {\n  position: relative;\n}\n.child {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n```\n### 使用flex\n```\n.parent {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n```\n## 水平垂直居中\n### 已知宽高\n```\n.parent {\n  position: relative;\n}\n.child {\n  width: 100px;\n  height: 100px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: -50px,0,0,-50px;\n}\n```\n### 不知宽高\n```\n.parent {\n  position: relative;\n}\n.child {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n```\n*父元素如果不设置relative,子元素相对于body定位*\n### 使用flex\n```\n.parent {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n```\n\n[参考链接](https://css-tricks.com/centering-css-complete-guide/ )","slug":"居中","published":1,"date":"2019-12-19T15:52:56.156Z","updated":"2019-12-19T15:52:56.156Z","_id":"ck4cwgnj2003gckukkwqjvv3t","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><h3 id=\"单行行内元素水平居中：\"><a href=\"#单行行内元素水平居中：\" class=\"headerlink\" title=\"单行行内元素水平居中：\"></a>单行行内元素水平居中：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text-align: center;</span><br></pre></td></tr></table></figure>\n<h3 id=\"块级元素居中：\"><a href=\"#块级元素居中：\" class=\"headerlink\" title=\"块级元素居中：\"></a>块级元素居中：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">margin: 0 auto;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多个块元素居中\"><a href=\"#多个块元素居中\" class=\"headerlink\" title=\"多个块元素居中\"></a>多个块元素居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">多个块元素</span><br><span class=\"line\">display: inline-block;</span><br></pre></td></tr></table></figure>\n<p>使用flex布局<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：display: flex;</span><br><span class=\"line\">       justify-content: center;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><a id=\"more\"></a>\n<h3 id=\"单行文本\"><a href=\"#单行文本\" class=\"headerlink\" title=\"单行文本\"></a>单行文本</h3><p>知道父元素高度：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">height: 100px;</span><br><span class=\"line\">line-height: 100px;</span><br></pre></td></tr></table></figure></p>\n<p>不知道父元素高度：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置上下padding相同</span><br><span class=\"line\">padding:20px,0;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多行文本\"><a href=\"#多行文本\" class=\"headerlink\" title=\"多行文本\"></a>多行文本</h3><p>转table<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">      display: table;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">      display: table-cell;</span><br><span class=\"line\">      vertical-align: middle;</span><br></pre></td></tr></table></figure></p>\n<p>转flex<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">align-items: center;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"高度知道的块元素\"><a href=\"#高度知道的块元素\" class=\"headerlink\" title=\"高度知道的块元素\"></a>高度知道的块元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 50%;  /* 盒子的上边缘与父元素中线对齐 */</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高度不知道的块元素\"><a href=\"#高度不知道的块元素\" class=\"headerlink\" title=\"高度不知道的块元素\"></a>高度不知道的块元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  transform: translateY(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用flex\"><a href=\"#使用flex\" class=\"headerlink\" title=\"使用flex\"></a>使用flex</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-direction: column;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h2><h3 id=\"已知宽高\"><a href=\"#已知宽高\" class=\"headerlink\" title=\"已知宽高\"></a>已知宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  left: 50%;</span><br><span class=\"line\">  margin: -50px,0,0,-50px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不知宽高\"><a href=\"#不知宽高\" class=\"headerlink\" title=\"不知宽高\"></a>不知宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  left: 50%;</span><br><span class=\"line\">  transform: translate(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>父元素如果不设置relative,子元素相对于body定位</em></p>\n<h3 id=\"使用flex-1\"><a href=\"#使用flex-1\" class=\"headerlink\" title=\"使用flex\"></a>使用flex</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://css-tricks.com/centering-css-complete-guide/\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><h3 id=\"单行行内元素水平居中：\"><a href=\"#单行行内元素水平居中：\" class=\"headerlink\" title=\"单行行内元素水平居中：\"></a>单行行内元素水平居中：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text-align: center;</span><br></pre></td></tr></table></figure>\n<h3 id=\"块级元素居中：\"><a href=\"#块级元素居中：\" class=\"headerlink\" title=\"块级元素居中：\"></a>块级元素居中：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">margin: 0 auto;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多个块元素居中\"><a href=\"#多个块元素居中\" class=\"headerlink\" title=\"多个块元素居中\"></a>多个块元素居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">多个块元素</span><br><span class=\"line\">display: inline-block;</span><br></pre></td></tr></table></figure>\n<p>使用flex布局<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：display: flex;</span><br><span class=\"line\">       justify-content: center;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2>","more":"<h3 id=\"单行文本\"><a href=\"#单行文本\" class=\"headerlink\" title=\"单行文本\"></a>单行文本</h3><p>知道父元素高度：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">height: 100px;</span><br><span class=\"line\">line-height: 100px;</span><br></pre></td></tr></table></figure></p>\n<p>不知道父元素高度：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置上下padding相同</span><br><span class=\"line\">padding:20px,0;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"多行文本\"><a href=\"#多行文本\" class=\"headerlink\" title=\"多行文本\"></a>多行文本</h3><p>转table<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">      display: table;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">      display: table-cell;</span><br><span class=\"line\">      vertical-align: middle;</span><br></pre></td></tr></table></figure></p>\n<p>转flex<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: flex;</span><br><span class=\"line\">align-items: center;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"高度知道的块元素\"><a href=\"#高度知道的块元素\" class=\"headerlink\" title=\"高度知道的块元素\"></a>高度知道的块元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 50%;  /* 盒子的上边缘与父元素中线对齐 */</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高度不知道的块元素\"><a href=\"#高度不知道的块元素\" class=\"headerlink\" title=\"高度不知道的块元素\"></a>高度不知道的块元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  transform: translateY(-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用flex\"><a href=\"#使用flex\" class=\"headerlink\" title=\"使用flex\"></a>使用flex</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-direction: column;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h2><h3 id=\"已知宽高\"><a href=\"#已知宽高\" class=\"headerlink\" title=\"已知宽高\"></a>已知宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  left: 50%;</span><br><span class=\"line\">  margin: -50px,0,0,-50px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不知宽高\"><a href=\"#不知宽高\" class=\"headerlink\" title=\"不知宽高\"></a>不知宽高</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 50%;</span><br><span class=\"line\">  left: 50%;</span><br><span class=\"line\">  transform: translate(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>父元素如果不设置relative,子元素相对于body定位</em></p>\n<h3 id=\"使用flex-1\"><a href=\"#使用flex-1\" class=\"headerlink\" title=\"使用flex\"></a>使用flex</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://css-tricks.com/centering-css-complete-guide/\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>"},{"title":"求两个数组的交并集","_content":"集合元素有唯一性；\n\n## 数组的交集：\n常规的操作方法（默认数组没有重复数据）\n```\narr1.filter(item => arr2.includes(item));\n```\n\n## 求两个数组的相同元素：\n此时用上面的方法存在问题，如下\n\narr1 = [1,2,2,3]; arr2 = [2];\n显然他们的交集只有2，但事实会返回[2,2]\n\n考虑拿短的来遍历？\narr1 = [1,2,2,3,4,5,6]; arr2 = [1,2,2,2];交集显然是[1,2,2]，但是用短的数组遍历直接用上面的方法也会出问题\n\n### 解决方法：\n用空间换时间：\n```\nconst intersect = (nums1, nums2) => {\n  const map = {}\n  const res = []\n  for (let n of nums1) {\n    if (map[n]) {\n      map[n]++\n    } else {\n      map[n] = 1\n    }\n  }\n  for (let n of nums2) {\n    if (map[n] > 0) {\n      res.push(n)\n      map[n]--\n    }\n  }\n  return res\n}\n\n```\n时间换空间\n\n这种操作需要使用splice()来分割数组和查找索引，比较耗时间\n```\nvar number = [];\narr1.forEach(item => {\nvar index = arr2.indexOf(item);\nindex!=-1 && number.push(...arr2.splice(index,1));\n });\n```\n## 数组的并集(默认数组没有重复元素)\n```\nresult = Array.from(new Set([...arr1,...arr2]));\n```","source":"_posts/数组交集并集.md","raw":"---\ntitle: 求两个数组的交并集\ntags: \n- JS\n- 数组\n- 交集\n- 并集\n---\n集合元素有唯一性；\n\n## 数组的交集：\n常规的操作方法（默认数组没有重复数据）\n```\narr1.filter(item => arr2.includes(item));\n```\n\n## 求两个数组的相同元素：\n此时用上面的方法存在问题，如下\n\narr1 = [1,2,2,3]; arr2 = [2];\n显然他们的交集只有2，但事实会返回[2,2]\n\n考虑拿短的来遍历？\narr1 = [1,2,2,3,4,5,6]; arr2 = [1,2,2,2];交集显然是[1,2,2]，但是用短的数组遍历直接用上面的方法也会出问题\n\n### 解决方法：\n用空间换时间：\n```\nconst intersect = (nums1, nums2) => {\n  const map = {}\n  const res = []\n  for (let n of nums1) {\n    if (map[n]) {\n      map[n]++\n    } else {\n      map[n] = 1\n    }\n  }\n  for (let n of nums2) {\n    if (map[n] > 0) {\n      res.push(n)\n      map[n]--\n    }\n  }\n  return res\n}\n\n```\n时间换空间\n\n这种操作需要使用splice()来分割数组和查找索引，比较耗时间\n```\nvar number = [];\narr1.forEach(item => {\nvar index = arr2.indexOf(item);\nindex!=-1 && number.push(...arr2.splice(index,1));\n });\n```\n## 数组的并集(默认数组没有重复元素)\n```\nresult = Array.from(new Set([...arr1,...arr2]));\n```","slug":"数组交集并集","published":1,"date":"2019-12-19T15:52:56.157Z","updated":"2019-12-19T15:52:56.157Z","_id":"ck4cwgnj3003ickukfcasc4ga","comments":1,"layout":"post","photos":[],"link":"","content":"<p>集合元素有唯一性；</p>\n<h2 id=\"数组的交集：\"><a href=\"#数组的交集：\" class=\"headerlink\" title=\"数组的交集：\"></a>数组的交集：</h2><p>常规的操作方法（默认数组没有重复数据）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.filter(item =&gt; arr2.includes(item));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"求两个数组的相同元素：\"><a href=\"#求两个数组的相同元素：\" class=\"headerlink\" title=\"求两个数组的相同元素：\"></a>求两个数组的相同元素：</h2><p>此时用上面的方法存在问题，如下</p>\n<p>arr1 = [1,2,2,3]; arr2 = [2];<br>显然他们的交集只有2，但事实会返回[2,2]</p>\n<p>考虑拿短的来遍历？<br>arr1 = [1,2,2,3,4,5,6]; arr2 = [1,2,2,2];交集显然是[1,2,2]，但是用短的数组遍历直接用上面的方法也会出问题</p>\n<h3 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><p>用空间换时间：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const intersect = (nums1, nums2) =&gt; &#123;</span><br><span class=\"line\">  const map = &#123;&#125;</span><br><span class=\"line\">  const res = []</span><br><span class=\"line\">  for (let n of nums1) &#123;</span><br><span class=\"line\">    if (map[n]) &#123;</span><br><span class=\"line\">      map[n]++</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      map[n] = 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for (let n of nums2) &#123;</span><br><span class=\"line\">    if (map[n] &gt; 0) &#123;</span><br><span class=\"line\">      res.push(n)</span><br><span class=\"line\">      map[n]--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>时间换空间</p>\n<p>这种操作需要使用splice()来分割数组和查找索引，比较耗时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var number = [];</span><br><span class=\"line\">arr1.forEach(item =&gt; &#123;</span><br><span class=\"line\">var index = arr2.indexOf(item);</span><br><span class=\"line\">index!=-1 &amp;&amp; number.push(...arr2.splice(index,1));</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数组的并集-默认数组没有重复元素\"><a href=\"#数组的并集-默认数组没有重复元素\" class=\"headerlink\" title=\"数组的并集(默认数组没有重复元素)\"></a>数组的并集(默认数组没有重复元素)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = Array.from(new Set([...arr1,...arr2]));</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>集合元素有唯一性；</p>\n<h2 id=\"数组的交集：\"><a href=\"#数组的交集：\" class=\"headerlink\" title=\"数组的交集：\"></a>数组的交集：</h2><p>常规的操作方法（默认数组没有重复数据）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.filter(item =&gt; arr2.includes(item));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"求两个数组的相同元素：\"><a href=\"#求两个数组的相同元素：\" class=\"headerlink\" title=\"求两个数组的相同元素：\"></a>求两个数组的相同元素：</h2><p>此时用上面的方法存在问题，如下</p>\n<p>arr1 = [1,2,2,3]; arr2 = [2];<br>显然他们的交集只有2，但事实会返回[2,2]</p>\n<p>考虑拿短的来遍历？<br>arr1 = [1,2,2,3,4,5,6]; arr2 = [1,2,2,2];交集显然是[1,2,2]，但是用短的数组遍历直接用上面的方法也会出问题</p>\n<h3 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><p>用空间换时间：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const intersect = (nums1, nums2) =&gt; &#123;</span><br><span class=\"line\">  const map = &#123;&#125;</span><br><span class=\"line\">  const res = []</span><br><span class=\"line\">  for (let n of nums1) &#123;</span><br><span class=\"line\">    if (map[n]) &#123;</span><br><span class=\"line\">      map[n]++</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      map[n] = 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for (let n of nums2) &#123;</span><br><span class=\"line\">    if (map[n] &gt; 0) &#123;</span><br><span class=\"line\">      res.push(n)</span><br><span class=\"line\">      map[n]--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>时间换空间</p>\n<p>这种操作需要使用splice()来分割数组和查找索引，比较耗时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var number = [];</span><br><span class=\"line\">arr1.forEach(item =&gt; &#123;</span><br><span class=\"line\">var index = arr2.indexOf(item);</span><br><span class=\"line\">index!=-1 &amp;&amp; number.push(...arr2.splice(index,1));</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数组的并集-默认数组没有重复元素\"><a href=\"#数组的并集-默认数组没有重复元素\" class=\"headerlink\" title=\"数组的并集(默认数组没有重复元素)\"></a>数组的并集(默认数组没有重复元素)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = Array.from(new Set([...arr1,...arr2]));</span><br></pre></td></tr></table></figure>"},{"title":"函数柯理化","toc":true,"_content":"\n## 函数柯理化定义\n函数柯理化是函数式编程中的一个应用，主要的特点就是将多参数的函数递归降解为一个接受单个参数的函数，并返回能够接收剩余参数的函数。看了lodash和ramda的库，都有相关curry的封装，此处深入研究一下。\n\n## 函数柯理化的功能\n函数柯理化的功能：1、参数复用；2、延时执行；\n\n关于这部分的内容，我不打算细写，因为网上有一大堆的教程。推荐一篇掘金的相关文章讲的还不错：https://juejin.im/post/5af13664f265da0ba266efcf#heading-0 \n\n\n## 本文焦点-实现函数柯理化\n要想理解函数柯理化，我们有必要了解一下bind函数，bind函数与函数柯理化有太多的相似点。它们都可以返回函数，并且保存之前的参数，实现函数的延迟执行等；\n<!--more-->\n- bind函数的源码实现:\n```\nFunction.prototype.bind = function(first) {\n  var aArgs = Array.prototype.slice.call(arguments, 1);\n  var that = this;\n  return function() {\n      return that.apply(first, aArgs.concat(Array.prototype.slice.call(arguments)))\n  }\n}\n```\n函数实现的原理是利用闭包，将之前传的参数保存在闭包中，返回闭包函数，闭包函数被调用后。联合现有参数利用apply方法实现函数bind方法。\n\n> 踩坑：此处返回函数不要为了省事使用箭头函数，因为你将为你拿不到arguments而痛苦流泪。-- 韩树人\n\n- 利用bind实现函数柯理化：\n```\nvar curry = function curry(fn) {\n  var arity = fn.length; //函数参数个数\n  var args = Array.from(arguments).slice(1);//被柯理化函数的参数\n  return arity <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n};\n```\n当传入参数的数量大于等于函数的参数数量的时候调用函数fn；\n此处的args不是太好理解，args保存了传入的所有参数。当传入的参数没有达到函数参数值的时候返回curry.bind(null, fn, ...args)。\n下次执行的时候就是curry.bind(null, fn, ...args)(参数i)，执行第i次操作的时候。[...arguments] =[fn,参数1，参数2，...,参数i-1,参数i]。这样就可以理解args一直都保存着上一次回调之前所传入的参数。\n\n- 还不明白？利用apply更直接一点\n```\nvar curry = function curry(fn) {\n  var arity = fn.length;\n  var args = [...arguments].slice(1);\n  return arity <= args.length ? fn(...args) : function(){return curry.apply(null,[fn, ...args, ...arguments])}\n}\n```\n- 再直白一点\n```\nvar curry = function curry(fn) {\n  var arity = fn.length;\n  var args = [...arguments].slice(1);\n  return arity <= args.length ? fn(...args) : function(){return curry(fn, ...args, ...arguments)}\n}\n```\n其实说到最后很简单了，说穿了curry就是闭包+回调，在传入的参数不足时，将参数保存在内存，在传人参数达到函数执行需要的参数个数时，返回一个fn(...args) \n\n## 处理arguments为数组的几个方法：\n*爱用那个用哪个，麻麻再也不用担心我不会担心我不会处理类数组对象了。*\n\n1、Array.prototype.slice.call(arguments);\n\n2、Array.from(arguments);\n\n3、[...arguments];\n\n\n","source":"_posts/柯理化.md","raw":"---\ntitle: 函数柯理化\ntoc: true\ntags: \n- JS\n- 柯理化\n---\n\n## 函数柯理化定义\n函数柯理化是函数式编程中的一个应用，主要的特点就是将多参数的函数递归降解为一个接受单个参数的函数，并返回能够接收剩余参数的函数。看了lodash和ramda的库，都有相关curry的封装，此处深入研究一下。\n\n## 函数柯理化的功能\n函数柯理化的功能：1、参数复用；2、延时执行；\n\n关于这部分的内容，我不打算细写，因为网上有一大堆的教程。推荐一篇掘金的相关文章讲的还不错：https://juejin.im/post/5af13664f265da0ba266efcf#heading-0 \n\n\n## 本文焦点-实现函数柯理化\n要想理解函数柯理化，我们有必要了解一下bind函数，bind函数与函数柯理化有太多的相似点。它们都可以返回函数，并且保存之前的参数，实现函数的延迟执行等；\n<!--more-->\n- bind函数的源码实现:\n```\nFunction.prototype.bind = function(first) {\n  var aArgs = Array.prototype.slice.call(arguments, 1);\n  var that = this;\n  return function() {\n      return that.apply(first, aArgs.concat(Array.prototype.slice.call(arguments)))\n  }\n}\n```\n函数实现的原理是利用闭包，将之前传的参数保存在闭包中，返回闭包函数，闭包函数被调用后。联合现有参数利用apply方法实现函数bind方法。\n\n> 踩坑：此处返回函数不要为了省事使用箭头函数，因为你将为你拿不到arguments而痛苦流泪。-- 韩树人\n\n- 利用bind实现函数柯理化：\n```\nvar curry = function curry(fn) {\n  var arity = fn.length; //函数参数个数\n  var args = Array.from(arguments).slice(1);//被柯理化函数的参数\n  return arity <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n};\n```\n当传入参数的数量大于等于函数的参数数量的时候调用函数fn；\n此处的args不是太好理解，args保存了传入的所有参数。当传入的参数没有达到函数参数值的时候返回curry.bind(null, fn, ...args)。\n下次执行的时候就是curry.bind(null, fn, ...args)(参数i)，执行第i次操作的时候。[...arguments] =[fn,参数1，参数2，...,参数i-1,参数i]。这样就可以理解args一直都保存着上一次回调之前所传入的参数。\n\n- 还不明白？利用apply更直接一点\n```\nvar curry = function curry(fn) {\n  var arity = fn.length;\n  var args = [...arguments].slice(1);\n  return arity <= args.length ? fn(...args) : function(){return curry.apply(null,[fn, ...args, ...arguments])}\n}\n```\n- 再直白一点\n```\nvar curry = function curry(fn) {\n  var arity = fn.length;\n  var args = [...arguments].slice(1);\n  return arity <= args.length ? fn(...args) : function(){return curry(fn, ...args, ...arguments)}\n}\n```\n其实说到最后很简单了，说穿了curry就是闭包+回调，在传入的参数不足时，将参数保存在内存，在传人参数达到函数执行需要的参数个数时，返回一个fn(...args) \n\n## 处理arguments为数组的几个方法：\n*爱用那个用哪个，麻麻再也不用担心我不会担心我不会处理类数组对象了。*\n\n1、Array.prototype.slice.call(arguments);\n\n2、Array.from(arguments);\n\n3、[...arguments];\n\n\n","slug":"柯理化","published":1,"date":"2019-12-19T15:52:56.158Z","updated":"2019-12-19T15:52:56.158Z","_id":"ck4cwgnj5003lckukkj9dy89f","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"函数柯理化定义\"><a href=\"#函数柯理化定义\" class=\"headerlink\" title=\"函数柯理化定义\"></a>函数柯理化定义</h2><p>函数柯理化是函数式编程中的一个应用，主要的特点就是将多参数的函数递归降解为一个接受单个参数的函数，并返回能够接收剩余参数的函数。看了lodash和ramda的库，都有相关curry的封装，此处深入研究一下。</p>\n<h2 id=\"函数柯理化的功能\"><a href=\"#函数柯理化的功能\" class=\"headerlink\" title=\"函数柯理化的功能\"></a>函数柯理化的功能</h2><p>函数柯理化的功能：1、参数复用；2、延时执行；</p>\n<p>关于这部分的内容，我不打算细写，因为网上有一大堆的教程。推荐一篇掘金的相关文章讲的还不错：<a href=\"https://juejin.im/post/5af13664f265da0ba266efcf#heading-0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5af13664f265da0ba266efcf#heading-0</a> </p>\n<h2 id=\"本文焦点-实现函数柯理化\"><a href=\"#本文焦点-实现函数柯理化\" class=\"headerlink\" title=\"本文焦点-实现函数柯理化\"></a>本文焦点-实现函数柯理化</h2><p>要想理解函数柯理化，我们有必要了解一下bind函数，bind函数与函数柯理化有太多的相似点。它们都可以返回函数，并且保存之前的参数，实现函数的延迟执行等；<br><a id=\"more\"></a></p>\n<ul>\n<li>bind函数的源码实现:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function.prototype.bind = function(first) &#123;</span><br><span class=\"line\">  var aArgs = Array.prototype.slice.call(arguments, 1);</span><br><span class=\"line\">  var that = this;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">      return that.apply(first, aArgs.concat(Array.prototype.slice.call(arguments)))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>函数实现的原理是利用闭包，将之前传的参数保存在闭包中，返回闭包函数，闭包函数被调用后。联合现有参数利用apply方法实现函数bind方法。</p>\n<blockquote>\n<p>踩坑：此处返回函数不要为了省事使用箭头函数，因为你将为你拿不到arguments而痛苦流泪。– 韩树人</p>\n</blockquote>\n<ul>\n<li>利用bind实现函数柯理化：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var curry = function curry(fn) &#123;</span><br><span class=\"line\">  var arity = fn.length; //函数参数个数</span><br><span class=\"line\">  var args = Array.from(arguments).slice(1);//被柯理化函数的参数</span><br><span class=\"line\">  return arity &lt;= args.length ? fn(...args) : curry.bind(null, fn, ...args);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当传入参数的数量大于等于函数的参数数量的时候调用函数fn；<br>此处的args不是太好理解，args保存了传入的所有参数。当传入的参数没有达到函数参数值的时候返回curry.bind(null, fn, …args)。<br>下次执行的时候就是curry.bind(null, fn, …args)(参数i)，执行第i次操作的时候。[…arguments] =[fn,参数1，参数2，…,参数i-1,参数i]。这样就可以理解args一直都保存着上一次回调之前所传入的参数。</p>\n<ul>\n<li><p>还不明白？利用apply更直接一点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var curry = function curry(fn) &#123;</span><br><span class=\"line\">  var arity = fn.length;</span><br><span class=\"line\">  var args = [...arguments].slice(1);</span><br><span class=\"line\">  return arity &lt;= args.length ? fn(...args) : function()&#123;return curry.apply(null,[fn, ...args, ...arguments])&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再直白一点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var curry = function curry(fn) &#123;</span><br><span class=\"line\">  var arity = fn.length;</span><br><span class=\"line\">  var args = [...arguments].slice(1);</span><br><span class=\"line\">  return arity &lt;= args.length ? fn(...args) : function()&#123;return curry(fn, ...args, ...arguments)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其实说到最后很简单了，说穿了curry就是闭包+回调，在传入的参数不足时，将参数保存在内存，在传人参数达到函数执行需要的参数个数时，返回一个fn(…args) </p>\n<h2 id=\"处理arguments为数组的几个方法：\"><a href=\"#处理arguments为数组的几个方法：\" class=\"headerlink\" title=\"处理arguments为数组的几个方法：\"></a>处理arguments为数组的几个方法：</h2><p><em>爱用那个用哪个，麻麻再也不用担心我不会担心我不会处理类数组对象了。</em></p>\n<p>1、Array.prototype.slice.call(arguments);</p>\n<p>2、Array.from(arguments);</p>\n<p>3、[…arguments];</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数柯理化定义\"><a href=\"#函数柯理化定义\" class=\"headerlink\" title=\"函数柯理化定义\"></a>函数柯理化定义</h2><p>函数柯理化是函数式编程中的一个应用，主要的特点就是将多参数的函数递归降解为一个接受单个参数的函数，并返回能够接收剩余参数的函数。看了lodash和ramda的库，都有相关curry的封装，此处深入研究一下。</p>\n<h2 id=\"函数柯理化的功能\"><a href=\"#函数柯理化的功能\" class=\"headerlink\" title=\"函数柯理化的功能\"></a>函数柯理化的功能</h2><p>函数柯理化的功能：1、参数复用；2、延时执行；</p>\n<p>关于这部分的内容，我不打算细写，因为网上有一大堆的教程。推荐一篇掘金的相关文章讲的还不错：<a href=\"https://juejin.im/post/5af13664f265da0ba266efcf#heading-0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5af13664f265da0ba266efcf#heading-0</a> </p>\n<h2 id=\"本文焦点-实现函数柯理化\"><a href=\"#本文焦点-实现函数柯理化\" class=\"headerlink\" title=\"本文焦点-实现函数柯理化\"></a>本文焦点-实现函数柯理化</h2><p>要想理解函数柯理化，我们有必要了解一下bind函数，bind函数与函数柯理化有太多的相似点。它们都可以返回函数，并且保存之前的参数，实现函数的延迟执行等；<br>","more":"</p>\n<ul>\n<li>bind函数的源码实现:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function.prototype.bind = function(first) &#123;</span><br><span class=\"line\">  var aArgs = Array.prototype.slice.call(arguments, 1);</span><br><span class=\"line\">  var that = this;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">      return that.apply(first, aArgs.concat(Array.prototype.slice.call(arguments)))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>函数实现的原理是利用闭包，将之前传的参数保存在闭包中，返回闭包函数，闭包函数被调用后。联合现有参数利用apply方法实现函数bind方法。</p>\n<blockquote>\n<p>踩坑：此处返回函数不要为了省事使用箭头函数，因为你将为你拿不到arguments而痛苦流泪。– 韩树人</p>\n</blockquote>\n<ul>\n<li>利用bind实现函数柯理化：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var curry = function curry(fn) &#123;</span><br><span class=\"line\">  var arity = fn.length; //函数参数个数</span><br><span class=\"line\">  var args = Array.from(arguments).slice(1);//被柯理化函数的参数</span><br><span class=\"line\">  return arity &lt;= args.length ? fn(...args) : curry.bind(null, fn, ...args);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当传入参数的数量大于等于函数的参数数量的时候调用函数fn；<br>此处的args不是太好理解，args保存了传入的所有参数。当传入的参数没有达到函数参数值的时候返回curry.bind(null, fn, …args)。<br>下次执行的时候就是curry.bind(null, fn, …args)(参数i)，执行第i次操作的时候。[…arguments] =[fn,参数1，参数2，…,参数i-1,参数i]。这样就可以理解args一直都保存着上一次回调之前所传入的参数。</p>\n<ul>\n<li><p>还不明白？利用apply更直接一点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var curry = function curry(fn) &#123;</span><br><span class=\"line\">  var arity = fn.length;</span><br><span class=\"line\">  var args = [...arguments].slice(1);</span><br><span class=\"line\">  return arity &lt;= args.length ? fn(...args) : function()&#123;return curry.apply(null,[fn, ...args, ...arguments])&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再直白一点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var curry = function curry(fn) &#123;</span><br><span class=\"line\">  var arity = fn.length;</span><br><span class=\"line\">  var args = [...arguments].slice(1);</span><br><span class=\"line\">  return arity &lt;= args.length ? fn(...args) : function()&#123;return curry(fn, ...args, ...arguments)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其实说到最后很简单了，说穿了curry就是闭包+回调，在传入的参数不足时，将参数保存在内存，在传人参数达到函数执行需要的参数个数时，返回一个fn(…args) </p>\n<h2 id=\"处理arguments为数组的几个方法：\"><a href=\"#处理arguments为数组的几个方法：\" class=\"headerlink\" title=\"处理arguments为数组的几个方法：\"></a>处理arguments为数组的几个方法：</h2><p><em>爱用那个用哪个，麻麻再也不用担心我不会担心我不会处理类数组对象了。</em></p>\n<p>1、Array.prototype.slice.call(arguments);</p>\n<p>2、Array.from(arguments);</p>\n<p>3、[…arguments];</p>"},{"title":"老朋友-进程和线程","toc":true,"_content":"### 前言\n  进程和线程应该是操作系统最基础的知识点，长时间不看有些遗忘，现总结一下。\n\n### 进程和线程\n\n课本中：进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。\n\n> 进程就是包括上下文切换的程序执行时间总和 = CPU加载上下文+CPU执行+CPU保存上下文\n\n`进程的颗粒度太大，每次都要有上下的调入，保存，调出。`如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。\n\n那么这里具体的执行就可能变成：程序A得到CPU -> CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。这里a，b，c的执行是共享了A的上下文，CPU在执行的时候没有进行上下文切换的。这里的a，b，c就是线程，`也就是说线程是共享了进程的上下文环境，的更为细小的CPU时间段`。\n\n<!--more-->\n#### 互斥锁\n  前面提出了线程可以共享进程的内存空间，但是有些共享内存一次性只允许一个线程使用，此时可以说线程是互斥的，而防止多个线程同时读写某一块内存区域的方法就叫做`互斥锁`。\n#### 信号量\n  某些进程的共享内存允许多个线程同时使用，但是允许的数量是有限的。如果已经达到容纳数量，其它线程只能等待。这保证了多个线程之间不会冲突。\n\n  信号量就类似一个计数器，当信号量的值大于0时，线程可以使用共享资源，如果为0，则该资源目前不可用，线程进入睡眠状态，直至信号量值大于0，线程被唤醒\n\n#### 进程和线程的区别：\n- 进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。\n- 一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；\n- 进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)。\n- 调度和切换：线程上下文切换比进程上下文切换要快得多。\n\n#### 多进程和多线程\n多进程： 同一时间内可以有多个进程处于运行状态，例如网易云听歌和聊微信互不干扰。\n多线程： 同一个进程中包含多个执行流，多个线程来执行程序中的不同的任务。\n\n参考链接：https://www.zhihu.com/question/25532384/answer/81152571\n\n阮一峰讲的也很形象：http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\n","source":"_posts/线程和进程.md","raw":"---\ntitle: 老朋友-进程和线程\ntags: \n- Node\n- 进程\n- 线程\ntoc: true\n---\n### 前言\n  进程和线程应该是操作系统最基础的知识点，长时间不看有些遗忘，现总结一下。\n\n### 进程和线程\n\n课本中：进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。\n\n> 进程就是包括上下文切换的程序执行时间总和 = CPU加载上下文+CPU执行+CPU保存上下文\n\n`进程的颗粒度太大，每次都要有上下的调入，保存，调出。`如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。\n\n那么这里具体的执行就可能变成：程序A得到CPU -> CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。这里a，b，c的执行是共享了A的上下文，CPU在执行的时候没有进行上下文切换的。这里的a，b，c就是线程，`也就是说线程是共享了进程的上下文环境，的更为细小的CPU时间段`。\n\n<!--more-->\n#### 互斥锁\n  前面提出了线程可以共享进程的内存空间，但是有些共享内存一次性只允许一个线程使用，此时可以说线程是互斥的，而防止多个线程同时读写某一块内存区域的方法就叫做`互斥锁`。\n#### 信号量\n  某些进程的共享内存允许多个线程同时使用，但是允许的数量是有限的。如果已经达到容纳数量，其它线程只能等待。这保证了多个线程之间不会冲突。\n\n  信号量就类似一个计数器，当信号量的值大于0时，线程可以使用共享资源，如果为0，则该资源目前不可用，线程进入睡眠状态，直至信号量值大于0，线程被唤醒\n\n#### 进程和线程的区别：\n- 进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。\n- 一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；\n- 进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)。\n- 调度和切换：线程上下文切换比进程上下文切换要快得多。\n\n#### 多进程和多线程\n多进程： 同一时间内可以有多个进程处于运行状态，例如网易云听歌和聊微信互不干扰。\n多线程： 同一个进程中包含多个执行流，多个线程来执行程序中的不同的任务。\n\n参考链接：https://www.zhihu.com/question/25532384/answer/81152571\n\n阮一峰讲的也很形象：http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\n","slug":"线程和进程","published":1,"date":"2019-12-19T15:52:56.159Z","updated":"2019-12-19T15:52:56.159Z","_id":"ck4cwgnj7003nckukrrg0l16d","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  进程和线程应该是操作系统最基础的知识点，长时间不看有些遗忘，现总结一下。</p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><p>课本中：进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。</p>\n<blockquote>\n<p>进程就是包括上下文切换的程序执行时间总和 = CPU加载上下文+CPU执行+CPU保存上下文</p>\n</blockquote>\n<p><code>进程的颗粒度太大，每次都要有上下的调入，保存，调出。</code>如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。</p>\n<p>那么这里具体的执行就可能变成：程序A得到CPU -&gt; CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。这里a，b，c的执行是共享了A的上下文，CPU在执行的时候没有进行上下文切换的。这里的a，b，c就是线程，<code>也就是说线程是共享了进程的上下文环境，的更为细小的CPU时间段</code>。</p>\n<a id=\"more\"></a>\n<h4 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h4><p>  前面提出了线程可以共享进程的内存空间，但是有些共享内存一次性只允许一个线程使用，此时可以说线程是互斥的，而防止多个线程同时读写某一块内存区域的方法就叫做<code>互斥锁</code>。</p>\n<h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><p>  某些进程的共享内存允许多个线程同时使用，但是允许的数量是有限的。如果已经达到容纳数量，其它线程只能等待。这保证了多个线程之间不会冲突。</p>\n<p>  信号量就类似一个计数器，当信号量的值大于0时，线程可以使用共享资源，如果为0，则该资源目前不可用，线程进入睡眠状态，直至信号量值大于0，线程被唤醒</p>\n<h4 id=\"进程和线程的区别：\"><a href=\"#进程和线程的区别：\" class=\"headerlink\" title=\"进程和线程的区别：\"></a>进程和线程的区别：</h4><ul>\n<li>进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。</li>\n<li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li>\n<li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)。</li>\n<li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li>\n</ul>\n<h4 id=\"多进程和多线程\"><a href=\"#多进程和多线程\" class=\"headerlink\" title=\"多进程和多线程\"></a>多进程和多线程</h4><p>多进程： 同一时间内可以有多个进程处于运行状态，例如网易云听歌和聊微信互不干扰。<br>多线程： 同一个进程中包含多个执行流，多个线程来执行程序中的不同的任务。</p>\n<p>参考链接：<a href=\"https://www.zhihu.com/question/25532384/answer/81152571\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/25532384/answer/81152571</a></p>\n<p>阮一峰讲的也很形象：<a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  进程和线程应该是操作系统最基础的知识点，长时间不看有些遗忘，现总结一下。</p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><p>课本中：进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。</p>\n<blockquote>\n<p>进程就是包括上下文切换的程序执行时间总和 = CPU加载上下文+CPU执行+CPU保存上下文</p>\n</blockquote>\n<p><code>进程的颗粒度太大，每次都要有上下的调入，保存，调出。</code>如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。</p>\n<p>那么这里具体的执行就可能变成：程序A得到CPU -&gt; CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。这里a，b，c的执行是共享了A的上下文，CPU在执行的时候没有进行上下文切换的。这里的a，b，c就是线程，<code>也就是说线程是共享了进程的上下文环境，的更为细小的CPU时间段</code>。</p>","more":"<h4 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h4><p>  前面提出了线程可以共享进程的内存空间，但是有些共享内存一次性只允许一个线程使用，此时可以说线程是互斥的，而防止多个线程同时读写某一块内存区域的方法就叫做<code>互斥锁</code>。</p>\n<h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><p>  某些进程的共享内存允许多个线程同时使用，但是允许的数量是有限的。如果已经达到容纳数量，其它线程只能等待。这保证了多个线程之间不会冲突。</p>\n<p>  信号量就类似一个计数器，当信号量的值大于0时，线程可以使用共享资源，如果为0，则该资源目前不可用，线程进入睡眠状态，直至信号量值大于0，线程被唤醒</p>\n<h4 id=\"进程和线程的区别：\"><a href=\"#进程和线程的区别：\" class=\"headerlink\" title=\"进程和线程的区别：\"></a>进程和线程的区别：</h4><ul>\n<li>进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。</li>\n<li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li>\n<li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)。</li>\n<li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li>\n</ul>\n<h4 id=\"多进程和多线程\"><a href=\"#多进程和多线程\" class=\"headerlink\" title=\"多进程和多线程\"></a>多进程和多线程</h4><p>多进程： 同一时间内可以有多个进程处于运行状态，例如网易云听歌和聊微信互不干扰。<br>多线程： 同一个进程中包含多个执行流，多个线程来执行程序中的不同的任务。</p>\n<p>参考链接：<a href=\"https://www.zhihu.com/question/25532384/answer/81152571\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/25532384/answer/81152571</a></p>\n<p>阮一峰讲的也很形象：<a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html</a></p>"},{"title":"ES5和ES6继承的写法","toc":true,"_content":"# ES5和ES6继承的写法：\n\n## ES5代码：\n\n\n```js\nfunction User(name,age){\n    this.name = name;\n    this.age = age;        \n}\n\nUser.prototype.showName=function(){\n    console.log(this.name);\n}\nUser.prototype.showAge=function(){\n    console.log(this.age);\n}\n\nfunction Vipuser(name,age,level){\n    User.call(this,name,age);\n    this.level = level;\n}\nVipuser.prototype = new User();\nVipuser.prototype.constructor = Vipuser;\n\nVipuser.prototype.showLevel=function(){\n    console.log(this.level);\n}\n\nvar v1 = new Vipuser('hum',12,3);\nv1.showName();        \nv1.showAge();       \nv1.showLevel();       \n```\n<!--more-->\n## ES6代码：      \n==注意User后面没有括号==\n\n\n```js\nclass User{\n    constructor(name,age){\n        this.name = name;\n        this.age = age;\n    }\n    showName(){\n        console.log(this.name);\n    }\n    showAge(){\n        console.log(this.age);\n    }\n}\n\nclass Vipuser extends User{\n    constructor(name,age,level){\n        super(name,age);\n        this.level = level;\n    }\n    showLevel(){\n        console.log(this.level);\n    }\n}\nvar v1 = new Vipuser('han',10,2);\nv1.showName();\nv1.showAge();\nv1.showLevel();\n```","source":"_posts/继承之ES5和ES6对比.md","raw":"---\ntitle: ES5和ES6继承的写法\ntags:  \n- JS\n- 继承\ntoc: true\n---\n# ES5和ES6继承的写法：\n\n## ES5代码：\n\n\n```js\nfunction User(name,age){\n    this.name = name;\n    this.age = age;        \n}\n\nUser.prototype.showName=function(){\n    console.log(this.name);\n}\nUser.prototype.showAge=function(){\n    console.log(this.age);\n}\n\nfunction Vipuser(name,age,level){\n    User.call(this,name,age);\n    this.level = level;\n}\nVipuser.prototype = new User();\nVipuser.prototype.constructor = Vipuser;\n\nVipuser.prototype.showLevel=function(){\n    console.log(this.level);\n}\n\nvar v1 = new Vipuser('hum',12,3);\nv1.showName();        \nv1.showAge();       \nv1.showLevel();       \n```\n<!--more-->\n## ES6代码：      \n==注意User后面没有括号==\n\n\n```js\nclass User{\n    constructor(name,age){\n        this.name = name;\n        this.age = age;\n    }\n    showName(){\n        console.log(this.name);\n    }\n    showAge(){\n        console.log(this.age);\n    }\n}\n\nclass Vipuser extends User{\n    constructor(name,age,level){\n        super(name,age);\n        this.level = level;\n    }\n    showLevel(){\n        console.log(this.level);\n    }\n}\nvar v1 = new Vipuser('han',10,2);\nv1.showName();\nv1.showAge();\nv1.showLevel();\n```","slug":"继承之ES5和ES6对比","published":1,"date":"2019-12-19T15:52:56.160Z","updated":"2019-12-19T15:52:56.160Z","_id":"ck4cwgnj8003qckukd0p1k3e1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"ES5和ES6继承的写法：\"><a href=\"#ES5和ES6继承的写法：\" class=\"headerlink\" title=\"ES5和ES6继承的写法：\"></a>ES5和ES6继承的写法：</h1><h2 id=\"ES5代码：\"><a href=\"#ES5代码：\" class=\"headerlink\" title=\"ES5代码：\"></a>ES5代码：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.prototype.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">User.prototype.showAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vipuser</span>(<span class=\"params\">name,age,level</span>)</span>&#123;</span><br><span class=\"line\">    User.call(<span class=\"keyword\">this</span>,name,age);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vipuser.prototype = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">Vipuser.prototype.constructor = Vipuser;</span><br><span class=\"line\"></span><br><span class=\"line\">Vipuser.prototype.showLevel=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.level);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"keyword\">new</span> Vipuser(<span class=\"string\">'hum'</span>,<span class=\"number\">12</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">v1.showName();        </span><br><span class=\"line\">v1.showAge();       </span><br><span class=\"line\">v1.showLevel();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"ES6代码：\"><a href=\"#ES6代码：\" class=\"headerlink\" title=\"ES6代码：\"></a>ES6代码：</h2><p>==注意User后面没有括号==</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name,age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showName()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showAge()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vipuser</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name,age,level)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name,age);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showLevel()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"keyword\">new</span> Vipuser(<span class=\"string\">'han'</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">v1.showName();</span><br><span class=\"line\">v1.showAge();</span><br><span class=\"line\">v1.showLevel();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"ES5和ES6继承的写法：\"><a href=\"#ES5和ES6继承的写法：\" class=\"headerlink\" title=\"ES5和ES6继承的写法：\"></a>ES5和ES6继承的写法：</h1><h2 id=\"ES5代码：\"><a href=\"#ES5代码：\" class=\"headerlink\" title=\"ES5代码：\"></a>ES5代码：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">User.prototype.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">User.prototype.showAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vipuser</span>(<span class=\"params\">name,age,level</span>)</span>&#123;</span><br><span class=\"line\">    User.call(<span class=\"keyword\">this</span>,name,age);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vipuser.prototype = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">Vipuser.prototype.constructor = Vipuser;</span><br><span class=\"line\"></span><br><span class=\"line\">Vipuser.prototype.showLevel=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.level);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"keyword\">new</span> Vipuser(<span class=\"string\">'hum'</span>,<span class=\"number\">12</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">v1.showName();        </span><br><span class=\"line\">v1.showAge();       </span><br><span class=\"line\">v1.showLevel();</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"ES6代码：\"><a href=\"#ES6代码：\" class=\"headerlink\" title=\"ES6代码：\"></a>ES6代码：</h2><p>==注意User后面没有括号==</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name,age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showName()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showAge()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vipuser</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name,age,level)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name,age);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    showLevel()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"keyword\">new</span> Vipuser(<span class=\"string\">'han'</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">v1.showName();</span><br><span class=\"line\">v1.showAge();</span><br><span class=\"line\">v1.showLevel();</span><br></pre></td></tr></table></figure>"},{"title":"浏览器内核","toc":true,"_content":"## 前言：\n\n  浏览器不是单进程的，假设浏览器是单进程，那么每个标签页都是浏览器的一个线程，那么当其中一个标签页崩溃后，整个浏览器将崩溃，这显然是不合理的。\n\n  另外相对于线程来说，进程之间是不共享资源和地址空间的,所以不会存在太多的安全问题，而多个线程由于共享着相同的地址空间和资源,所以线程之间有可能会存在恶意修改或者获取非授权数据等安全问题。这也是为什么浏览器是多进程的原因之一\n\n## 浏览器内核：\n对于浏览器的每个标签页都有属于自己的浏览器内核实例。而浏览器内核的主要功能是通过取得页面内容、整理信息（应用CSS）、计算和组合最终输出可视化的图像结果，因此也被称为渲染引擎(渲染进程)。\n\n浏览器内核划分：\n- GUI 渲染线程\n- JavaScript引擎线程\n- 定时触发器线程\n- 事件触发线程\n- 异步http请求线程\n\n### GUI 渲染线程\n\n  - 负责渲染浏览器界面，解析HTML，CSS，构建DOM树、CSS规则树以及渲染树，布局和绘制等。\n  - 当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行\n  - GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。\n### JavaScript引擎线程\nJavascript引擎，也可以称为JS内核，主要负责处理Javascript脚本程序，例如V8引擎。Javascript引擎线程理所当然是负责解析Javascript脚本，运行代码\n### 定时触发器线程\nsetInterval与setTimeout所在线程，浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。\n<!--more-->\n### 事件触发线程\n当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以来自定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。\n### 异步http请求线程\n在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果有回调函数，异步线程就产生状态变更时将事件放到 JavaScript引擎的处理队列中等待处理。\n\n### GUI渲染线程与JS引擎线程互斥\njs引擎线程在渲染的时候，很可能会执行一些DOM操作等，此时如果GUI渲染线程与JS引擎线程不互斥，那么当JS引擎执行一些DOM操作后会给GUI渲染线程的渲染带来迷惑，例如GUI渲染id= ‘robbie’的DOM节点div，此时JS线程却是要删除此节点，那么就会造成一种混乱，不知道该如何操作。为了渲染结果的一致性，GUI渲染线程与JS引擎线程被设定是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。\n\n### JS的阻塞页面渲染\n在默认情况下，js的下载、解析和执行阶段都会阻塞页面的执行。由上面的内容可知GUI渲染线程与JS引擎线程互斥，所以在JS执行的时候，GUI线程会被刮起。所以在代码中我们要尽量的将JS写在后面，等DOM执行完才执行。如果写在DOM树构建之前会加长白屏的时间。\n\n参考链接1： \nhttps://juejin.im/post/5a6547d0f265da3e283a1df7#heading-9\n          \n参考链接2：https://imweb.io/topic/58e3bfa845e5c13468f567d5\n\n","source":"_posts/浏览器内核.md","raw":"---\ntitle: 浏览器内核\ntags: \n- Node\n- 浏览器内核\ntoc: true\n---\n## 前言：\n\n  浏览器不是单进程的，假设浏览器是单进程，那么每个标签页都是浏览器的一个线程，那么当其中一个标签页崩溃后，整个浏览器将崩溃，这显然是不合理的。\n\n  另外相对于线程来说，进程之间是不共享资源和地址空间的,所以不会存在太多的安全问题，而多个线程由于共享着相同的地址空间和资源,所以线程之间有可能会存在恶意修改或者获取非授权数据等安全问题。这也是为什么浏览器是多进程的原因之一\n\n## 浏览器内核：\n对于浏览器的每个标签页都有属于自己的浏览器内核实例。而浏览器内核的主要功能是通过取得页面内容、整理信息（应用CSS）、计算和组合最终输出可视化的图像结果，因此也被称为渲染引擎(渲染进程)。\n\n浏览器内核划分：\n- GUI 渲染线程\n- JavaScript引擎线程\n- 定时触发器线程\n- 事件触发线程\n- 异步http请求线程\n\n### GUI 渲染线程\n\n  - 负责渲染浏览器界面，解析HTML，CSS，构建DOM树、CSS规则树以及渲染树，布局和绘制等。\n  - 当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行\n  - GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。\n### JavaScript引擎线程\nJavascript引擎，也可以称为JS内核，主要负责处理Javascript脚本程序，例如V8引擎。Javascript引擎线程理所当然是负责解析Javascript脚本，运行代码\n### 定时触发器线程\nsetInterval与setTimeout所在线程，浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。\n<!--more-->\n### 事件触发线程\n当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以来自定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。\n### 异步http请求线程\n在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果有回调函数，异步线程就产生状态变更时将事件放到 JavaScript引擎的处理队列中等待处理。\n\n### GUI渲染线程与JS引擎线程互斥\njs引擎线程在渲染的时候，很可能会执行一些DOM操作等，此时如果GUI渲染线程与JS引擎线程不互斥，那么当JS引擎执行一些DOM操作后会给GUI渲染线程的渲染带来迷惑，例如GUI渲染id= ‘robbie’的DOM节点div，此时JS线程却是要删除此节点，那么就会造成一种混乱，不知道该如何操作。为了渲染结果的一致性，GUI渲染线程与JS引擎线程被设定是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。\n\n### JS的阻塞页面渲染\n在默认情况下，js的下载、解析和执行阶段都会阻塞页面的执行。由上面的内容可知GUI渲染线程与JS引擎线程互斥，所以在JS执行的时候，GUI线程会被刮起。所以在代码中我们要尽量的将JS写在后面，等DOM执行完才执行。如果写在DOM树构建之前会加长白屏的时间。\n\n参考链接1： \nhttps://juejin.im/post/5a6547d0f265da3e283a1df7#heading-9\n          \n参考链接2：https://imweb.io/topic/58e3bfa845e5c13468f567d5\n\n","slug":"浏览器内核","published":1,"date":"2019-12-19T15:52:56.158Z","updated":"2019-12-19T15:52:56.158Z","_id":"ck4cwgnj9003rckuksdkpzbww","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>  浏览器不是单进程的，假设浏览器是单进程，那么每个标签页都是浏览器的一个线程，那么当其中一个标签页崩溃后，整个浏览器将崩溃，这显然是不合理的。</p>\n<p>  另外相对于线程来说，进程之间是不共享资源和地址空间的,所以不会存在太多的安全问题，而多个线程由于共享着相同的地址空间和资源,所以线程之间有可能会存在恶意修改或者获取非授权数据等安全问题。这也是为什么浏览器是多进程的原因之一</p>\n<h2 id=\"浏览器内核：\"><a href=\"#浏览器内核：\" class=\"headerlink\" title=\"浏览器内核：\"></a>浏览器内核：</h2><p>对于浏览器的每个标签页都有属于自己的浏览器内核实例。而浏览器内核的主要功能是通过取得页面内容、整理信息（应用CSS）、计算和组合最终输出可视化的图像结果，因此也被称为渲染引擎(渲染进程)。</p>\n<p>浏览器内核划分：</p>\n<ul>\n<li>GUI 渲染线程</li>\n<li>JavaScript引擎线程</li>\n<li>定时触发器线程</li>\n<li>事件触发线程</li>\n<li>异步http请求线程</li>\n</ul>\n<h3 id=\"GUI-渲染线程\"><a href=\"#GUI-渲染线程\" class=\"headerlink\" title=\"GUI 渲染线程\"></a>GUI 渲染线程</h3><ul>\n<li>负责渲染浏览器界面，解析HTML，CSS，构建DOM树、CSS规则树以及渲染树，布局和绘制等。</li>\n<li>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行</li>\n<li>GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。<h3 id=\"JavaScript引擎线程\"><a href=\"#JavaScript引擎线程\" class=\"headerlink\" title=\"JavaScript引擎线程\"></a>JavaScript引擎线程</h3>Javascript引擎，也可以称为JS内核，主要负责处理Javascript脚本程序，例如V8引擎。Javascript引擎线程理所当然是负责解析Javascript脚本，运行代码<h3 id=\"定时触发器线程\"><a href=\"#定时触发器线程\" class=\"headerlink\" title=\"定时触发器线程\"></a>定时触发器线程</h3>setInterval与setTimeout所在线程，浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。<a id=\"more\"></a>\n<h3 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h3>当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以来自定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。<h3 id=\"异步http请求线程\"><a href=\"#异步http请求线程\" class=\"headerlink\" title=\"异步http请求线程\"></a>异步http请求线程</h3>在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果有回调函数，异步线程就产生状态变更时将事件放到 JavaScript引擎的处理队列中等待处理。</li>\n</ul>\n<h3 id=\"GUI渲染线程与JS引擎线程互斥\"><a href=\"#GUI渲染线程与JS引擎线程互斥\" class=\"headerlink\" title=\"GUI渲染线程与JS引擎线程互斥\"></a>GUI渲染线程与JS引擎线程互斥</h3><p>js引擎线程在渲染的时候，很可能会执行一些DOM操作等，此时如果GUI渲染线程与JS引擎线程不互斥，那么当JS引擎执行一些DOM操作后会给GUI渲染线程的渲染带来迷惑，例如GUI渲染id= ‘robbie’的DOM节点div，此时JS线程却是要删除此节点，那么就会造成一种混乱，不知道该如何操作。为了渲染结果的一致性，GUI渲染线程与JS引擎线程被设定是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</p>\n<h3 id=\"JS的阻塞页面渲染\"><a href=\"#JS的阻塞页面渲染\" class=\"headerlink\" title=\"JS的阻塞页面渲染\"></a>JS的阻塞页面渲染</h3><p>在默认情况下，js的下载、解析和执行阶段都会阻塞页面的执行。由上面的内容可知GUI渲染线程与JS引擎线程互斥，所以在JS执行的时候，GUI线程会被刮起。所以在代码中我们要尽量的将JS写在后面，等DOM执行完才执行。如果写在DOM树构建之前会加长白屏的时间。</p>\n<p>参考链接1：<br><a href=\"https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-9</a></p>\n<p>参考链接2：<a href=\"https://imweb.io/topic/58e3bfa845e5c13468f567d5\" target=\"_blank\" rel=\"noopener\">https://imweb.io/topic/58e3bfa845e5c13468f567d5</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>  浏览器不是单进程的，假设浏览器是单进程，那么每个标签页都是浏览器的一个线程，那么当其中一个标签页崩溃后，整个浏览器将崩溃，这显然是不合理的。</p>\n<p>  另外相对于线程来说，进程之间是不共享资源和地址空间的,所以不会存在太多的安全问题，而多个线程由于共享着相同的地址空间和资源,所以线程之间有可能会存在恶意修改或者获取非授权数据等安全问题。这也是为什么浏览器是多进程的原因之一</p>\n<h2 id=\"浏览器内核：\"><a href=\"#浏览器内核：\" class=\"headerlink\" title=\"浏览器内核：\"></a>浏览器内核：</h2><p>对于浏览器的每个标签页都有属于自己的浏览器内核实例。而浏览器内核的主要功能是通过取得页面内容、整理信息（应用CSS）、计算和组合最终输出可视化的图像结果，因此也被称为渲染引擎(渲染进程)。</p>\n<p>浏览器内核划分：</p>\n<ul>\n<li>GUI 渲染线程</li>\n<li>JavaScript引擎线程</li>\n<li>定时触发器线程</li>\n<li>事件触发线程</li>\n<li>异步http请求线程</li>\n</ul>\n<h3 id=\"GUI-渲染线程\"><a href=\"#GUI-渲染线程\" class=\"headerlink\" title=\"GUI 渲染线程\"></a>GUI 渲染线程</h3><ul>\n<li>负责渲染浏览器界面，解析HTML，CSS，构建DOM树、CSS规则树以及渲染树，布局和绘制等。</li>\n<li>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行</li>\n<li>GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。<h3 id=\"JavaScript引擎线程\"><a href=\"#JavaScript引擎线程\" class=\"headerlink\" title=\"JavaScript引擎线程\"></a>JavaScript引擎线程</h3>Javascript引擎，也可以称为JS内核，主要负责处理Javascript脚本程序，例如V8引擎。Javascript引擎线程理所当然是负责解析Javascript脚本，运行代码<h3 id=\"定时触发器线程\"><a href=\"#定时触发器线程\" class=\"headerlink\" title=\"定时触发器线程\"></a>定时触发器线程</h3>setInterval与setTimeout所在线程，浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。","more":"<h3 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h3>当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以来自定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。<h3 id=\"异步http请求线程\"><a href=\"#异步http请求线程\" class=\"headerlink\" title=\"异步http请求线程\"></a>异步http请求线程</h3>在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果有回调函数，异步线程就产生状态变更时将事件放到 JavaScript引擎的处理队列中等待处理。</li>\n</ul>\n<h3 id=\"GUI渲染线程与JS引擎线程互斥\"><a href=\"#GUI渲染线程与JS引擎线程互斥\" class=\"headerlink\" title=\"GUI渲染线程与JS引擎线程互斥\"></a>GUI渲染线程与JS引擎线程互斥</h3><p>js引擎线程在渲染的时候，很可能会执行一些DOM操作等，此时如果GUI渲染线程与JS引擎线程不互斥，那么当JS引擎执行一些DOM操作后会给GUI渲染线程的渲染带来迷惑，例如GUI渲染id= ‘robbie’的DOM节点div，此时JS线程却是要删除此节点，那么就会造成一种混乱，不知道该如何操作。为了渲染结果的一致性，GUI渲染线程与JS引擎线程被设定是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</p>\n<h3 id=\"JS的阻塞页面渲染\"><a href=\"#JS的阻塞页面渲染\" class=\"headerlink\" title=\"JS的阻塞页面渲染\"></a>JS的阻塞页面渲染</h3><p>在默认情况下，js的下载、解析和执行阶段都会阻塞页面的执行。由上面的内容可知GUI渲染线程与JS引擎线程互斥，所以在JS执行的时候，GUI线程会被刮起。所以在代码中我们要尽量的将JS写在后面，等DOM执行完才执行。如果写在DOM树构建之前会加长白屏的时间。</p>\n<p>参考链接1：<br><a href=\"https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-9</a></p>\n<p>参考链接2：<a href=\"https://imweb.io/topic/58e3bfa845e5c13468f567d5\" target=\"_blank\" rel=\"noopener\">https://imweb.io/topic/58e3bfa845e5c13468f567d5</a></p>"},{"title":"类数组对象","_content":"<article>\n\t\t<div id=\"article_content\" class=\"article_content clearfix csdn-tracking-statistics\" data-pid=\"blog\" data-mod=\"popu_307\" data-dsm=\"post\">\n                    <div class=\"markdown_views\">\n                <h2 id=\"类数组对象arguments\"><a name=\"t0\"></a>类数组对象：arguments</h2>\n\n<p>总所周知，js是一门相当灵活的语言。当我们在js中在调用一个函数的时候，我们经常会给这个函数传递一些参数，js把传入到这个函数的全部参数存储在一个叫做arguments的东西里面，那么这到底是什么东西？</p>\n\n<p>在js中万物皆对象，甚至数组字符串函数都是对象。所以这个叫做arguments的东西也是个对象，而且是一个特殊的对象，它的属性名是按照传入参数的序列来的，第1个参数的属性名是’0’，第2个参数的属性名是’1’，以此类推，并且它还有length属性，存储的是当前传入函数参数的个数，很多时候我们把这种对象叫做类数组对象。类数组对象和数组都是对象这个妈生的，但是数组是大哥比类数组对象多了很多其他的玩具(方法)，类数组对象只是长得很像数组的弟弟而已。</p>\n\n<p>慢着，刚刚不是说数组也是对象吗，现在这个类数组对象又是什么？ 没办法，js就是这么的灵活。这个类数组对象不仅存储给函数传入的参数，也具有一些其他的属性，等下会一一道来。</p>\n\n<p>因为类数组对象和数组有很多的共性，所以我们经常可以用call方法，让类数组对象也使用的数组的一些方法，就是让这个弟弟去玩哥哥的玩具，比如……，还是不扯远了，这篇文章只是说什么是arguments，想知道更多关于对象如何借调数组方法的话，请参考这篇文章。</p>\n\n<hr>\n\n\n\n<h2 id=\"arguments的属性\"><a name=\"t1\"></a>arguments的属性</h2>\n\n<p>接下来我们来看看arguments对象里面到底有些什么东西，是骡子是马拉出来溜溜。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showargs</span><span class=\"hljs-params\">()</span> {</span>\n    console.log( <span class=\"hljs-built_in\">arguments</span> );\n}\n\nshowargs(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);</code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n<!--more-->\n<p>下面我们用console.log的方式，将arguments对象输出到控制台，这里不得不说一句，chrome的console工具好用得不得了（我不是来打广告的）。</p>\n\n<p>这里我们可以看到arguments对象将我传入的五个参数以数组的形式保存在里面，还有保存了我传入函数的实参的个数（length）。而且我们可以看到arguments对象的 ==<em>_ proto _</em>== 是指向object的，这也说明了他是个类数组对象，而不是一个数组。</p>\n\n<p>有了这个对象我们以后写函数的时候，就不用给所有的形参指定参数名，然后通过参数名的方式获取参数了，我们可以直接使用arguments对象来获取实参，这样是不是方便了很多呢。 <br>\n有些语言在我们给函数指定了参数名之后，当调用函数时，会判断当前传入的参数是否与函数定义的参数个数相等，不相等就会报错，但是灵活的js（不是我说，js是真的灵活）并不会验证传递给函数的参数个数是否等于函数定义的参数个数。所以为了装逼（代码的简洁度），我们使用arguments调用参数可以不混淆不同函数之间的参数名。另外为了装逼（代码的严整度），我们也能用arguments来判断当前传入参数的个数是否与我们需要的数量一致。</p>\n\n<p>下面举个栗子：</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">()</span> {</span>\n    <span class=\"hljs-keyword\">if</span>( <span class=\"hljs-built_in\">arguments</span>.length == <span class=\"hljs-number\">2</span> ){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>];\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'传入参数不合法'</span>;\n    }\n}\n\nconsole.log( add(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );\nconsole.log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );</code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n> 5\n\n> 传入参数不合法\n\n<p>最后我们还可以看到arguments还有一个叫做callee的属性，这个属性是表示的是当前函数的一个引用，简单点说，这个属性里面存储的我们调用的这个函数的代码，实在无法理解的时候，又到了console.log大显身手的时候了。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showcallee</span><span class=\"hljs-params\">()</span> {</span>\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'这里是代码'</span>;\n    <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">'这是另一段代码'</span>;\n    <span class=\"hljs-keyword\">var</span> c = a + b;\n\n    console.log(<span class=\"hljs-built_in\">arguments</span>.callee);\n\n    <span class=\"hljs-keyword\">return</span> c;\n}\nshowcallee();</code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n\n> 输出结果\n> ```\n> ƒ showcallee() {\n>     var a = '这里是代码';\n>     var b = '这是另一段代码';\n>     var c = a + b;\n> \n>     console.log(arguments.callee);\n> \n>     return c;\n> }\n> ```\n\n\n<p>看到结果的你是不是和我一样惊呆了呢，这不就是我写的代码吗，arguments.callee完完整整的把这个函数的这段代码返回了。</p>\n\n<hr>\n\n\n\n<h2 id=\"arguments的一些妙用\"><a name=\"t2\"></a>arguments的一些妙用</h2>\n\n<p><strong>1.利用arguments实现方法的重载</strong></p>\n\n<p>下面我们利用arguments对象来实现一个参数相加的函数，不论传入多少参数都行，将传入的参数相加后返回。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs scilab has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">()</span> {</span>\n    var len = <span class=\"hljs-transposed_variable\">arguments.</span><span class=\"hljs-built_in\">length</span>,\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(;len--;){\n        <span class=\"hljs-built_in\">sum</span> += arguments<span class=\"hljs-matrix\">[len]</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>;\n}\n\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );   <span class=\"hljs-comment\">//6</span>\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>) );     <span class=\"hljs-comment\">//4</span>\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>) );   <span class=\"hljs-comment\">//26</span></code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n\n<p>由于js是一种弱类型的语言，没有重载机制，当我们重写函数时，会将原来的函数直接覆盖，这里我们能利用arguments，来判断传入的实参类型与数量进行不同的操作，然后返回不同的数值。</p>\n\n<p><strong>2.利用arguments.callee实现递归</strong></p>\n\n<p>先来看看之前我们是怎么实现递归的，这是一个结算阶乘的函数</p>\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs livecodeserver has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">factorial</span>(<span class=\"hljs-title\">num</span>) { </span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">num</span>&lt;=<span class=\"hljs-number\">1</span>) { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-number\">1</span>; \n    }<span class=\"hljs-keyword\">else</span> { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-built_in\">num</span> * factorial(<span class=\"hljs-built_in\">num</span>-<span class=\"hljs-number\">1</span>); \n    } \n} </code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n\n<p>但是当这个函数变成了一个匿名函数时，我们就可以利用callee来递归这个函数。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs livecodeserver has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">factorial</span>(<span class=\"hljs-title\">num</span>) { </span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">num</span>&lt;=<span class=\"hljs-number\">1</span>) { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-number\">1</span>; \n    }<span class=\"hljs-keyword\">else</span> { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-built_in\">num</span> * arguments.callee(<span class=\"hljs-built_in\">num</span>-<span class=\"hljs-number\">1</span>); \n    } \n} </code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n\n<p>这个方法虽然好用，但是有一点值得注意，ECMAScript4中为了限制js的灵活度，让js变得严格，新增了严格模式，在严格模式中我们被禁止不使用var来直接声明一个全局变量，当然这不是重点，重点是arguments.callee这个属性也被禁止了。不过这都不是事儿，ES6为我们新增了很多好用的变量声明方式和新的语法糖，作为一个时髦的前端，我们赶紧学习一些ES6的新语法吧。</p>            </div>","source":"_posts/类数组对象.md","raw":"---\ntitle: 类数组对象\ntags: \n- JS\n- 类数组对象\n---\n<article>\n\t\t<div id=\"article_content\" class=\"article_content clearfix csdn-tracking-statistics\" data-pid=\"blog\" data-mod=\"popu_307\" data-dsm=\"post\">\n                    <div class=\"markdown_views\">\n                <h2 id=\"类数组对象arguments\"><a name=\"t0\"></a>类数组对象：arguments</h2>\n\n<p>总所周知，js是一门相当灵活的语言。当我们在js中在调用一个函数的时候，我们经常会给这个函数传递一些参数，js把传入到这个函数的全部参数存储在一个叫做arguments的东西里面，那么这到底是什么东西？</p>\n\n<p>在js中万物皆对象，甚至数组字符串函数都是对象。所以这个叫做arguments的东西也是个对象，而且是一个特殊的对象，它的属性名是按照传入参数的序列来的，第1个参数的属性名是’0’，第2个参数的属性名是’1’，以此类推，并且它还有length属性，存储的是当前传入函数参数的个数，很多时候我们把这种对象叫做类数组对象。类数组对象和数组都是对象这个妈生的，但是数组是大哥比类数组对象多了很多其他的玩具(方法)，类数组对象只是长得很像数组的弟弟而已。</p>\n\n<p>慢着，刚刚不是说数组也是对象吗，现在这个类数组对象又是什么？ 没办法，js就是这么的灵活。这个类数组对象不仅存储给函数传入的参数，也具有一些其他的属性，等下会一一道来。</p>\n\n<p>因为类数组对象和数组有很多的共性，所以我们经常可以用call方法，让类数组对象也使用的数组的一些方法，就是让这个弟弟去玩哥哥的玩具，比如……，还是不扯远了，这篇文章只是说什么是arguments，想知道更多关于对象如何借调数组方法的话，请参考这篇文章。</p>\n\n<hr>\n\n\n\n<h2 id=\"arguments的属性\"><a name=\"t1\"></a>arguments的属性</h2>\n\n<p>接下来我们来看看arguments对象里面到底有些什么东西，是骡子是马拉出来溜溜。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showargs</span><span class=\"hljs-params\">()</span> {</span>\n    console.log( <span class=\"hljs-built_in\">arguments</span> );\n}\n\nshowargs(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);</code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n<!--more-->\n<p>下面我们用console.log的方式，将arguments对象输出到控制台，这里不得不说一句，chrome的console工具好用得不得了（我不是来打广告的）。</p>\n\n<p>这里我们可以看到arguments对象将我传入的五个参数以数组的形式保存在里面，还有保存了我传入函数的实参的个数（length）。而且我们可以看到arguments对象的 ==<em>_ proto _</em>== 是指向object的，这也说明了他是个类数组对象，而不是一个数组。</p>\n\n<p>有了这个对象我们以后写函数的时候，就不用给所有的形参指定参数名，然后通过参数名的方式获取参数了，我们可以直接使用arguments对象来获取实参，这样是不是方便了很多呢。 <br>\n有些语言在我们给函数指定了参数名之后，当调用函数时，会判断当前传入的参数是否与函数定义的参数个数相等，不相等就会报错，但是灵活的js（不是我说，js是真的灵活）并不会验证传递给函数的参数个数是否等于函数定义的参数个数。所以为了装逼（代码的简洁度），我们使用arguments调用参数可以不混淆不同函数之间的参数名。另外为了装逼（代码的严整度），我们也能用arguments来判断当前传入参数的个数是否与我们需要的数量一致。</p>\n\n<p>下面举个栗子：</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">()</span> {</span>\n    <span class=\"hljs-keyword\">if</span>( <span class=\"hljs-built_in\">arguments</span>.length == <span class=\"hljs-number\">2</span> ){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>];\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'传入参数不合法'</span>;\n    }\n}\n\nconsole.log( add(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );\nconsole.log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );</code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n> 5\n\n> 传入参数不合法\n\n<p>最后我们还可以看到arguments还有一个叫做callee的属性，这个属性是表示的是当前函数的一个引用，简单点说，这个属性里面存储的我们调用的这个函数的代码，实在无法理解的时候，又到了console.log大显身手的时候了。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showcallee</span><span class=\"hljs-params\">()</span> {</span>\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'这里是代码'</span>;\n    <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">'这是另一段代码'</span>;\n    <span class=\"hljs-keyword\">var</span> c = a + b;\n\n    console.log(<span class=\"hljs-built_in\">arguments</span>.callee);\n\n    <span class=\"hljs-keyword\">return</span> c;\n}\nshowcallee();</code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n\n> 输出结果\n> ```\n> ƒ showcallee() {\n>     var a = '这里是代码';\n>     var b = '这是另一段代码';\n>     var c = a + b;\n> \n>     console.log(arguments.callee);\n> \n>     return c;\n> }\n> ```\n\n\n<p>看到结果的你是不是和我一样惊呆了呢，这不就是我写的代码吗，arguments.callee完完整整的把这个函数的这段代码返回了。</p>\n\n<hr>\n\n\n\n<h2 id=\"arguments的一些妙用\"><a name=\"t2\"></a>arguments的一些妙用</h2>\n\n<p><strong>1.利用arguments实现方法的重载</strong></p>\n\n<p>下面我们利用arguments对象来实现一个参数相加的函数，不论传入多少参数都行，将传入的参数相加后返回。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs scilab has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">()</span> {</span>\n    var len = <span class=\"hljs-transposed_variable\">arguments.</span><span class=\"hljs-built_in\">length</span>,\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(;len--;){\n        <span class=\"hljs-built_in\">sum</span> += arguments<span class=\"hljs-matrix\">[len]</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>;\n}\n\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );   <span class=\"hljs-comment\">//6</span>\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>) );     <span class=\"hljs-comment\">//4</span>\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>) );   <span class=\"hljs-comment\">//26</span></code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n\n<p>由于js是一种弱类型的语言，没有重载机制，当我们重写函数时，会将原来的函数直接覆盖，这里我们能利用arguments，来判断传入的实参类型与数量进行不同的操作，然后返回不同的数值。</p>\n\n<p><strong>2.利用arguments.callee实现递归</strong></p>\n\n<p>先来看看之前我们是怎么实现递归的，这是一个结算阶乘的函数</p>\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs livecodeserver has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">factorial</span>(<span class=\"hljs-title\">num</span>) { </span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">num</span>&lt;=<span class=\"hljs-number\">1</span>) { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-number\">1</span>; \n    }<span class=\"hljs-keyword\">else</span> { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-built_in\">num</span> * factorial(<span class=\"hljs-built_in\">num</span>-<span class=\"hljs-number\">1</span>); \n    } \n} </code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n\n<p>但是当这个函数变成了一个匿名函数时，我们就可以利用callee来递归这个函数。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs livecodeserver has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">factorial</span>(<span class=\"hljs-title\">num</span>) { </span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">num</span>&lt;=<span class=\"hljs-number\">1</span>) { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-number\">1</span>; \n    }<span class=\"hljs-keyword\">else</span> { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-built_in\">num</span> * arguments.callee(<span class=\"hljs-built_in\">num</span>-<span class=\"hljs-number\">1</span>); \n    } \n} </code><ul class=\"pre-numbering\" style=\"\"></ul></pre>\n\n<p>这个方法虽然好用，但是有一点值得注意，ECMAScript4中为了限制js的灵活度，让js变得严格，新增了严格模式，在严格模式中我们被禁止不使用var来直接声明一个全局变量，当然这不是重点，重点是arguments.callee这个属性也被禁止了。不过这都不是事儿，ES6为我们新增了很多好用的变量声明方式和新的语法糖，作为一个时髦的前端，我们赶紧学习一些ES6的新语法吧。</p>            </div>","slug":"类数组对象","published":1,"date":"2018-09-10T05:32:06.487Z","updated":"2019-04-29T13:32:21.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4cwgnja003tckukvgzux82n","content":"<p><article><br>        <div id=\"article_content\" class=\"article_content clearfix csdn-tracking-statistics\" data-pid=\"blog\" data-mod=\"popu_307\" data-dsm=\"post\"><br>                    <div class=\"markdown_views\"><br>                <h2 id=\"类数组对象arguments\"><a name=\"t0\"></a>类数组对象：arguments</h2></div></div></article></p>\n<p>总所周知，js是一门相当灵活的语言。当我们在js中在调用一个函数的时候，我们经常会给这个函数传递一些参数，js把传入到这个函数的全部参数存储在一个叫做arguments的东西里面，那么这到底是什么东西？</p>\n\n<p>在js中万物皆对象，甚至数组字符串函数都是对象。所以这个叫做arguments的东西也是个对象，而且是一个特殊的对象，它的属性名是按照传入参数的序列来的，第1个参数的属性名是’0’，第2个参数的属性名是’1’，以此类推，并且它还有length属性，存储的是当前传入函数参数的个数，很多时候我们把这种对象叫做类数组对象。类数组对象和数组都是对象这个妈生的，但是数组是大哥比类数组对象多了很多其他的玩具(方法)，类数组对象只是长得很像数组的弟弟而已。</p>\n\n<p>慢着，刚刚不是说数组也是对象吗，现在这个类数组对象又是什么？ 没办法，js就是这么的灵活。这个类数组对象不仅存储给函数传入的参数，也具有一些其他的属性，等下会一一道来。</p>\n\n<p>因为类数组对象和数组有很多的共性，所以我们经常可以用call方法，让类数组对象也使用的数组的一些方法，就是让这个弟弟去玩哥哥的玩具，比如……，还是不扯远了，这篇文章只是说什么是arguments，想知道更多关于对象如何借调数组方法的话，请参考这篇文章。</p>\n\n<hr>\n\n\n\n<h2 id=\"arguments的属性\"><a name=\"t1\"></a>arguments的属性</h2>\n\n<p>接下来我们来看看arguments对象里面到底有些什么东西，是骡子是马拉出来溜溜。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showargs</span><span class=\"hljs-params\">()</span> {</span>\n    console.log( <span class=\"hljs-built_in\">arguments</span> );\n}\n\nshowargs(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);</code><ul class=\"pre-numbering\" style></ul></pre>\n<a id=\"more\"></a>\n<p>下面我们用console.log的方式，将arguments对象输出到控制台，这里不得不说一句，chrome的console工具好用得不得了（我不是来打广告的）。</p>\n\n<p>这里我们可以看到arguments对象将我传入的五个参数以数组的形式保存在里面，还有保存了我传入函数的实参的个数（length）。而且我们可以看到arguments对象的 ==<em>_ proto _</em>== 是指向object的，这也说明了他是个类数组对象，而不是一个数组。</p>\n\n<p>有了这个对象我们以后写函数的时候，就不用给所有的形参指定参数名，然后通过参数名的方式获取参数了，我们可以直接使用arguments对象来获取实参，这样是不是方便了很多呢。 <br>\n有些语言在我们给函数指定了参数名之后，当调用函数时，会判断当前传入的参数是否与函数定义的参数个数相等，不相等就会报错，但是灵活的js（不是我说，js是真的灵活）并不会验证传递给函数的参数个数是否等于函数定义的参数个数。所以为了装逼（代码的简洁度），我们使用arguments调用参数可以不混淆不同函数之间的参数名。另外为了装逼（代码的严整度），我们也能用arguments来判断当前传入参数的个数是否与我们需要的数量一致。</p>\n\n<p>下面举个栗子：</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">()</span> {</span>\n    <span class=\"hljs-keyword\">if</span>( <span class=\"hljs-built_in\">arguments</span>.length == <span class=\"hljs-number\">2</span> ){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>];\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'传入参数不合法'</span>;\n    }\n}\n\nconsole.log( add(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );\nconsole.log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );</code><ul class=\"pre-numbering\" style></ul></pre>\n> 5\n\n> 传入参数不合法\n\n<p>最后我们还可以看到arguments还有一个叫做callee的属性，这个属性是表示的是当前函数的一个引用，简单点说，这个属性里面存储的我们调用的这个函数的代码，实在无法理解的时候，又到了console.log大显身手的时候了。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showcallee</span><span class=\"hljs-params\">()</span> {</span>\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'这里是代码'</span>;\n    <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">'这是另一段代码'</span>;\n    <span class=\"hljs-keyword\">var</span> c = a + b;\n\n    console.log(<span class=\"hljs-built_in\">arguments</span>.callee);\n\n    <span class=\"hljs-keyword\">return</span> c;\n}\nshowcallee();</code><ul class=\"pre-numbering\" style></ul></pre>\n\n<blockquote>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ƒ showcallee() &#123;</span><br><span class=\"line\">&gt;     var a = &apos;这里是代码&apos;;</span><br><span class=\"line\">&gt;     var b = &apos;这是另一段代码&apos;;</span><br><span class=\"line\">&gt;     var c = a + b;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     console.log(arguments.callee);</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     return c;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>看到结果的你是不是和我一样惊呆了呢，这不就是我写的代码吗，arguments.callee完完整整的把这个函数的这段代码返回了。</p>\n\n<hr>\n\n\n\n<h2 id=\"arguments的一些妙用\"><a name=\"t2\"></a>arguments的一些妙用</h2>\n\n<p><strong>1.利用arguments实现方法的重载</strong></p>\n\n<p>下面我们利用arguments对象来实现一个参数相加的函数，不论传入多少参数都行，将传入的参数相加后返回。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs scilab has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">()</span> {</span>\n    var len = <span class=\"hljs-transposed_variable\">arguments.</span><span class=\"hljs-built_in\">length</span>,\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(;len--;){\n        <span class=\"hljs-built_in\">sum</span> += arguments<span class=\"hljs-matrix\">[len]</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>;\n}\n\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );   <span class=\"hljs-comment\">//6</span>\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>) );     <span class=\"hljs-comment\">//4</span>\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>) );   <span class=\"hljs-comment\">//26</span></code><ul class=\"pre-numbering\" style></ul></pre>\n\n<p>由于js是一种弱类型的语言，没有重载机制，当我们重写函数时，会将原来的函数直接覆盖，这里我们能利用arguments，来判断传入的实参类型与数量进行不同的操作，然后返回不同的数值。</p>\n\n<p><strong>2.利用arguments.callee实现递归</strong></p>\n\n<p>先来看看之前我们是怎么实现递归的，这是一个结算阶乘的函数</p>\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs livecodeserver has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">factorial</span>(<span class=\"hljs-title\">num</span>) { </span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">num</span>&lt;=<span class=\"hljs-number\">1</span>) { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-number\">1</span>; \n    }<span class=\"hljs-keyword\">else</span> { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-built_in\">num</span> * factorial(<span class=\"hljs-built_in\">num</span>-<span class=\"hljs-number\">1</span>); \n    } \n} </code><ul class=\"pre-numbering\" style></ul></pre>\n\n<p>但是当这个函数变成了一个匿名函数时，我们就可以利用callee来递归这个函数。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs livecodeserver has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">factorial</span>(<span class=\"hljs-title\">num</span>) { </span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">num</span>&lt;=<span class=\"hljs-number\">1</span>) { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-number\">1</span>; \n    }<span class=\"hljs-keyword\">else</span> { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-built_in\">num</span> * arguments.callee(<span class=\"hljs-built_in\">num</span>-<span class=\"hljs-number\">1</span>); \n    } \n} </code><ul class=\"pre-numbering\" style></ul></pre>\n\n<p></p><p>这个方法虽然好用，但是有一点值得注意，ECMAScript4中为了限制js的灵活度，让js变得严格，新增了严格模式，在严格模式中我们被禁止不使用var来直接声明一个全局变量，当然这不是重点，重点是arguments.callee这个属性也被禁止了。不过这都不是事儿，ES6为我们新增了很多好用的变量声明方式和新的语法糖，作为一个时髦的前端，我们赶紧学习一些ES6的新语法吧。</p>            <p></p>\n","site":{"data":{}},"excerpt":"<p><article><br>        <div id=\"article_content\" class=\"article_content clearfix csdn-tracking-statistics\" data-pid=\"blog\" data-mod=\"popu_307\" data-dsm=\"post\"><br>                    <div class=\"markdown_views\"><br>                <h2 id=\"类数组对象arguments\"><a name=\"t0\"></a>类数组对象：arguments</h2></div></div></article></p>\n<p>总所周知，js是一门相当灵活的语言。当我们在js中在调用一个函数的时候，我们经常会给这个函数传递一些参数，js把传入到这个函数的全部参数存储在一个叫做arguments的东西里面，那么这到底是什么东西？</p>\n\n<p>在js中万物皆对象，甚至数组字符串函数都是对象。所以这个叫做arguments的东西也是个对象，而且是一个特殊的对象，它的属性名是按照传入参数的序列来的，第1个参数的属性名是’0’，第2个参数的属性名是’1’，以此类推，并且它还有length属性，存储的是当前传入函数参数的个数，很多时候我们把这种对象叫做类数组对象。类数组对象和数组都是对象这个妈生的，但是数组是大哥比类数组对象多了很多其他的玩具(方法)，类数组对象只是长得很像数组的弟弟而已。</p>\n\n<p>慢着，刚刚不是说数组也是对象吗，现在这个类数组对象又是什么？ 没办法，js就是这么的灵活。这个类数组对象不仅存储给函数传入的参数，也具有一些其他的属性，等下会一一道来。</p>\n\n<p>因为类数组对象和数组有很多的共性，所以我们经常可以用call方法，让类数组对象也使用的数组的一些方法，就是让这个弟弟去玩哥哥的玩具，比如……，还是不扯远了，这篇文章只是说什么是arguments，想知道更多关于对象如何借调数组方法的话，请参考这篇文章。</p>\n\n<hr>\n\n\n\n<h2 id=\"arguments的属性\"><a name=\"t1\"></a>arguments的属性</h2>\n\n<p>接下来我们来看看arguments对象里面到底有些什么东西，是骡子是马拉出来溜溜。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showargs</span><span class=\"hljs-params\">()</span> {</span>\n    console.log( <span class=\"hljs-built_in\">arguments</span> );\n}\n\nshowargs(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);</code><ul class=\"pre-numbering\" style></ul></pre>","more":"<p>下面我们用console.log的方式，将arguments对象输出到控制台，这里不得不说一句，chrome的console工具好用得不得了（我不是来打广告的）。</p>\n\n<p>这里我们可以看到arguments对象将我传入的五个参数以数组的形式保存在里面，还有保存了我传入函数的实参的个数（length）。而且我们可以看到arguments对象的 ==<em>_ proto _</em>== 是指向object的，这也说明了他是个类数组对象，而不是一个数组。</p>\n\n<p>有了这个对象我们以后写函数的时候，就不用给所有的形参指定参数名，然后通过参数名的方式获取参数了，我们可以直接使用arguments对象来获取实参，这样是不是方便了很多呢。 <br>\n有些语言在我们给函数指定了参数名之后，当调用函数时，会判断当前传入的参数是否与函数定义的参数个数相等，不相等就会报错，但是灵活的js（不是我说，js是真的灵活）并不会验证传递给函数的参数个数是否等于函数定义的参数个数。所以为了装逼（代码的简洁度），我们使用arguments调用参数可以不混淆不同函数之间的参数名。另外为了装逼（代码的严整度），我们也能用arguments来判断当前传入参数的个数是否与我们需要的数量一致。</p>\n\n<p>下面举个栗子：</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">()</span> {</span>\n    <span class=\"hljs-keyword\">if</span>( <span class=\"hljs-built_in\">arguments</span>.length == <span class=\"hljs-number\">2</span> ){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>];\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'传入参数不合法'</span>;\n    }\n}\n\nconsole.log( add(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );\nconsole.log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );</code><ul class=\"pre-numbering\" style></ul></pre>\n> 5\n\n> 传入参数不合法\n\n<p>最后我们还可以看到arguments还有一个叫做callee的属性，这个属性是表示的是当前函数的一个引用，简单点说，这个属性里面存储的我们调用的这个函数的代码，实在无法理解的时候，又到了console.log大显身手的时候了。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs javascript has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showcallee</span><span class=\"hljs-params\">()</span> {</span>\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'这里是代码'</span>;\n    <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">'这是另一段代码'</span>;\n    <span class=\"hljs-keyword\">var</span> c = a + b;\n\n    console.log(<span class=\"hljs-built_in\">arguments</span>.callee);\n\n    <span class=\"hljs-keyword\">return</span> c;\n}\nshowcallee();</code><ul class=\"pre-numbering\" style></ul></pre>\n\n<blockquote>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ƒ showcallee() &#123;</span><br><span class=\"line\">&gt;     var a = &apos;这里是代码&apos;;</span><br><span class=\"line\">&gt;     var b = &apos;这是另一段代码&apos;;</span><br><span class=\"line\">&gt;     var c = a + b;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     console.log(arguments.callee);</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;     return c;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>看到结果的你是不是和我一样惊呆了呢，这不就是我写的代码吗，arguments.callee完完整整的把这个函数的这段代码返回了。</p>\n\n<hr>\n\n\n\n<h2 id=\"arguments的一些妙用\"><a name=\"t2\"></a>arguments的一些妙用</h2>\n\n<p><strong>1.利用arguments实现方法的重载</strong></p>\n\n<p>下面我们利用arguments对象来实现一个参数相加的函数，不论传入多少参数都行，将传入的参数相加后返回。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs scilab has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">()</span> {</span>\n    var len = <span class=\"hljs-transposed_variable\">arguments.</span><span class=\"hljs-built_in\">length</span>,\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(;len--;){\n        <span class=\"hljs-built_in\">sum</span> += arguments<span class=\"hljs-matrix\">[len]</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>;\n}\n\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) );   <span class=\"hljs-comment\">//6</span>\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>) );     <span class=\"hljs-comment\">//4</span>\n<span class=\"hljs-transposed_variable\">console.</span>log( add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>) );   <span class=\"hljs-comment\">//26</span></code><ul class=\"pre-numbering\" style></ul></pre>\n\n<p>由于js是一种弱类型的语言，没有重载机制，当我们重写函数时，会将原来的函数直接覆盖，这里我们能利用arguments，来判断传入的实参类型与数量进行不同的操作，然后返回不同的数值。</p>\n\n<p><strong>2.利用arguments.callee实现递归</strong></p>\n\n<p>先来看看之前我们是怎么实现递归的，这是一个结算阶乘的函数</p>\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs livecodeserver has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">factorial</span>(<span class=\"hljs-title\">num</span>) { </span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">num</span>&lt;=<span class=\"hljs-number\">1</span>) { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-number\">1</span>; \n    }<span class=\"hljs-keyword\">else</span> { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-built_in\">num</span> * factorial(<span class=\"hljs-built_in\">num</span>-<span class=\"hljs-number\">1</span>); \n    } \n} </code><ul class=\"pre-numbering\" style></ul></pre>\n\n<p>但是当这个函数变成了一个匿名函数时，我们就可以利用callee来递归这个函数。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs livecodeserver has-numbering\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">factorial</span>(<span class=\"hljs-title\">num</span>) { </span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">num</span>&lt;=<span class=\"hljs-number\">1</span>) { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-number\">1</span>; \n    }<span class=\"hljs-keyword\">else</span> { \n        <span class=\"hljs-constant\">return</span> <span class=\"hljs-built_in\">num</span> * arguments.callee(<span class=\"hljs-built_in\">num</span>-<span class=\"hljs-number\">1</span>); \n    } \n} </code><ul class=\"pre-numbering\" style></ul></pre>\n\n<p></p><p>这个方法虽然好用，但是有一点值得注意，ECMAScript4中为了限制js的灵活度，让js变得严格，新增了严格模式，在严格模式中我们被禁止不使用var来直接声明一个全局变量，当然这不是重点，重点是arguments.callee这个属性也被禁止了。不过这都不是事儿，ES6为我们新增了很多好用的变量声明方式和新的语法糖，作为一个时髦的前端，我们赶紧学习一些ES6的新语法吧。</p>            <p></p>"},{"title":"重新思考setTimeout(一)","toc":true,"_content":"## 前言：\n\n浏览器事件循环经典题目:\n```js\nfor (var i=0; i<5; i++) {\n    setTimeout( function timer() {\n        console.log(new Date, i)\n    }, 1000);\n}\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\n```\n\n解析： 根据setTimeout定义的操作在函数调用栈清空之后才会执行的特点，for循环里定义了5个setTimeout操作。而等待1秒后，任务队列里的setTimeout开始依次执行时，for循环的i值，已经先一步变成了5。因为任务队列推到函数调用栈执行的时间可以忽略不记（毫秒级），所以打印的GMT时间（精确到秒）和i的值都是相同的。\n\n<!--more-->\n解决这个问题有三种方法：\n\n1. 使用闭包\n2. 使用let定义变量 i\n3. 使用setTimeOut的第三个参数，将第三个参数作为setTimeout回调函数。\n\n## 闭包法：\n\n闭包可以将外层引用保存在内存中，借助闭包的特性，每次循环时，将i值保存在一个闭包中，当setTimeout中定义的操作执行时，则访问对应闭包保存的i值。\n\n而我们知道在函数中闭包判定的准则，即执行时是否在内部定义的函数中访问了上层作用域的变量。因此我们需要包裹一层自执行函数为闭包的形成提供条件。\n\n具体代码，如下所示：\n```js\nfor (var i=0; i<5; i++) { \n    (function(i) {\n        setTimeout( function timer() {\n            console.log(i);\n        }, i*1000 );\n    })(i)\n}\n```\n代码主要通过使用**自执行函数提供闭包条件**并将**传入i的值保存在闭包**中实现的。\n\n如下图所示，我们可以通过在Chrome中打断点查看闭包的值\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/xTvjaK.png)\n\n## 使用let：\n\n在for循环中使用let声明循环因子时，不仅将循环因子i绑定到了for循环的块级作用域中，还保证了每次迭代都会对i进行重新赋值。\n\n使用let的代码如下：\n```js\nfor (let i=0; i<5; i++) {\n    setTimeout( function timer() {\n        console.log(new Date, i);\n    }, 1000);\n}\n```\n\n每次迭代，i的绑定和赋值可以等价下面的代码：\n\n```js\n{\n  let j\n  for (j=0; j<5; j++) {\n    let i=j;\n    // some code\n  }\n}\n\n```\n## 使用setTimeOut的第三个参数：\n\nsetTimeOut可以有多个参数，第一个参数是回调函数，第二个参数是回调函数被推向回调队列的时间，多于两个的参数将作为回调函数的参数。\n\n```js\nfor (var i=0; i<5; i++) {\n    setTimeout(function timer(v) {\n        console.log(new Date, v);\n    }, i*1000, i);\n}\n```\n使用setTimeOut的第三个参数可以让回调函数避免引用同一个参数，解决了前言中存在的问题\n","source":"_posts/重新思考setTimeout--1.md","raw":"---\ntitle: 重新思考setTimeout(一)\ntags:  \n- JS\n- 重新思考setTimeout\n- 事件循环\ntoc: true\n---\n## 前言：\n\n浏览器事件循环经典题目:\n```js\nfor (var i=0; i<5; i++) {\n    setTimeout( function timer() {\n        console.log(new Date, i)\n    }, 1000);\n}\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\n```\n\n解析： 根据setTimeout定义的操作在函数调用栈清空之后才会执行的特点，for循环里定义了5个setTimeout操作。而等待1秒后，任务队列里的setTimeout开始依次执行时，for循环的i值，已经先一步变成了5。因为任务队列推到函数调用栈执行的时间可以忽略不记（毫秒级），所以打印的GMT时间（精确到秒）和i的值都是相同的。\n\n<!--more-->\n解决这个问题有三种方法：\n\n1. 使用闭包\n2. 使用let定义变量 i\n3. 使用setTimeOut的第三个参数，将第三个参数作为setTimeout回调函数。\n\n## 闭包法：\n\n闭包可以将外层引用保存在内存中，借助闭包的特性，每次循环时，将i值保存在一个闭包中，当setTimeout中定义的操作执行时，则访问对应闭包保存的i值。\n\n而我们知道在函数中闭包判定的准则，即执行时是否在内部定义的函数中访问了上层作用域的变量。因此我们需要包裹一层自执行函数为闭包的形成提供条件。\n\n具体代码，如下所示：\n```js\nfor (var i=0; i<5; i++) { \n    (function(i) {\n        setTimeout( function timer() {\n            console.log(i);\n        }, i*1000 );\n    })(i)\n}\n```\n代码主要通过使用**自执行函数提供闭包条件**并将**传入i的值保存在闭包**中实现的。\n\n如下图所示，我们可以通过在Chrome中打断点查看闭包的值\n\n![](https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/xTvjaK.png)\n\n## 使用let：\n\n在for循环中使用let声明循环因子时，不仅将循环因子i绑定到了for循环的块级作用域中，还保证了每次迭代都会对i进行重新赋值。\n\n使用let的代码如下：\n```js\nfor (let i=0; i<5; i++) {\n    setTimeout( function timer() {\n        console.log(new Date, i);\n    }, 1000);\n}\n```\n\n每次迭代，i的绑定和赋值可以等价下面的代码：\n\n```js\n{\n  let j\n  for (j=0; j<5; j++) {\n    let i=j;\n    // some code\n  }\n}\n\n```\n## 使用setTimeOut的第三个参数：\n\nsetTimeOut可以有多个参数，第一个参数是回调函数，第二个参数是回调函数被推向回调队列的时间，多于两个的参数将作为回调函数的参数。\n\n```js\nfor (var i=0; i<5; i++) {\n    setTimeout(function timer(v) {\n        console.log(new Date, v);\n    }, i*1000, i);\n}\n```\n使用setTimeOut的第三个参数可以让回调函数避免引用同一个参数，解决了前言中存在的问题\n","slug":"重新思考setTimeout--1","published":1,"date":"2019-12-19T15:52:56.160Z","updated":"2019-12-19T15:52:56.161Z","_id":"ck4cwgnjb003uckuk5hfvkrnk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>浏览器事件循环经典题目:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>, i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>解析： 根据setTimeout定义的操作在函数调用栈清空之后才会执行的特点，for循环里定义了5个setTimeout操作。而等待1秒后，任务队列里的setTimeout开始依次执行时，for循环的i值，已经先一步变成了5。因为任务队列推到函数调用栈执行的时间可以忽略不记（毫秒级），所以打印的GMT时间（精确到秒）和i的值都是相同的。</p>\n<a id=\"more\"></a>\n<p>解决这个问题有三种方法：</p>\n<ol>\n<li>使用闭包</li>\n<li>使用let定义变量 i</li>\n<li>使用setTimeOut的第三个参数，将第三个参数作为setTimeout回调函数。</li>\n</ol>\n<h2 id=\"闭包法：\"><a href=\"#闭包法：\" class=\"headerlink\" title=\"闭包法：\"></a>闭包法：</h2><p>闭包可以将外层引用保存在内存中，借助闭包的特性，每次循环时，将i值保存在一个闭包中，当setTimeout中定义的操作执行时，则访问对应闭包保存的i值。</p>\n<p>而我们知道在函数中闭包判定的准则，即执行时是否在内部定义的函数中访问了上层作用域的变量。因此我们需要包裹一层自执行函数为闭包的形成提供条件。</p>\n<p>具体代码，如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">        &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码主要通过使用<strong>自执行函数提供闭包条件</strong>并将<strong>传入i的值保存在闭包</strong>中实现的。</p>\n<p>如下图所示，我们可以通过在Chrome中打断点查看闭包的值</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/xTvjaK.png\" alt></p>\n<h2 id=\"使用let：\"><a href=\"#使用let：\" class=\"headerlink\" title=\"使用let：\"></a>使用let：</h2><p>在for循环中使用let声明循环因子时，不仅将循环因子i绑定到了for循环的块级作用域中，还保证了每次迭代都会对i进行重新赋值。</p>\n<p>使用let的代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>, i);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每次迭代，i的绑定和赋值可以等价下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> j</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">5</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i=j;</span><br><span class=\"line\">    <span class=\"comment\">// some code</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用setTimeOut的第三个参数：\"><a href=\"#使用setTimeOut的第三个参数：\" class=\"headerlink\" title=\"使用setTimeOut的第三个参数：\"></a>使用setTimeOut的第三个参数：</h2><p>setTimeOut可以有多个参数，第一个参数是回调函数，第二个参数是回调函数被推向回调队列的时间，多于两个的参数将作为回调函数的参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>, v);</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">1000</span>, i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用setTimeOut的第三个参数可以让回调函数避免引用同一个参数，解决了前言中存在的问题</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>浏览器事件循环经典题目:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>, i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br><span class=\"line\">VM84:<span class=\"number\">3</span> Wed Oct <span class=\"number\">09</span> <span class=\"number\">2019</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">47</span> GMT+<span class=\"number\">0800</span> (中国标准时间) <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>解析： 根据setTimeout定义的操作在函数调用栈清空之后才会执行的特点，for循环里定义了5个setTimeout操作。而等待1秒后，任务队列里的setTimeout开始依次执行时，for循环的i值，已经先一步变成了5。因为任务队列推到函数调用栈执行的时间可以忽略不记（毫秒级），所以打印的GMT时间（精确到秒）和i的值都是相同的。</p>","more":"<p>解决这个问题有三种方法：</p>\n<ol>\n<li>使用闭包</li>\n<li>使用let定义变量 i</li>\n<li>使用setTimeOut的第三个参数，将第三个参数作为setTimeout回调函数。</li>\n</ol>\n<h2 id=\"闭包法：\"><a href=\"#闭包法：\" class=\"headerlink\" title=\"闭包法：\"></a>闭包法：</h2><p>闭包可以将外层引用保存在内存中，借助闭包的特性，每次循环时，将i值保存在一个闭包中，当setTimeout中定义的操作执行时，则访问对应闭包保存的i值。</p>\n<p>而我们知道在函数中闭包判定的准则，即执行时是否在内部定义的函数中访问了上层作用域的变量。因此我们需要包裹一层自执行函数为闭包的形成提供条件。</p>\n<p>具体代码，如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">        &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码主要通过使用<strong>自执行函数提供闭包条件</strong>并将<strong>传入i的值保存在闭包</strong>中实现的。</p>\n<p>如下图所示，我们可以通过在Chrome中打断点查看闭包的值</p>\n<p><img src=\"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/xTvjaK.png\" alt></p>\n<h2 id=\"使用let：\"><a href=\"#使用let：\" class=\"headerlink\" title=\"使用let：\"></a>使用let：</h2><p>在for循环中使用let声明循环因子时，不仅将循环因子i绑定到了for循环的块级作用域中，还保证了每次迭代都会对i进行重新赋值。</p>\n<p>使用let的代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>, i);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每次迭代，i的绑定和赋值可以等价下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> j</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">5</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i=j;</span><br><span class=\"line\">    <span class=\"comment\">// some code</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用setTimeOut的第三个参数：\"><a href=\"#使用setTimeOut的第三个参数：\" class=\"headerlink\" title=\"使用setTimeOut的第三个参数：\"></a>使用setTimeOut的第三个参数：</h2><p>setTimeOut可以有多个参数，第一个参数是回调函数，第二个参数是回调函数被推向回调队列的时间，多于两个的参数将作为回调函数的参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>, v);</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">1000</span>, i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用setTimeOut的第三个参数可以让回调函数避免引用同一个参数，解决了前言中存在的问题</p>"},{"title":"防抖和节流总结","toc":true,"_content":"\n### 前言：\n\n  防抖和节流是项目中常用的知识点，可能平时不太能引起注意，但是防抖和节流肯定是项目事件优化必备的一项技术。\n### 防抖：\n**首先，什么是防抖？**\n\n  防抖的核心思想就是在一定时间內（比如250ms）事件被多次触发的情况下，只会执行最后一次事件的触发，然后回调。\n\n  这个最常用在Input输入（keyup事件）和button（onclick）事件上，我们定义一个时间间隔，只要在这个时间间隔內多次触发，我们就只传最后一次的回调。试想如果这是个异步操作的化，他将节省很多不必要的拉取数据的操作。\n\n#### 代码实现\n```js\n  function debounce(fn, delay){\n    let timeout;\n    return function(){\n      let context = this;\n      let args = arguments;\n      clearTimeout(timeout)\n      timeout = setTimeout(function(){\n        fn.apply(context,args);\n      },delay)\n    }\n  }\n  ```\n  此处如果setTimeout使用ES6的语法写函数的话就不需要`context = this;`,肩头函数可以保证函数绑定在DOM上\nDemo: https://codepen.io/ustc-han/pen/MMLNqb\n\n### 节流：\n  什么是节流？\n\n  节流就是事件每隔一段时间触发一次，在这个时间段内的事件不会被触发。比如说1000ms是时间间隔，1000ms的时候触发了，那么下次触发只能是2000ms之后。\n\n  #### 代码实现\n  ```js\n  function throttle(fn, delay){\n  let pre = 0;\n  return function() {\n    const args = arguments;\n    const now = Date.now();\n    if(now - pre > delay) {\n      fn.apply(this, args);\n      pre = now;\n    }\n  }\n}\n```\n\n  #### 代码实现\n  Demo: https://codepen.io/ustc-han/pen/WqmNvM\n\n参考链接：\nhttps://zhuanlan.zhihu.com/p/38313717\n        https://juejin.im/post/5b7b88d46fb9a019e9767405#heading-4\n","source":"_posts/防抖和节流.md","raw":"---\ntitle: 防抖和节流总结\ntags:  \n- JS\n- 防抖\n- 节流\ntoc: true\n---\n\n### 前言：\n\n  防抖和节流是项目中常用的知识点，可能平时不太能引起注意，但是防抖和节流肯定是项目事件优化必备的一项技术。\n### 防抖：\n**首先，什么是防抖？**\n\n  防抖的核心思想就是在一定时间內（比如250ms）事件被多次触发的情况下，只会执行最后一次事件的触发，然后回调。\n\n  这个最常用在Input输入（keyup事件）和button（onclick）事件上，我们定义一个时间间隔，只要在这个时间间隔內多次触发，我们就只传最后一次的回调。试想如果这是个异步操作的化，他将节省很多不必要的拉取数据的操作。\n\n#### 代码实现\n```js\n  function debounce(fn, delay){\n    let timeout;\n    return function(){\n      let context = this;\n      let args = arguments;\n      clearTimeout(timeout)\n      timeout = setTimeout(function(){\n        fn.apply(context,args);\n      },delay)\n    }\n  }\n  ```\n  此处如果setTimeout使用ES6的语法写函数的话就不需要`context = this;`,肩头函数可以保证函数绑定在DOM上\nDemo: https://codepen.io/ustc-han/pen/MMLNqb\n\n### 节流：\n  什么是节流？\n\n  节流就是事件每隔一段时间触发一次，在这个时间段内的事件不会被触发。比如说1000ms是时间间隔，1000ms的时候触发了，那么下次触发只能是2000ms之后。\n\n  #### 代码实现\n  ```js\n  function throttle(fn, delay){\n  let pre = 0;\n  return function() {\n    const args = arguments;\n    const now = Date.now();\n    if(now - pre > delay) {\n      fn.apply(this, args);\n      pre = now;\n    }\n  }\n}\n```\n\n  #### 代码实现\n  Demo: https://codepen.io/ustc-han/pen/WqmNvM\n\n参考链接：\nhttps://zhuanlan.zhihu.com/p/38313717\n        https://juejin.im/post/5b7b88d46fb9a019e9767405#heading-4\n","slug":"防抖和节流","published":1,"date":"2019-12-19T15:52:56.162Z","updated":"2019-12-19T15:52:56.162Z","_id":"ck4cwgnjc003wckuk1wmh4b5o","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p>  防抖和节流是项目中常用的知识点，可能平时不太能引起注意，但是防抖和节流肯定是项目事件优化必备的一项技术。</p>\n<h3 id=\"防抖：\"><a href=\"#防抖：\" class=\"headerlink\" title=\"防抖：\"></a>防抖：</h3><p><strong>首先，什么是防抖？</strong></p>\n<p>  防抖的核心思想就是在一定时间內（比如250ms）事件被多次触发的情况下，只会执行最后一次事件的触发，然后回调。</p>\n<p>  这个最常用在Input输入（keyup事件）和button（onclick）事件上，我们定义一个时间间隔，只要在这个时间间隔內多次触发，我们就只传最后一次的回调。试想如果这是个异步操作的化，他将节省很多不必要的拉取数据的操作。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    clearTimeout(timeout)</span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      fn.apply(context,args);</span><br><span class=\"line\">    &#125;,delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  此处如果setTimeout使用ES6的语法写函数的话就不需要<code>context = this;</code>,肩头函数可以保证函数绑定在DOM上<br>Demo: <a href=\"https://codepen.io/ustc-han/pen/MMLNqb\" target=\"_blank\" rel=\"noopener\">https://codepen.io/ustc-han/pen/MMLNqb</a></p>\n<h3 id=\"节流：\"><a href=\"#节流：\" class=\"headerlink\" title=\"节流：\"></a>节流：</h3><p>  什么是节流？</p>\n<p>  节流就是事件每隔一段时间触发一次，在这个时间段内的事件不会被触发。比如说1000ms是时间间隔，1000ms的时候触发了，那么下次触发只能是2000ms之后。</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, delay</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pre = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now - pre &gt; delay) &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      pre = now;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>  Demo: <a href=\"https://codepen.io/ustc-han/pen/WqmNvM\" target=\"_blank\" rel=\"noopener\">https://codepen.io/ustc-han/pen/WqmNvM</a></p>\n<p>参考链接：<br><a href=\"https://zhuanlan.zhihu.com/p/38313717\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/38313717</a><br>        <a href=\"https://juejin.im/post/5b7b88d46fb9a019e9767405#heading-4\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b7b88d46fb9a019e9767405#heading-4</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p>  防抖和节流是项目中常用的知识点，可能平时不太能引起注意，但是防抖和节流肯定是项目事件优化必备的一项技术。</p>\n<h3 id=\"防抖：\"><a href=\"#防抖：\" class=\"headerlink\" title=\"防抖：\"></a>防抖：</h3><p><strong>首先，什么是防抖？</strong></p>\n<p>  防抖的核心思想就是在一定时间內（比如250ms）事件被多次触发的情况下，只会执行最后一次事件的触发，然后回调。</p>\n<p>  这个最常用在Input输入（keyup事件）和button（onclick）事件上，我们定义一个时间间隔，只要在这个时间间隔內多次触发，我们就只传最后一次的回调。试想如果这是个异步操作的化，他将节省很多不必要的拉取数据的操作。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    clearTimeout(timeout)</span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      fn.apply(context,args);</span><br><span class=\"line\">    &#125;,delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  此处如果setTimeout使用ES6的语法写函数的话就不需要<code>context = this;</code>,肩头函数可以保证函数绑定在DOM上<br>Demo: <a href=\"https://codepen.io/ustc-han/pen/MMLNqb\" target=\"_blank\" rel=\"noopener\">https://codepen.io/ustc-han/pen/MMLNqb</a></p>\n<h3 id=\"节流：\"><a href=\"#节流：\" class=\"headerlink\" title=\"节流：\"></a>节流：</h3><p>  什么是节流？</p>\n<p>  节流就是事件每隔一段时间触发一次，在这个时间段内的事件不会被触发。比如说1000ms是时间间隔，1000ms的时候触发了，那么下次触发只能是2000ms之后。</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, delay</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pre = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now - pre &gt; delay) &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      pre = now;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>  Demo: <a href=\"https://codepen.io/ustc-han/pen/WqmNvM\" target=\"_blank\" rel=\"noopener\">https://codepen.io/ustc-han/pen/WqmNvM</a></p>\n<p>参考链接：<br><a href=\"https://zhuanlan.zhihu.com/p/38313717\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/38313717</a><br>        <a href=\"https://juejin.im/post/5b7b88d46fb9a019e9767405#heading-4\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b7b88d46fb9a019e9767405#heading-4</a></p>\n"},{"title":"重新思考setTimeout(二)--setTimeout与setInterval","toc":true,"_content":"\n## setTimeout 和 setInterval功能\n\n`setTimeout()`会在确定的时间调用回调函数，且回调函数只会执行一次。\n\n`setInterval()`会重复调用一个函数，在每次调用之间具有固定的时间延迟。\n\n## setTimeout`模仿`setInterval`\n\n为什么使用`setTimeout`模仿`setInterval`呢？这需要通过事件循环机制来解释，如果不清楚的话可以点击查看[事件循环机制](https://thinkbucket.github.io/docsite/docs/javascript/8.async-programming/event-loop)和[浏览器内核](https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine)相关内容。\n\n由于`setInterval`或`setTimeout`不是JS中定义的，他们并不会在JS引擎线程中直接执行。当代码执行到`setInterval`或`setTimeout`时，事件循环机制会为`setTimeout`或`setInterval`开一个定时器线程并开始计时，等定义的时间过后，将回调函数放到回调队列里，等到函数调用栈空（`JS`引擎线程空闲）时，将回调函数放入函数调用栈（使用JS引擎线程）执行。\n<!--more-->\n这种机制导致`setInterval`两次回调函数开始执行的时间间隔总会小于设定的间隔。如下所示：\n```\n.    *    *    *    *    *    *\n     [-]  [-]  [-]  [-]  [-]  [-]\n```\n我们假设其中的`.`代表`setInterval`开始执行，`*`表示回调函数被触发， `[-]`表示回调函数的执行时间。很显然相邻的两次回调函数开始执行的时间会小于我们设定的interval。取个极限，假设回调执行**999ms,interval为1000ms，两次回调的间隔只用1ms**。很显然，使用setInterval很难满足两次回调函数执行间隔为固定为1000ms的需求。\n\n\n## 模拟后两者的区别\n\n使用`setTimeout`模仿`setInterval`代码对比如下：\n\n```js\nfunction tick() {\n    doStuff();\n    setTimeout(tick, 100);\n}\ntick();\n```\n\n```js\nfunction doStuff(){\n    // 此处为需要执行一段时间T的代码\n    doStuff();\n}\nsetInterVal(doStuff, 100);\n```\n我们假设`.`代表`setInterval`和`setTimeout`开始执行，`*`表示回调函数被触发，`[-]`表示回调函数的执行时间。两者区别如下\n\nTimeout:\n```\n.    *  .    *  .    *  .    *  .\n     [--]    [--]    [--]    [--]\n```\nTimeout执行周期：\n```\n100ms\n.    *  .\n     [--]\n```\nInterval:\n```\n.    *    *    *    *    *    *\n     [--] [--] [--] [--] [--] [--]\n```\nInterval执行周期：\n```\n 100ms\n *    *\n [--] \n```\n由上可知，当回调函数`doStuff()`执行的时间较长时，`setTimeout`的执行周期会变长（100 + T）,但是相邻回调函数还是可以保证设定间隔。\n\n对比`setInterval`可知：\n- 当`doStuff()`执行的时间忽略不计时，两者几乎是等价的；\n- 当`doStuff()`执行的时间小于100ms时，相邻回调函数间隔为（100-T）\n\n那么还有一种情况当`doStuff()`执行的时间大于100ms时,setInterval会怎么表现呢？\n\n### 函数回调执行时长大于设定时间\n\n对于`setTimeout`来说没啥问题，本身周期继续加长就行。\n\n对于`setInterval`来说，当下一次的回调函数入队时，会检测队列是否为空。如果不为空，则忽略本次回调。如果为空，将本次回调入队。\n\n我们假设下图中的`w`代表在队列中等待不能立即被执行的回调函数，`x`表示会被忽略的、不会执行的回调。具体如下图所示：\n\n```\n.    *    w    w    x    w    w    x\n     [------][------][------][------]\n```\n当`doStuff()`执行的时间长于间隔时，浏览器会为了让回调函数执行的更好而吃掉大量的内存，可能会影响页面的响应。\n\n## 小结\n- 当回调执行时间较短时，完全不许要使用`setTimeout`代替`setInterval`。\n\n- 另外当回调执行时间执行时间过长时，并不会造成队列的待执行回调堆积，不会产生因为队列堆积影响性能问题。\n\n- 如果要保证回调函数执行间隔可以使用`setTimeout`代替`setInterval`。如果实现动画，在兼容性允许的情况下，使用requestAnimationFrame是更好的选择。\n\n## 参考文章\n[setTimeout or setInterval?](https://stackoverflow.com/questions/729921/settimeout-or-setinterval)\n\n[为什么要用setTimeout模拟setInterval](https://juejin.im/post/5ca81370f265da308c199fe7)\n\n[你真的了解setTimeout和setInterVal吗](http://qingbob.com/difference-between-settimeout-setinterval/)\n","source":"_posts/重新思考setTimeout--2.md","raw":"---\ntitle: 重新思考setTimeout(二)--setTimeout与setInterval\ntags:  \n- JS\n- setTimeout\n- setInterval\n- 时间循环\ntoc: true\n---\n\n## setTimeout 和 setInterval功能\n\n`setTimeout()`会在确定的时间调用回调函数，且回调函数只会执行一次。\n\n`setInterval()`会重复调用一个函数，在每次调用之间具有固定的时间延迟。\n\n## setTimeout`模仿`setInterval`\n\n为什么使用`setTimeout`模仿`setInterval`呢？这需要通过事件循环机制来解释，如果不清楚的话可以点击查看[事件循环机制](https://thinkbucket.github.io/docsite/docs/javascript/8.async-programming/event-loop)和[浏览器内核](https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine)相关内容。\n\n由于`setInterval`或`setTimeout`不是JS中定义的，他们并不会在JS引擎线程中直接执行。当代码执行到`setInterval`或`setTimeout`时，事件循环机制会为`setTimeout`或`setInterval`开一个定时器线程并开始计时，等定义的时间过后，将回调函数放到回调队列里，等到函数调用栈空（`JS`引擎线程空闲）时，将回调函数放入函数调用栈（使用JS引擎线程）执行。\n<!--more-->\n这种机制导致`setInterval`两次回调函数开始执行的时间间隔总会小于设定的间隔。如下所示：\n```\n.    *    *    *    *    *    *\n     [-]  [-]  [-]  [-]  [-]  [-]\n```\n我们假设其中的`.`代表`setInterval`开始执行，`*`表示回调函数被触发， `[-]`表示回调函数的执行时间。很显然相邻的两次回调函数开始执行的时间会小于我们设定的interval。取个极限，假设回调执行**999ms,interval为1000ms，两次回调的间隔只用1ms**。很显然，使用setInterval很难满足两次回调函数执行间隔为固定为1000ms的需求。\n\n\n## 模拟后两者的区别\n\n使用`setTimeout`模仿`setInterval`代码对比如下：\n\n```js\nfunction tick() {\n    doStuff();\n    setTimeout(tick, 100);\n}\ntick();\n```\n\n```js\nfunction doStuff(){\n    // 此处为需要执行一段时间T的代码\n    doStuff();\n}\nsetInterVal(doStuff, 100);\n```\n我们假设`.`代表`setInterval`和`setTimeout`开始执行，`*`表示回调函数被触发，`[-]`表示回调函数的执行时间。两者区别如下\n\nTimeout:\n```\n.    *  .    *  .    *  .    *  .\n     [--]    [--]    [--]    [--]\n```\nTimeout执行周期：\n```\n100ms\n.    *  .\n     [--]\n```\nInterval:\n```\n.    *    *    *    *    *    *\n     [--] [--] [--] [--] [--] [--]\n```\nInterval执行周期：\n```\n 100ms\n *    *\n [--] \n```\n由上可知，当回调函数`doStuff()`执行的时间较长时，`setTimeout`的执行周期会变长（100 + T）,但是相邻回调函数还是可以保证设定间隔。\n\n对比`setInterval`可知：\n- 当`doStuff()`执行的时间忽略不计时，两者几乎是等价的；\n- 当`doStuff()`执行的时间小于100ms时，相邻回调函数间隔为（100-T）\n\n那么还有一种情况当`doStuff()`执行的时间大于100ms时,setInterval会怎么表现呢？\n\n### 函数回调执行时长大于设定时间\n\n对于`setTimeout`来说没啥问题，本身周期继续加长就行。\n\n对于`setInterval`来说，当下一次的回调函数入队时，会检测队列是否为空。如果不为空，则忽略本次回调。如果为空，将本次回调入队。\n\n我们假设下图中的`w`代表在队列中等待不能立即被执行的回调函数，`x`表示会被忽略的、不会执行的回调。具体如下图所示：\n\n```\n.    *    w    w    x    w    w    x\n     [------][------][------][------]\n```\n当`doStuff()`执行的时间长于间隔时，浏览器会为了让回调函数执行的更好而吃掉大量的内存，可能会影响页面的响应。\n\n## 小结\n- 当回调执行时间较短时，完全不许要使用`setTimeout`代替`setInterval`。\n\n- 另外当回调执行时间执行时间过长时，并不会造成队列的待执行回调堆积，不会产生因为队列堆积影响性能问题。\n\n- 如果要保证回调函数执行间隔可以使用`setTimeout`代替`setInterval`。如果实现动画，在兼容性允许的情况下，使用requestAnimationFrame是更好的选择。\n\n## 参考文章\n[setTimeout or setInterval?](https://stackoverflow.com/questions/729921/settimeout-or-setinterval)\n\n[为什么要用setTimeout模拟setInterval](https://juejin.im/post/5ca81370f265da308c199fe7)\n\n[你真的了解setTimeout和setInterVal吗](http://qingbob.com/difference-between-settimeout-setinterval/)\n","slug":"重新思考setTimeout--2","published":1,"date":"2019-12-19T15:52:56.161Z","updated":"2019-12-19T15:52:56.162Z","_id":"ck4cwgnje003zckukks1pvocb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"setTimeout-和-setInterval功能\"><a href=\"#setTimeout-和-setInterval功能\" class=\"headerlink\" title=\"setTimeout 和 setInterval功能\"></a>setTimeout 和 setInterval功能</h2><p><code>setTimeout()</code>会在确定的时间调用回调函数，且回调函数只会执行一次。</p>\n<p><code>setInterval()</code>会重复调用一个函数，在每次调用之间具有固定的时间延迟。</p>\n<h2 id=\"setTimeout模仿setInterval\"><a href=\"#setTimeout模仿setInterval\" class=\"headerlink\" title=\"setTimeout模仿setInterval`\"></a>setTimeout<code>模仿</code>setInterval`</h2><p>为什么使用<code>setTimeout</code>模仿<code>setInterval</code>呢？这需要通过事件循环机制来解释，如果不清楚的话可以点击查看<a href=\"https://thinkbucket.github.io/docsite/docs/javascript/8.async-programming/event-loop\" target=\"_blank\" rel=\"noopener\">事件循环机制</a>和<a href=\"https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine\" target=\"_blank\" rel=\"noopener\">浏览器内核</a>相关内容。</p>\n<p>由于<code>setInterval</code>或<code>setTimeout</code>不是JS中定义的，他们并不会在JS引擎线程中直接执行。当代码执行到<code>setInterval</code>或<code>setTimeout</code>时，事件循环机制会为<code>setTimeout</code>或<code>setInterval</code>开一个定时器线程并开始计时，等定义的时间过后，将回调函数放到回调队列里，等到函数调用栈空（<code>JS</code>引擎线程空闲）时，将回调函数放入函数调用栈（使用JS引擎线程）执行。<br><a id=\"more\"></a><br>这种机制导致<code>setInterval</code>两次回调函数开始执行的时间间隔总会小于设定的间隔。如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.    *    *    *    *    *    *</span><br><span class=\"line\">     [-]  [-]  [-]  [-]  [-]  [-]</span><br></pre></td></tr></table></figure></p>\n<p>我们假设其中的<code>.</code>代表<code>setInterval</code>开始执行，<code>*</code>表示回调函数被触发， <code>[-]</code>表示回调函数的执行时间。很显然相邻的两次回调函数开始执行的时间会小于我们设定的interval。取个极限，假设回调执行<strong>999ms,interval为1000ms，两次回调的间隔只用1ms</strong>。很显然，使用setInterval很难满足两次回调函数执行间隔为固定为1000ms的需求。</p>\n<h2 id=\"模拟后两者的区别\"><a href=\"#模拟后两者的区别\" class=\"headerlink\" title=\"模拟后两者的区别\"></a>模拟后两者的区别</h2><p>使用<code>setTimeout</code>模仿<code>setInterval</code>代码对比如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    doStuff();</span><br><span class=\"line\">    setTimeout(tick, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tick();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此处为需要执行一段时间T的代码</span></span><br><span class=\"line\">    doStuff();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setInterVal(doStuff, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>我们假设<code>.</code>代表<code>setInterval</code>和<code>setTimeout</code>开始执行，<code>*</code>表示回调函数被触发，<code>[-]</code>表示回调函数的执行时间。两者区别如下</p>\n<p>Timeout:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.    *  .    *  .    *  .    *  .</span><br><span class=\"line\">     [--]    [--]    [--]    [--]</span><br></pre></td></tr></table></figure></p>\n<p>Timeout执行周期：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100ms</span><br><span class=\"line\">.    *  .</span><br><span class=\"line\">     [--]</span><br></pre></td></tr></table></figure></p>\n<p>Interval:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.    *    *    *    *    *    *</span><br><span class=\"line\">     [--] [--] [--] [--] [--] [--]</span><br></pre></td></tr></table></figure></p>\n<p>Interval执行周期：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100ms</span><br><span class=\"line\">*    *</span><br><span class=\"line\">[--]</span><br></pre></td></tr></table></figure></p>\n<p>由上可知，当回调函数<code>doStuff()</code>执行的时间较长时，<code>setTimeout</code>的执行周期会变长（100 + T）,但是相邻回调函数还是可以保证设定间隔。</p>\n<p>对比<code>setInterval</code>可知：</p>\n<ul>\n<li>当<code>doStuff()</code>执行的时间忽略不计时，两者几乎是等价的；</li>\n<li>当<code>doStuff()</code>执行的时间小于100ms时，相邻回调函数间隔为（100-T）</li>\n</ul>\n<p>那么还有一种情况当<code>doStuff()</code>执行的时间大于100ms时,setInterval会怎么表现呢？</p>\n<h3 id=\"函数回调执行时长大于设定时间\"><a href=\"#函数回调执行时长大于设定时间\" class=\"headerlink\" title=\"函数回调执行时长大于设定时间\"></a>函数回调执行时长大于设定时间</h3><p>对于<code>setTimeout</code>来说没啥问题，本身周期继续加长就行。</p>\n<p>对于<code>setInterval</code>来说，当下一次的回调函数入队时，会检测队列是否为空。如果不为空，则忽略本次回调。如果为空，将本次回调入队。</p>\n<p>我们假设下图中的<code>w</code>代表在队列中等待不能立即被执行的回调函数，<code>x</code>表示会被忽略的、不会执行的回调。具体如下图所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.    *    w    w    x    w    w    x</span><br><span class=\"line\">     [------][------][------][------]</span><br></pre></td></tr></table></figure>\n<p>当<code>doStuff()</code>执行的时间长于间隔时，浏览器会为了让回调函数执行的更好而吃掉大量的内存，可能会影响页面的响应。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>当回调执行时间较短时，完全不许要使用<code>setTimeout</code>代替<code>setInterval</code>。</p>\n</li>\n<li><p>另外当回调执行时间执行时间过长时，并不会造成队列的待执行回调堆积，不会产生因为队列堆积影响性能问题。</p>\n</li>\n<li><p>如果要保证回调函数执行间隔可以使用<code>setTimeout</code>代替<code>setInterval</code>。如果实现动画，在兼容性允许的情况下，使用requestAnimationFrame是更好的选择。</p>\n</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://stackoverflow.com/questions/729921/settimeout-or-setinterval\" target=\"_blank\" rel=\"noopener\">setTimeout or setInterval?</a></p>\n<p><a href=\"https://juejin.im/post/5ca81370f265da308c199fe7\" target=\"_blank\" rel=\"noopener\">为什么要用setTimeout模拟setInterval</a></p>\n<p><a href=\"http://qingbob.com/difference-between-settimeout-setinterval/\" target=\"_blank\" rel=\"noopener\">你真的了解setTimeout和setInterVal吗</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"setTimeout-和-setInterval功能\"><a href=\"#setTimeout-和-setInterval功能\" class=\"headerlink\" title=\"setTimeout 和 setInterval功能\"></a>setTimeout 和 setInterval功能</h2><p><code>setTimeout()</code>会在确定的时间调用回调函数，且回调函数只会执行一次。</p>\n<p><code>setInterval()</code>会重复调用一个函数，在每次调用之间具有固定的时间延迟。</p>\n<h2 id=\"setTimeout模仿setInterval\"><a href=\"#setTimeout模仿setInterval\" class=\"headerlink\" title=\"setTimeout模仿setInterval`\"></a>setTimeout<code>模仿</code>setInterval`</h2><p>为什么使用<code>setTimeout</code>模仿<code>setInterval</code>呢？这需要通过事件循环机制来解释，如果不清楚的话可以点击查看<a href=\"https://thinkbucket.github.io/docsite/docs/javascript/8.async-programming/event-loop\" target=\"_blank\" rel=\"noopener\">事件循环机制</a>和<a href=\"https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine\" target=\"_blank\" rel=\"noopener\">浏览器内核</a>相关内容。</p>\n<p>由于<code>setInterval</code>或<code>setTimeout</code>不是JS中定义的，他们并不会在JS引擎线程中直接执行。当代码执行到<code>setInterval</code>或<code>setTimeout</code>时，事件循环机制会为<code>setTimeout</code>或<code>setInterval</code>开一个定时器线程并开始计时，等定义的时间过后，将回调函数放到回调队列里，等到函数调用栈空（<code>JS</code>引擎线程空闲）时，将回调函数放入函数调用栈（使用JS引擎线程）执行。<br>","more":"<br>这种机制导致<code>setInterval</code>两次回调函数开始执行的时间间隔总会小于设定的间隔。如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.    *    *    *    *    *    *</span><br><span class=\"line\">     [-]  [-]  [-]  [-]  [-]  [-]</span><br></pre></td></tr></table></figure></p>\n<p>我们假设其中的<code>.</code>代表<code>setInterval</code>开始执行，<code>*</code>表示回调函数被触发， <code>[-]</code>表示回调函数的执行时间。很显然相邻的两次回调函数开始执行的时间会小于我们设定的interval。取个极限，假设回调执行<strong>999ms,interval为1000ms，两次回调的间隔只用1ms</strong>。很显然，使用setInterval很难满足两次回调函数执行间隔为固定为1000ms的需求。</p>\n<h2 id=\"模拟后两者的区别\"><a href=\"#模拟后两者的区别\" class=\"headerlink\" title=\"模拟后两者的区别\"></a>模拟后两者的区别</h2><p>使用<code>setTimeout</code>模仿<code>setInterval</code>代码对比如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    doStuff();</span><br><span class=\"line\">    setTimeout(tick, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tick();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此处为需要执行一段时间T的代码</span></span><br><span class=\"line\">    doStuff();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setInterVal(doStuff, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>我们假设<code>.</code>代表<code>setInterval</code>和<code>setTimeout</code>开始执行，<code>*</code>表示回调函数被触发，<code>[-]</code>表示回调函数的执行时间。两者区别如下</p>\n<p>Timeout:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.    *  .    *  .    *  .    *  .</span><br><span class=\"line\">     [--]    [--]    [--]    [--]</span><br></pre></td></tr></table></figure></p>\n<p>Timeout执行周期：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100ms</span><br><span class=\"line\">.    *  .</span><br><span class=\"line\">     [--]</span><br></pre></td></tr></table></figure></p>\n<p>Interval:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.    *    *    *    *    *    *</span><br><span class=\"line\">     [--] [--] [--] [--] [--] [--]</span><br></pre></td></tr></table></figure></p>\n<p>Interval执行周期：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100ms</span><br><span class=\"line\">*    *</span><br><span class=\"line\">[--]</span><br></pre></td></tr></table></figure></p>\n<p>由上可知，当回调函数<code>doStuff()</code>执行的时间较长时，<code>setTimeout</code>的执行周期会变长（100 + T）,但是相邻回调函数还是可以保证设定间隔。</p>\n<p>对比<code>setInterval</code>可知：</p>\n<ul>\n<li>当<code>doStuff()</code>执行的时间忽略不计时，两者几乎是等价的；</li>\n<li>当<code>doStuff()</code>执行的时间小于100ms时，相邻回调函数间隔为（100-T）</li>\n</ul>\n<p>那么还有一种情况当<code>doStuff()</code>执行的时间大于100ms时,setInterval会怎么表现呢？</p>\n<h3 id=\"函数回调执行时长大于设定时间\"><a href=\"#函数回调执行时长大于设定时间\" class=\"headerlink\" title=\"函数回调执行时长大于设定时间\"></a>函数回调执行时长大于设定时间</h3><p>对于<code>setTimeout</code>来说没啥问题，本身周期继续加长就行。</p>\n<p>对于<code>setInterval</code>来说，当下一次的回调函数入队时，会检测队列是否为空。如果不为空，则忽略本次回调。如果为空，将本次回调入队。</p>\n<p>我们假设下图中的<code>w</code>代表在队列中等待不能立即被执行的回调函数，<code>x</code>表示会被忽略的、不会执行的回调。具体如下图所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.    *    w    w    x    w    w    x</span><br><span class=\"line\">     [------][------][------][------]</span><br></pre></td></tr></table></figure>\n<p>当<code>doStuff()</code>执行的时间长于间隔时，浏览器会为了让回调函数执行的更好而吃掉大量的内存，可能会影响页面的响应。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>当回调执行时间较短时，完全不许要使用<code>setTimeout</code>代替<code>setInterval</code>。</p>\n</li>\n<li><p>另外当回调执行时间执行时间过长时，并不会造成队列的待执行回调堆积，不会产生因为队列堆积影响性能问题。</p>\n</li>\n<li><p>如果要保证回调函数执行间隔可以使用<code>setTimeout</code>代替<code>setInterval</code>。如果实现动画，在兼容性允许的情况下，使用requestAnimationFrame是更好的选择。</p>\n</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://stackoverflow.com/questions/729921/settimeout-or-setinterval\" target=\"_blank\" rel=\"noopener\">setTimeout or setInterval?</a></p>\n<p><a href=\"https://juejin.im/post/5ca81370f265da308c199fe7\" target=\"_blank\" rel=\"noopener\">为什么要用setTimeout模拟setInterval</a></p>\n<p><a href=\"http://qingbob.com/difference-between-settimeout-setinterval/\" target=\"_blank\" rel=\"noopener\">你真的了解setTimeout和setInterVal吗</a></p>"},{"title":"节流-滚动加载","_content":"\n## 前言\n在这篇[博客](https://ustc-han.github.io/2019/07/11/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/)中讲述了节流的内部实现。本篇主要通过节流来优化滚动加载。\n\n## 滚动加载\n滚动加载是前端性能优化常用的手段，通过滚动加载减少网路时延和白屏时间，提高用户的使用体验。\n\n### 节流与滚动加载\n\nJquery代码：\n\n```js\n$(document).ready(function(){\n  \n  // Check every 300ms the scroll position\n  $(document).on('scroll', _.throttle(function(){\n    check_if_needs_more_content();\n  }, 300));\n\n  function check_if_needs_more_content() {\n    pixelsFromWindowBottomToBottom = 0 + $(document).height() - $(window).scrollTop() - $(window).height();\n\n  // console.log($(document).height());\n  // console.log($(window).scrollTop());\n  // console.log($(window).height());\n  //console.log(pixelsFromWindowBottomToBottom);\n\n    if (pixelsFromWindowBottomToBottom < 200){\n      // Here it would go an ajax request\n      $('body').append($('.item').clone());\n    }\n  }\n});\n```\n$(document).height()： 文档高度固定\n\n$(window).scrollTop() 视窗顶端到文档顶端的距离\n\n$(window).height() 视窗高度\n\n当滚动条到达视窗底部的时候：文档高度 = 视窗高度 +$(window).scrollTop()\n\n[damo链接](https://codepen.io/ustc-han/pen/WNeXqWL?editors=0110)\n\n参考链接：https://css-tricks.com/debouncing-throttling-explained-examples/\n","source":"_posts/节流-滚动加载.md","raw":"---\ntitle: 节流-滚动加载\ntags: \n- JS\n- 节流\n- 滚动加载\n---\n\n## 前言\n在这篇[博客](https://ustc-han.github.io/2019/07/11/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/)中讲述了节流的内部实现。本篇主要通过节流来优化滚动加载。\n\n## 滚动加载\n滚动加载是前端性能优化常用的手段，通过滚动加载减少网路时延和白屏时间，提高用户的使用体验。\n\n### 节流与滚动加载\n\nJquery代码：\n\n```js\n$(document).ready(function(){\n  \n  // Check every 300ms the scroll position\n  $(document).on('scroll', _.throttle(function(){\n    check_if_needs_more_content();\n  }, 300));\n\n  function check_if_needs_more_content() {\n    pixelsFromWindowBottomToBottom = 0 + $(document).height() - $(window).scrollTop() - $(window).height();\n\n  // console.log($(document).height());\n  // console.log($(window).scrollTop());\n  // console.log($(window).height());\n  //console.log(pixelsFromWindowBottomToBottom);\n\n    if (pixelsFromWindowBottomToBottom < 200){\n      // Here it would go an ajax request\n      $('body').append($('.item').clone());\n    }\n  }\n});\n```\n$(document).height()： 文档高度固定\n\n$(window).scrollTop() 视窗顶端到文档顶端的距离\n\n$(window).height() 视窗高度\n\n当滚动条到达视窗底部的时候：文档高度 = 视窗高度 +$(window).scrollTop()\n\n[damo链接](https://codepen.io/ustc-han/pen/WNeXqWL?editors=0110)\n\n参考链接：https://css-tricks.com/debouncing-throttling-explained-examples/\n","slug":"节流-滚动加载","published":1,"date":"2019-12-19T15:52:56.160Z","updated":"2019-12-19T15:52:56.160Z","_id":"ck4cwgnjf0041ckukq4kmrfcm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在这篇<a href=\"https://ustc-han.github.io/2019/07/11/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/\">博客</a>中讲述了节流的内部实现。本篇主要通过节流来优化滚动加载。</p>\n<h2 id=\"滚动加载\"><a href=\"#滚动加载\" class=\"headerlink\" title=\"滚动加载\"></a>滚动加载</h2><p>滚动加载是前端性能优化常用的手段，通过滚动加载减少网路时延和白屏时间，提高用户的使用体验。</p>\n<h3 id=\"节流与滚动加载\"><a href=\"#节流与滚动加载\" class=\"headerlink\" title=\"节流与滚动加载\"></a>节流与滚动加载</h3><p>Jquery代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// Check every 300ms the scroll position</span></span><br><span class=\"line\">  $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'scroll'</span>, _.throttle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    check_if_needs_more_content();</span><br><span class=\"line\">  &#125;, <span class=\"number\">300</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_if_needs_more_content</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    pixelsFromWindowBottomToBottom = <span class=\"number\">0</span> + $(<span class=\"built_in\">document</span>).height() - $(<span class=\"built_in\">window</span>).scrollTop() - $(<span class=\"built_in\">window</span>).height();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// console.log($(document).height());</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log($(window).scrollTop());</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log($(window).height());</span></span><br><span class=\"line\">  <span class=\"comment\">//console.log(pixelsFromWindowBottomToBottom);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pixelsFromWindowBottomToBottom &lt; <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Here it would go an ajax request</span></span><br><span class=\"line\">      $(<span class=\"string\">'body'</span>).append($(<span class=\"string\">'.item'</span>).clone());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>$(document).height()： 文档高度固定</p>\n<p>$(window).scrollTop() 视窗顶端到文档顶端的距离</p>\n<p>$(window).height() 视窗高度</p>\n<p>当滚动条到达视窗底部的时候：文档高度 = 视窗高度 +$(window).scrollTop()</p>\n<p><a href=\"https://codepen.io/ustc-han/pen/WNeXqWL?editors=0110\" target=\"_blank\" rel=\"noopener\">damo链接</a></p>\n<p>参考链接：<a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/debouncing-throttling-explained-examples/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在这篇<a href=\"https://ustc-han.github.io/2019/07/11/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/\">博客</a>中讲述了节流的内部实现。本篇主要通过节流来优化滚动加载。</p>\n<h2 id=\"滚动加载\"><a href=\"#滚动加载\" class=\"headerlink\" title=\"滚动加载\"></a>滚动加载</h2><p>滚动加载是前端性能优化常用的手段，通过滚动加载减少网路时延和白屏时间，提高用户的使用体验。</p>\n<h3 id=\"节流与滚动加载\"><a href=\"#节流与滚动加载\" class=\"headerlink\" title=\"节流与滚动加载\"></a>节流与滚动加载</h3><p>Jquery代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// Check every 300ms the scroll position</span></span><br><span class=\"line\">  $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'scroll'</span>, _.throttle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    check_if_needs_more_content();</span><br><span class=\"line\">  &#125;, <span class=\"number\">300</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_if_needs_more_content</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    pixelsFromWindowBottomToBottom = <span class=\"number\">0</span> + $(<span class=\"built_in\">document</span>).height() - $(<span class=\"built_in\">window</span>).scrollTop() - $(<span class=\"built_in\">window</span>).height();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// console.log($(document).height());</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log($(window).scrollTop());</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log($(window).height());</span></span><br><span class=\"line\">  <span class=\"comment\">//console.log(pixelsFromWindowBottomToBottom);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pixelsFromWindowBottomToBottom &lt; <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Here it would go an ajax request</span></span><br><span class=\"line\">      $(<span class=\"string\">'body'</span>).append($(<span class=\"string\">'.item'</span>).clone());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>$(document).height()： 文档高度固定</p>\n<p>$(window).scrollTop() 视窗顶端到文档顶端的距离</p>\n<p>$(window).height() 视窗高度</p>\n<p>当滚动条到达视窗底部的时候：文档高度 = 视窗高度 +$(window).scrollTop()</p>\n<p><a href=\"https://codepen.io/ustc-han/pen/WNeXqWL?editors=0110\" target=\"_blank\" rel=\"noopener\">damo链接</a></p>\n<p>参考链接：<a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/debouncing-throttling-explained-examples/</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck4cwgnhb0001ckuk0q4xpdka","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnhq000cckuk86xk1zhq"},{"post_id":"ck4cwgnhb0001ckuk0q4xpdka","tag_id":"ck4cwgnhk0007ckukd44rfa6v","_id":"ck4cwgnhr000eckukafb8039o"},{"post_id":"ck4cwgnhe0002ckukr8u56o6w","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnhw000nckukbuhpqhmx"},{"post_id":"ck4cwgnhe0002ckukr8u56o6w","tag_id":"ck4cwgnhr000fckukty9bew5f","_id":"ck4cwgnhx000pckukblna0mz6"},{"post_id":"ck4cwgnhe0002ckukr8u56o6w","tag_id":"ck4cwgnht000ickukz3jmwom7","_id":"ck4cwgnhy000sckuklujkwujo"},{"post_id":"ck4cwgnhi0004ckuklrc57t7f","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgni20010ckukrts93za4"},{"post_id":"ck4cwgnhi0004ckuklrc57t7f","tag_id":"ck4cwgnhx000qckuke0b2p06f","_id":"ck4cwgni30012ckuk2a0xmfrm"},{"post_id":"ck4cwgnhi0004ckuklrc57t7f","tag_id":"ck4cwgni0000vckukq393wt1e","_id":"ck4cwgni40015ckukpvdam98u"},{"post_id":"ck4cwgnhj0005ckuk75atnqz7","tag_id":"ck4cwgni1000yckukf3vxnd31","_id":"ck4cwgni8001cckuk5i0mrc4c"},{"post_id":"ck4cwgnhj0005ckuk75atnqz7","tag_id":"ck4cwgni40013ckuk137m66we","_id":"ck4cwgni9001eckuk8319m733"},{"post_id":"ck4cwgnhj0005ckuk75atnqz7","tag_id":"ck4cwgni60017ckuk5hlgz28l","_id":"ck4cwgnia001hckuksbzfhgqn"},{"post_id":"ck4cwgnhk0006ckuk46oqv9mf","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnid001mckukqq1ubj61"},{"post_id":"ck4cwgnhk0006ckuk46oqv9mf","tag_id":"ck4cwgni8001bckukm6xvgzkz","_id":"ck4cwgnie001ockukf3ww04ht"},{"post_id":"ck4cwgnhk0006ckuk46oqv9mf","tag_id":"ck4cwgnia001gckukd69b0bty","_id":"ck4cwgnif001rckuktir32x6p"},{"post_id":"ck4cwgnib001jckukx0d6tu5e","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnif001tckukcrgbicwl"},{"post_id":"ck4cwgnhl0008ckuk8pm2apmo","tag_id":"ck4cwgnib001kckuk5deszhd0","_id":"ck4cwgnig001wckuk5tdqtb74"},{"post_id":"ck4cwgnhm0009ckuk4gomyd91","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnih001yckukcbwfvv9y"},{"post_id":"ck4cwgnhm0009ckuk4gomyd91","tag_id":"ck4cwgnie001pckuktvx92sa0","_id":"ck4cwgnii0021ckukux4ncr09"},{"post_id":"ck4cwgnho000bckukityf2jka","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnij0023ckukkzo05b7k"},{"post_id":"ck4cwgnho000bckukityf2jka","tag_id":"ck4cwgnig001vckukl7ok31eo","_id":"ck4cwgnik0025ckuk4e38oz9t"},{"post_id":"ck4cwgnii0022ckuktdrgn0lg","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnil0028ckukxt78yj46"},{"post_id":"ck4cwgnii0022ckuktdrgn0lg","tag_id":"ck4cwgnhr000fckukty9bew5f","_id":"ck4cwgnim002ackuk28tajxac"},{"post_id":"ck4cwgnhq000dckuk6vgxua7t","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnin002dckuka1mzezmr"},{"post_id":"ck4cwgnhq000dckuk6vgxua7t","tag_id":"ck4cwgnii0020ckukwoowtd0w","_id":"ck4cwgnin002fckuk3mosh6at"},{"post_id":"ck4cwgnil0029ckukytrua2as","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnio002ickukb66tlynv"},{"post_id":"ck4cwgnhr000gckuka5cutydo","tag_id":"ck4cwgnik0026ckukgps6ddfx","_id":"ck4cwgnis002qckukcumf96ty"},{"post_id":"ck4cwgnhr000gckuka5cutydo","tag_id":"ck4cwgnim002bckuk196bl1i8","_id":"ck4cwgnit002sckukkkc5f2kn"},{"post_id":"ck4cwgnhr000gckuka5cutydo","tag_id":"ck4cwgnio002hckuk88oyxtlt","_id":"ck4cwgniu002vckuk1b5yjz13"},{"post_id":"ck4cwgnhr000gckuka5cutydo","tag_id":"ck4cwgnip002lckuk274psxgi","_id":"ck4cwgniv002xckukhplxda1t"},{"post_id":"ck4cwgnhs000hckuk1g74auht","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgniw0030ckukegog3anl"},{"post_id":"ck4cwgnhs000hckuk1g74auht","tag_id":"ck4cwgnir002ockukmwxsbcr0","_id":"ck4cwgnix0032ckukroavyj73"},{"post_id":"ck4cwgnhs000hckuk1g74auht","tag_id":"ck4cwgnit002tckuko1hlxloa","_id":"ck4cwgniy0035ckukng2weccx"},{"post_id":"ck4cwgniw0031ckukoz7smft1","tag_id":"ck4cwgnib001kckuk5deszhd0","_id":"ck4cwgniy0037ckukbwhbtarr"},{"post_id":"ck4cwgnht000jckukkbau7452","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgniz003ackukrglw42n5"},{"post_id":"ck4cwgnht000jckukkbau7452","tag_id":"ck4cwgniw002zckuk66nzfm88","_id":"ck4cwgnj1003cckukawx08eb3"},{"post_id":"ck4cwgnj2003fckuk1ty9eyqz","tag_id":"ck4cwgnib001kckuk5deszhd0","_id":"ck4cwgnj3003hckukqbx37sxz"},{"post_id":"ck4cwgnhu000kckukawdfb1ai","tag_id":"ck4cwgnix0034ckuk41cag6t5","_id":"ck4cwgnj5003kckuk7i1xi4lh"},{"post_id":"ck4cwgnhu000kckukawdfb1ai","tag_id":"ck4cwgniz0039ckuk5corhcdr","_id":"ck4cwgnj7003mckukcrld3cjh"},{"post_id":"ck4cwgnhu000kckukawdfb1ai","tag_id":"ck4cwgnj2003eckuk7ithc3hq","_id":"ck4cwgnj8003pckukeljk6tr4"},{"post_id":"ck4cwgnhv000mckuk4yvvpkkk","tag_id":"ck4cwgnik0026ckukgps6ddfx","_id":"ck4cwgnjf0040ckukzt1sgn5u"},{"post_id":"ck4cwgnhv000mckuk4yvvpkkk","tag_id":"ck4cwgnj7003ockukyrvw2d15","_id":"ck4cwgnjf0042ckukinf8amdm"},{"post_id":"ck4cwgnhv000mckuk4yvvpkkk","tag_id":"ck4cwgnja003sckukeh1rfbt5","_id":"ck4cwgnjg0044ckukfn9owx10"},{"post_id":"ck4cwgnhv000mckuk4yvvpkkk","tag_id":"ck4cwgnjc003vckuk95lr46or","_id":"ck4cwgnjg0045ckuk66exd8l3"},{"post_id":"ck4cwgnhx000ockuk95nmt34q","tag_id":"ck4cwgnix0034ckuk41cag6t5","_id":"ck4cwgnjh0047ckukf5bcxqqb"},{"post_id":"ck4cwgnhy000rckukiiiu48et","tag_id":"ck4cwgni1000yckukf3vxnd31","_id":"ck4cwgnjh004bckukde6nrayd"},{"post_id":"ck4cwgnhy000rckukiiiu48et","tag_id":"ck4cwgnjg0046ckukl3jtqzzz","_id":"ck4cwgnji004cckuksh1c2118"},{"post_id":"ck4cwgnhy000rckukiiiu48et","tag_id":"ck4cwgnjh0048ckuk7mqzdqqq","_id":"ck4cwgnji004eckukllgixr7m"},{"post_id":"ck4cwgnhy000rckukiiiu48et","tag_id":"ck4cwgnjh0049ckukdi7zn2xv","_id":"ck4cwgnji004fckukqrptcq0e"},{"post_id":"ck4cwgnhy000tckuk5x3fy592","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnji004hckuk819uc2gs"},{"post_id":"ck4cwgnhy000tckuk5x3fy592","tag_id":"ck4cwgnjh004ackuk4acuurfc","_id":"ck4cwgnji004ickuk84l61sb7"},{"post_id":"ck4cwgnhz000uckukucywlvsr","tag_id":"ck4cwgni1000yckukf3vxnd31","_id":"ck4cwgnjj004kckuk249u2b6x"},{"post_id":"ck4cwgni0000wckukc0g26lp3","tag_id":"ck4cwgnji004gckukghfjtm6i","_id":"ck4cwgnjj004nckuk41z66jli"},{"post_id":"ck4cwgni0000wckukc0g26lp3","tag_id":"ck4cwgnji004jckuk55kmwqzc","_id":"ck4cwgnjj004ockuklaqilbem"},{"post_id":"ck4cwgni0000wckukc0g26lp3","tag_id":"ck4cwgnjj004lckukl2wu1g8t","_id":"ck4cwgnjk004qckukxvtbgw94"},{"post_id":"ck4cwgni1000xckuk5ihoxpsi","tag_id":"ck4cwgnji004gckukghfjtm6i","_id":"ck4cwgnjk004rckukcst234pb"},{"post_id":"ck4cwgni2000zckukir3mzpbd","tag_id":"ck4cwgnib001kckuk5deszhd0","_id":"ck4cwgnjk004tckukk6ntz768"},{"post_id":"ck4cwgni30011ckukve8rwca6","tag_id":"ck4cwgnib001kckuk5deszhd0","_id":"ck4cwgnjl004vckuk12q2enza"},{"post_id":"ck4cwgni40014ckuksrs3hk8d","tag_id":"ck4cwgnib001kckuk5deszhd0","_id":"ck4cwgnjl004xckukowt4ezcx"},{"post_id":"ck4cwgni50016ckukdxchzw5g","tag_id":"ck4cwgnib001kckuk5deszhd0","_id":"ck4cwgnjm004zckukxi1q7odf"},{"post_id":"ck4cwgni60018ckukvckry13g","tag_id":"ck4cwgnik0026ckukgps6ddfx","_id":"ck4cwgnjm0052ckukt8sxhr1f"},{"post_id":"ck4cwgni60018ckukvckry13g","tag_id":"ck4cwgnjm0050ckuk1lp9skd0","_id":"ck4cwgnjm0053ckuk2ktiaci6"},{"post_id":"ck4cwgni70019ckukhhy4q65b","tag_id":"ck4cwgnji004gckukghfjtm6i","_id":"ck4cwgnjn0056ckukf8jq8imd"},{"post_id":"ck4cwgni70019ckukhhy4q65b","tag_id":"ck4cwgnjn0054ckuk9u7n607b","_id":"ck4cwgnjn0057ckukl911p5n3"},{"post_id":"ck4cwgni7001ackukiculahdv","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnjo005ackukv8978liy"},{"post_id":"ck4cwgni7001ackukiculahdv","tag_id":"ck4cwgnjn0055ckuklnqjax16","_id":"ck4cwgnjo005bckukxbighvnv"},{"post_id":"ck4cwgni7001ackukiculahdv","tag_id":"ck4cwgnjn0058ckukcuh9dcl7","_id":"ck4cwgnjo005dckuklu9nci0b"},{"post_id":"ck4cwgni8001dckukzefkvkg2","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnjo005eckuk7krtr1lp"},{"post_id":"ck4cwgni8001dckukzefkvkg2","tag_id":"ck4cwgnjn0059ckukcajt0buk","_id":"ck4cwgnjs005gckuk0erraqpx"},{"post_id":"ck4cwgni9001fckukrbd1acev","tag_id":"ck4cwgni1000yckukf3vxnd31","_id":"ck4cwgnjt005ickukihddh4zr"},{"post_id":"ck4cwgni9001fckukrbd1acev","tag_id":"ck4cwgnjo005cckukc89mu1up","_id":"ck4cwgnjt005jckukd8mekdtz"},{"post_id":"ck4cwgni9001fckukrbd1acev","tag_id":"ck4cwgnjo005fckukg29xdjmh","_id":"ck4cwgnjt005lckukgg8x6y5z"},{"post_id":"ck4cwgnia001ickuk6ia6hjwf","tag_id":"ck4cwgnik0026ckukgps6ddfx","_id":"ck4cwgnjt005nckuknl4sde2c"},{"post_id":"ck4cwgnia001ickuk6ia6hjwf","tag_id":"ck4cwgnjt005kckukiya0k3cg","_id":"ck4cwgnju005ockuk67kuncfa"},{"post_id":"ck4cwgnic001lckukjxwzrzgc","tag_id":"ck4cwgnjt005mckukzqge0x46","_id":"ck4cwgnju005qckuk1b1qmhjw"},{"post_id":"ck4cwgnid001nckukufr8fufj","tag_id":"ck4cwgnjt005mckukzqge0x46","_id":"ck4cwgnjv005sckukz3tuttg6"},{"post_id":"ck4cwgnie001qckuk4mzwu0on","tag_id":"ck4cwgnjt005mckukzqge0x46","_id":"ck4cwgnjw005wckukvadef7v2"},{"post_id":"ck4cwgnie001qckuk4mzwu0on","tag_id":"ck4cwgnjv005tckukeocrjcbl","_id":"ck4cwgnjw005xckukrd14t9de"},{"post_id":"ck4cwgnie001qckuk4mzwu0on","tag_id":"ck4cwgnjv005uckukn5nna0tj","_id":"ck4cwgnjw005zckukmyaho5p1"},{"post_id":"ck4cwgnif001sckukjxg6pulk","tag_id":"ck4cwgnjt005mckukzqge0x46","_id":"ck4cwgnjx0060ckukt2s5vcau"},{"post_id":"ck4cwgnig001uckuk3k2sh3sc","tag_id":"ck4cwgnjt005mckukzqge0x46","_id":"ck4cwgnjx0062ckukd81zozww"},{"post_id":"ck4cwgnih001xckuk6jkn6rp7","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnjy0064ckuk5j7541b0"},{"post_id":"ck4cwgnih001xckuk6jkn6rp7","tag_id":"ck4cwgnjx0061ckuk7767dqsu","_id":"ck4cwgnjy0065ckukqgyc545r"},{"post_id":"ck4cwgnih001zckukja4v18zi","tag_id":"ck4cwgnik0026ckukgps6ddfx","_id":"ck4cwgnjz0068ckuksa0w8hcl"},{"post_id":"ck4cwgnih001zckukja4v18zi","tag_id":"ck4cwgnim002bckuk196bl1i8","_id":"ck4cwgnjz0069ckuk483riad8"},{"post_id":"ck4cwgnij0024ckukd783vibj","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnjz006bckuk5j3x6k7f"},{"post_id":"ck4cwgnij0024ckukd783vibj","tag_id":"ck4cwgnjz0067ckuk33u5qccq","_id":"ck4cwgnjz006cckukzau8c7qq"},{"post_id":"ck4cwgnik0027ckukg3zb0jbr","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnk0006eckukkupt7kvd"},{"post_id":"ck4cwgnik0027ckukg3zb0jbr","tag_id":"ck4cwgnjz006ackukgeten7bd","_id":"ck4cwgnk0006fckukofw8hmed"},{"post_id":"ck4cwgnim002cckuky883lk50","tag_id":"ck4cwgnjt005mckukzqge0x46","_id":"ck4cwgnk1006hckuknii41u7d"},{"post_id":"ck4cwgnin002eckukeaghwh7q","tag_id":"ck4cwgnji004gckukghfjtm6i","_id":"ck4cwgnk1006jckukr36xi9xz"},{"post_id":"ck4cwgnin002gckukin6902mh","tag_id":"ck4cwgnji004gckukghfjtm6i","_id":"ck4cwgnk2006nckukpjsih07c"},{"post_id":"ck4cwgnin002gckukin6902mh","tag_id":"ck4cwgnk1006kckukiaudt159","_id":"ck4cwgnk2006ockukv6u43miq"},{"post_id":"ck4cwgnin002gckukin6902mh","tag_id":"ck4cwgnk1006lckukb0k8wywz","_id":"ck4cwgnk2006qckuklvgvi481"},{"post_id":"ck4cwgnio002jckuke7zka2b8","tag_id":"ck4cwgnji004gckukghfjtm6i","_id":"ck4cwgnk3006rckuk5sw0mtmw"},{"post_id":"ck4cwgnip002kckukbembkibl","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnk3006uckuk5jy2ug7z"},{"post_id":"ck4cwgnip002kckukbembkibl","tag_id":"ck4cwgnk2006pckuk7zlt7cxa","_id":"ck4cwgnk3006vckukci9246lu"},{"post_id":"ck4cwgnip002kckukbembkibl","tag_id":"ck4cwgnk3006sckuktuaofmbo","_id":"ck4cwgnk4006xckukh5ady2e4"},{"post_id":"ck4cwgniq002mckukqxklaf3g","tag_id":"ck4cwgnix0034ckuk41cag6t5","_id":"ck4cwgnk4006yckuk7anuyh6s"},{"post_id":"ck4cwgniq002nckuk5exrvb6g","tag_id":"ck4cwgnik0026ckukgps6ddfx","_id":"ck4cwgnk50072ckukhddfe34a"},{"post_id":"ck4cwgniq002nckuk5exrvb6g","tag_id":"ck4cwgnk3006wckukhceowudj","_id":"ck4cwgnk50073ckuk5o3arhpy"},{"post_id":"ck4cwgniq002nckuk5exrvb6g","tag_id":"ck4cwgnk4006zckukef1zvbzx","_id":"ck4cwgnk60075ckukvdb99n47"},{"post_id":"ck4cwgniq002nckuk5exrvb6g","tag_id":"ck4cwgnk40070ckukp1n613ax","_id":"ck4cwgnk60076ckukp1kv4j8o"},{"post_id":"ck4cwgnir002pckuk5ygrjrxu","tag_id":"ck4cwgnji004gckukghfjtm6i","_id":"ck4cwgnk60078ckukjovtjyhm"},{"post_id":"ck4cwgnis002rckukb38mkuks","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnk7007cckuk6i99ceea"},{"post_id":"ck4cwgnis002rckukb38mkuks","tag_id":"ck4cwgnk50074ckukpfrlfqcv","_id":"ck4cwgnk7007dckuk7m9aby4v"},{"post_id":"ck4cwgnis002rckukb38mkuks","tag_id":"ck4cwgnk60077ckukr3gkmv3m","_id":"ck4cwgnk7007fckuk1gint57x"},{"post_id":"ck4cwgnis002rckukb38mkuks","tag_id":"ck4cwgnk60079ckukr0ksjk9d","_id":"ck4cwgnk8007gckukr135io2h"},{"post_id":"ck4cwgnis002rckukb38mkuks","tag_id":"ck4cwgnk6007ackukn4dhs3ze","_id":"ck4cwgnk8007ickuk1we7wvif"},{"post_id":"ck4cwgnit002uckuktl1qr0q5","tag_id":"ck4cwgnji004gckukghfjtm6i","_id":"ck4cwgnk8007jckukj9xzukml"},{"post_id":"ck4cwgniu002wckuk244b78ei","tag_id":"ck4cwgnji004gckukghfjtm6i","_id":"ck4cwgnk8007lckukun5w846j"},{"post_id":"ck4cwgniv002yckuk5qy1dfsd","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnk8007mckuka9ts4pwj"},{"post_id":"ck4cwgniv002yckuk5qy1dfsd","tag_id":"ck4cwgnk8007hckukvaomfg7m","_id":"ck4cwgnk9007ockuk37irypjb"},{"post_id":"ck4cwgnix0033ckukhkn1op3d","tag_id":"ck4cwgni1000yckukf3vxnd31","_id":"ck4cwgnk9007qckukvonngwzr"},{"post_id":"ck4cwgnix0033ckukhkn1op3d","tag_id":"ck4cwgnk8007kckukgsueb4lr","_id":"ck4cwgnk9007rckukp981h6kp"},{"post_id":"ck4cwgnix0033ckukhkn1op3d","tag_id":"ck4cwgnk9007nckukxuoekfqf","_id":"ck4cwgnka007tckukiqtdmm4m"},{"post_id":"ck4cwgniy0036ckukap8224c5","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnka007uckukk68cz86o"},{"post_id":"ck4cwgniy0036ckukap8224c5","tag_id":"ck4cwgnk9007pckukivv3ma1j","_id":"ck4cwgnka007wckukp6s53ibs"},{"post_id":"ck4cwgniy0038ckuk5j2euguz","tag_id":"ck4cwgnjt005mckukzqge0x46","_id":"ck4cwgnka007xckukididaxlg"},{"post_id":"ck4cwgniz003bckukon13wzf4","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnkb0080ckukym5t3q17"},{"post_id":"ck4cwgniz003bckukon13wzf4","tag_id":"ck4cwgnka007vckukouucpb9p","_id":"ck4cwgnkb0081ckuktgkzk6j0"},{"post_id":"ck4cwgniz003bckukon13wzf4","tag_id":"ck4cwgnka007yckuk9rixabiw","_id":"ck4cwgnkc0083ckukahjctvnm"},{"post_id":"ck4cwgnj1003dckukujnxr0d2","tag_id":"ck4cwgnkb007zckukuog2uow8","_id":"ck4cwgnkc0084ckuka2qt7fe3"},{"post_id":"ck4cwgnj2003gckukkwqjvv3t","tag_id":"ck4cwgni1000yckukf3vxnd31","_id":"ck4cwgnkd0088ckuk4rwxq3di"},{"post_id":"ck4cwgnj2003gckukkwqjvv3t","tag_id":"ck4cwgnkb0082ckukpvly0kxd","_id":"ck4cwgnkd0089ckukbwhwi2op"},{"post_id":"ck4cwgnj2003gckukkwqjvv3t","tag_id":"ck4cwgnkc0085ckukpurn3usm","_id":"ck4cwgnkd008bckukie5yjg7p"},{"post_id":"ck4cwgnj2003gckukkwqjvv3t","tag_id":"ck4cwgnkc0086ckukld8qbxo4","_id":"ck4cwgnke008cckuke0b1vn4m"},{"post_id":"ck4cwgnj3003ickukfcasc4ga","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnke008fckukcn4e385v"},{"post_id":"ck4cwgnj3003ickukfcasc4ga","tag_id":"ck4cwgnkc0087ckuk1e315lle","_id":"ck4cwgnke008gckukjiynpafi"},{"post_id":"ck4cwgnj3003ickukfcasc4ga","tag_id":"ck4cwgnkd008ackukv3q9wiig","_id":"ck4cwgnkf008ickukuu5yq8dx"},{"post_id":"ck4cwgnj3003ickukfcasc4ga","tag_id":"ck4cwgnke008dckuksnpcd0i9","_id":"ck4cwgnkf008jckuktkaqt5zm"},{"post_id":"ck4cwgnj5003lckukkj9dy89f","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnkg008lckuksnq11tc6"},{"post_id":"ck4cwgnj5003lckukkj9dy89f","tag_id":"ck4cwgnke008eckukv11u9yib","_id":"ck4cwgnkg008mckukq0rdh3s7"},{"post_id":"ck4cwgnj7003nckukrrg0l16d","tag_id":"ck4cwgnjt005mckukzqge0x46","_id":"ck4cwgnki008pckukvnzjretn"},{"post_id":"ck4cwgnj7003nckukrrg0l16d","tag_id":"ck4cwgnkf008kckuki9jh7il3","_id":"ck4cwgnki008qckukqo71m6qi"},{"post_id":"ck4cwgnj7003nckukrrg0l16d","tag_id":"ck4cwgnkg008nckuky7ia447z","_id":"ck4cwgnkj008sckuk2xd1uk40"},{"post_id":"ck4cwgnj8003qckukd0p1k3e1","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnkj008tckukk8ve2jut"},{"post_id":"ck4cwgnj8003qckukd0p1k3e1","tag_id":"ck4cwgnki008ockuko60eqnn2","_id":"ck4cwgnkj008vckukszcx3nwl"},{"post_id":"ck4cwgnj9003rckuksdkpzbww","tag_id":"ck4cwgnjt005mckukzqge0x46","_id":"ck4cwgnkj008xckukyq0j1g5o"},{"post_id":"ck4cwgnj9003rckuksdkpzbww","tag_id":"ck4cwgnkj008uckuki9gkcree","_id":"ck4cwgnkj008yckukc3ezjwma"},{"post_id":"ck4cwgnja003tckukvgzux82n","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnkk0090ckukfx1tln3r"},{"post_id":"ck4cwgnja003tckukvgzux82n","tag_id":"ck4cwgnkj008wckukmfwolzty","_id":"ck4cwgnkk0091ckuk9qdhd0by"},{"post_id":"ck4cwgnjb003uckuk5hfvkrnk","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnkl0094ckuky9jh2um0"},{"post_id":"ck4cwgnjb003uckuk5hfvkrnk","tag_id":"ck4cwgnkk008zckuk18fncb8p","_id":"ck4cwgnkl0095ckuk1piz3yct"},{"post_id":"ck4cwgnjb003uckuk5hfvkrnk","tag_id":"ck4cwgnkk0092ckukapc0048m","_id":"ck4cwgnkl0097ckuk4ek54r9i"},{"post_id":"ck4cwgnjc003wckuk1wmh4b5o","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnkm0099ckukh9sqhsso"},{"post_id":"ck4cwgnjc003wckuk1wmh4b5o","tag_id":"ck4cwgnkk0093ckuk7lxysu9y","_id":"ck4cwgnkm009ackukbfn3ncln"},{"post_id":"ck4cwgnjc003wckuk1wmh4b5o","tag_id":"ck4cwgnkl0096ckuk991odmpz","_id":"ck4cwgnkm009cckuk9xi4vkh2"},{"post_id":"ck4cwgnje003zckukks1pvocb","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnko009ickukso3qrpqs"},{"post_id":"ck4cwgnje003zckukks1pvocb","tag_id":"ck4cwgnkm009bckukt1hpizkn","_id":"ck4cwgnko009jckuk3ns1int8"},{"post_id":"ck4cwgnje003zckukks1pvocb","tag_id":"ck4cwgnkm009eckukdpeonvxb","_id":"ck4cwgnkp009lckukr00f9flf"},{"post_id":"ck4cwgnje003zckukks1pvocb","tag_id":"ck4cwgnkn009gckuk7gf0clny","_id":"ck4cwgnkp009mckukt3ni2dft"},{"post_id":"ck4cwgnjf0041ckukq4kmrfcm","tag_id":"ck4cwgnhg0003ckuk3sp34wxv","_id":"ck4cwgnkp009nckuk0ev4s4te"},{"post_id":"ck4cwgnjf0041ckukq4kmrfcm","tag_id":"ck4cwgnkl0096ckuk991odmpz","_id":"ck4cwgnkp009ockuksxvweucs"},{"post_id":"ck4cwgnjf0041ckukq4kmrfcm","tag_id":"ck4cwgnko009kckuk2cviu547","_id":"ck4cwgnkp009pckuk9v7sv56q"}],"Tag":[{"name":"JS","_id":"ck4cwgnhg0003ckuk3sp34wxv"},{"name":"babel","_id":"ck4cwgnhk0007ckukd44rfa6v"},{"name":"Array","_id":"ck4cwgnhr000fckukty9bew5f"},{"name":"flat","_id":"ck4cwgnht000ickukz3jmwom7"},{"name":"闭包","_id":"ck4cwgnhx000qckuke0b2p06f"},{"name":"内存泄漏","_id":"ck4cwgni0000vckukq393wt1e"},{"name":"CSS","_id":"ck4cwgni1000yckukf3vxnd31"},{"name":"width:auto","_id":"ck4cwgni40013ckuk137m66we"},{"name":"width:100%","_id":"ck4cwgni60017ckuk5hlgz28l"},{"name":"深比较","_id":"ck4cwgni8001bckukm6xvgzkz"},{"name":"_.isEqual()","_id":"ck4cwgnia001gckukd69b0bty"},{"name":"Git","_id":"ck4cwgnib001kckuk5deszhd0"},{"name":"深拷贝","_id":"ck4cwgnie001pckuktvx92sa0"},{"name":"变量互换","_id":"ck4cwgnig001vckukl7ok31eo"},{"name":"Math","_id":"ck4cwgnii0020ckukwoowtd0w"},{"name":"Web","_id":"ck4cwgnik0026ckukgps6ddfx"},{"name":"页面渲染","_id":"ck4cwgnim002bckuk196bl1i8"},{"name":"DOMContentLoaded","_id":"ck4cwgnio002hckuk88oyxtlt"},{"name":"load","_id":"ck4cwgnip002lckuk274psxgi"},{"name":"Object.create()","_id":"ck4cwgnir002ockukmwxsbcr0"},{"name":"new Object()","_id":"ck4cwgnit002tckuko1hlxloa"},{"name":"Promise","_id":"ck4cwgniw002zckuk66nzfm88"},{"name":"开发工具","_id":"ck4cwgnix0034ckuk41cag6t5"},{"name":"PicGo","_id":"ck4cwgniz0039ckuk5corhcdr"},{"name":"Markdown","_id":"ck4cwgnj2003eckuk7ithc3hq"},{"name":"H5","_id":"ck4cwgnj7003ockukyrvw2d15"},{"name":"webSocket","_id":"ck4cwgnja003sckukeh1rfbt5"},{"name":"web Worker","_id":"ck4cwgnjc003vckuk95lr46or"},{"name":"flex","_id":"ck4cwgnjg0046ckukl3jtqzzz"},{"name":"align-items","_id":"ck4cwgnjh0048ckuk7mqzdqqq"},{"name":"align-content","_id":"ck4cwgnjh0049ckukdi7zn2xv"},{"name":"Async","_id":"ck4cwgnjh004ackuk4acuurfc"},{"name":"React","_id":"ck4cwgnji004gckukghfjtm6i"},{"name":"Redux","_id":"ck4cwgnji004jckuk55kmwqzc"},{"name":"[object Object]","_id":"ck4cwgnjj004lckukl2wu1g8t"},{"name":"http 缓存","_id":"ck4cwgnjm0050ckuk1lp9skd0"},{"name":"immutable","_id":"ck4cwgnjn0054ckuk9u7n607b"},{"name":"for...in","_id":"ck4cwgnjn0055ckuklnqjax16"},{"name":"for...of","_id":"ck4cwgnjn0058ckukcuh9dcl7"},{"name":"Iterable","_id":"ck4cwgnjn0059ckukcajt0buk"},{"name":"max-hight","_id":"ck4cwgnjo005cckukc89mu1up"},{"name":"min-hight","_id":"ck4cwgnjo005fckukg29xdjmh"},{"name":"location","_id":"ck4cwgnjt005kckukiya0k3cg"},{"name":"Node","_id":"ck4cwgnjt005mckukzqge0x46"},{"name":"npm link","_id":"ck4cwgnjv005tckukeocrjcbl"},{"name":"create-react-app","_id":"ck4cwgnjv005uckukn5nna0tj"},{"name":"number","_id":"ck4cwgnjx0061ckuk7767dqsu"},{"name":"parseInt","_id":"ck4cwgnjz0067ckuk33u5qccq"},{"name":"Promis.all()","_id":"ck4cwgnjz006ackukgeten7bd"},{"name":"rooter","_id":"ck4cwgnk1006kckukiaudt159"},{"name":"路由","_id":"ck4cwgnk1006lckukb0k8wywz"},{"name":"replace","_id":"ck4cwgnk2006pckuk7zlt7cxa"},{"name":"String","_id":"ck4cwgnk3006sckuktuaofmbo"},{"name":"DNS","_id":"ck4cwgnk3006wckukhceowudj"},{"name":"三次握手","_id":"ck4cwgnk4006zckukef1zvbzx"},{"name":"四次挥手","_id":"ck4cwgnk40070ckukp1n613ax"},{"name":"前序遍历","_id":"ck4cwgnk50074ckukpfrlfqcv"},{"name":"中序遍历","_id":"ck4cwgnk60077ckukr3gkmv3m"},{"name":"后序遍历","_id":"ck4cwgnk60079ckukr0ksjk9d"},{"name":"层次遍历","_id":"ck4cwgnk6007ackukn4dhs3ze"},{"name":"链式调用","_id":"ck4cwgnk8007hckukvaomfg7m"},{"name":"margin合并","_id":"ck4cwgnk8007kckukgsueb4lr"},{"name":"BFC","_id":"ck4cwgnk9007nckukxuoekfqf"},{"name":"ASCALL","_id":"ck4cwgnk9007pckukivv3ma1j"},{"name":"宏任务","_id":"ck4cwgnka007vckukouucpb9p"},{"name":"微任务","_id":"ck4cwgnka007yckuk9rixabiw"},{"name":"工具","_id":"ck4cwgnkb007zckukuog2uow8"},{"name":"水平居中","_id":"ck4cwgnkb0082ckukpvly0kxd"},{"name":"垂直居中","_id":"ck4cwgnkc0085ckukpurn3usm"},{"name":"水平垂直居中","_id":"ck4cwgnkc0086ckukld8qbxo4"},{"name":"数组","_id":"ck4cwgnkc0087ckuk1e315lle"},{"name":"交集","_id":"ck4cwgnkd008ackukv3q9wiig"},{"name":"并集","_id":"ck4cwgnke008dckuksnpcd0i9"},{"name":"柯理化","_id":"ck4cwgnke008eckukv11u9yib"},{"name":"进程","_id":"ck4cwgnkf008kckuki9jh7il3"},{"name":"线程","_id":"ck4cwgnkg008nckuky7ia447z"},{"name":"继承","_id":"ck4cwgnki008ockuko60eqnn2"},{"name":"浏览器内核","_id":"ck4cwgnkj008uckuki9gkcree"},{"name":"类数组对象","_id":"ck4cwgnkj008wckukmfwolzty"},{"name":"重新思考setTimeout","_id":"ck4cwgnkk008zckuk18fncb8p"},{"name":"事件循环","_id":"ck4cwgnkk0092ckukapc0048m"},{"name":"防抖","_id":"ck4cwgnkk0093ckuk7lxysu9y"},{"name":"节流","_id":"ck4cwgnkl0096ckuk991odmpz"},{"name":"mouseenter","_id":"ck4cwgnkl0098ckukgvwj989v"},{"name":"setTimeout","_id":"ck4cwgnkm009bckukt1hpizkn"},{"name":"setInterval","_id":"ck4cwgnkm009eckukdpeonvxb"},{"name":"时间循环","_id":"ck4cwgnkn009gckuk7gf0clny"},{"name":"滚动加载","_id":"ck4cwgnko009kckuk2cviu547"}]}}